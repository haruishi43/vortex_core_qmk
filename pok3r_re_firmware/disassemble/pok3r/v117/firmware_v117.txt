Firmware v117 Disassembly:

vector_table:
  0x2c00:   0x20003760  ; Stack Pointer     (stack_max)
    2c04:   0x2d55      ; PC Reset          (reset)
    2c08:   0x2d61      ; NMI               (nmi)
    2c0c:   0x2d63      ; Hard Fault        (hard_fault)
    2c10:   0x2d65      ; MCU Fault         (mcu_fault)
    2c14:   0x2d67      ; Bus Fault         (bus_fault)
    2c18:   0x2d69      ; Usage Fault       (usage_fault)
    2c1c:   0x0000      ; Reserved
    2c20:   0x0000      ; Reserved
    2c24:   0x0000      ; Reserved
    2c28:   0x0000      ; Reserved
    2c2c:   0x2d6b      ; SVCCall           (svccall_intr)
    2c30:   0x2d6d      ; Debug Monitor     (debug_intr)
    2c34:   0x0000      ; Reserved
    2c38:   0x2d6f      ; PendSV            (pendsv_intr)
    2c3c:   0x2d71      ; SySTick           (systick_intr)
    2c40:   0x2d73      ;  0 CKRDY          (generic_intr)
    2c44:   0x2d73      ;  1 LVD            (generic_intr)
    2c48:   0x2d73      ;  2 BOD            (generic_intr)
    2c4c:   0x2d73      ;  3 WDT            (generic_intr)
    2c50:   0x2d73      ;  4 RTC            (generic_intr)
    2c54:   0x2d73      ;  5 FMC            (generic_intr)
    2c58:   0x2d73      ;  6 EVWUP          (generic_intr)
    2c5c:   0x2d73      ;  7 LPWUP          (generic_intr)
    2c60:   0x2d73      ;  8 EXTI0          (generic_intr)
    2c64:   0x2d73      ;  9 EXTI1          (generic_intr)
    2c68:   0x2d73      ; 10 EXTI2          (generic_intr)
    2c6c:   0x2d73      ; 11 EXTI3          (generic_intr)
    2c70:   0x2d73      ; 12 EXTI4          (generic_intr)
    2c74:   0x2d73      ; 13 EXTI5          (generic_intr)
    2c78:   0x2d73      ; 14 EXTI6          (generic_intr)
    2c7c:   0x2d73      ; 15 EXTI7          (generic_intr)
    2c80:   0x2d73      ; 16 EXTI8          (generic_intr)
    2c84:   0x2d73      ; 17 EXTI9          (generic_intr)
    2c84:   0x2d73      ; 18 EXTI10         (generic_intr)
    2c8c:   0x2d73      ; 19 EXTI11         (generic_intr)
    2c90:   0x2d73      ; 20 EXTI12         (generic_intr)
    2c94:   0x2d73      ; 21 EXTI13         (generic_intr)
    2c98:   0x2d73      ; 22 EXTI14         (generic_intr)
    2c9c:   0x2d73      ; 23 EXTI15         (generic_intr)
    2ca0:   0x2d73      ; 24 COMP           (generic_intr)
    2ca4:   0x2d73      ; 25 ADC            (generic_intr)
    2ca8:   0x0000      ; Reserved
    2cac:   0x2d73      ; 27 MCTM0_BRK      (generic_intr)
    2cb0:   0x2d73      ; 28 MCTM0_UP       (generic_intr)
    2cb4:   0x2d73      ; 29 MCTM0_TR_UP2   (generic_intr)
    2cb8:   0x2d73      ; 30 MCTM0_CC       (generic_intr)
    2cbc:   0x2d73      ; 31 MCTM1_BRK      (generic_intr)
    2cc0:   0x2d73      ; 32 MCTM1_UP       (generic_intr)
    2cc4:   0x2d73      ; 33 MCTM1_TR_UP2   (generic_intr)
    2cc8:   0x2d73      ; 34 MCTM1_CC       (generic_intr)
    2ccc:   0x2d73      ; 35 GPTM0          (generic_intr)
    2cd0:   0x2d73      ; 36 GPTM1          (generic_intr)
    2cd4:   0x0000      ; Reserved
    2cd8:   0x0000      ; Reserved
    2cdc:   0x0000      ; Reserved
    2ce0:   0x0000      ; Reserved
    2ce4:   0x30c9      ; 41 BFTM0          (bftm0_intr)
    2ce8:   0x3251      ; 42 BFTM1          (bftm1_intr)
    2cec:   0x2d73      ; 43 I2C0           (generic_intr)
    2cf0:   0x364d      ; 44 I2C1           (i2c1_intr)
    2cf4:   0x2d73      ; 45 SPI0           (generic_intr)
    2cf8:   0x2d73      ; 46 SPI1           (generic_intr)
    2cfc:   0x2d73      ; 47 USART0         (generic_intr)
    2d00:   0x2d73      ; 48 USART1         (generic_intr)
    2d04:   0x2d73      ; 49 UART0          (generic_intr)
    2d08:   0x2d73      ; 50 UART1          (generic_intr)
    2d0c:   0x2d73      ; 51 SCI            (generic_intr)
    2d10:   0x2d73      ; 52 I2S            (generic_intr)
    2d14:   0x70dd      ; 53 USB            (usb_intr)
    2d18:   0x0000      ; Reserved
    2d1c:   0x2d73      ; 55 PDMA_CH0       (generic_intr)
    2d20:   0x2d73      ; 56 PDMA_CH1       (generic_intr)
    2d24:   0x2d73      ; 57 PDMA_CH2       (generic_intr)
    2d28:   0x2d73      ; 58 PDMA_CH3       (generic_intr)
    2d2c:   0x2d73      ; 59 PDMA_CH4       (generic_intr)
    2d30:   0x2d73      ; 60 PDMA_CH5       (generic_intr)
    2d34:   0x2d73      ; 61 PDMA_CH6       (generic_intr)
    2d38:   0x2d73      ; 62 PDMA_CH7       (generic_intr)
    2d3c:   0x0000      ; Reserved
    2d40:   0x0000      ; Reserved
    2d44:   0x0000      ; Reserved
    2d48:   0x0000      ; Reserved
    2d4c:   0x0000      ; Reserved
    2d50:   0x2d73      ; 68 EBI            (generic_intr)

.text:

reset:
  0x2d54:   4807        ldr r0, [pc, #28]   ; r0 = (0x2d74)
    2d56:   4780        blx r0              ; call r0 (watchdog_init)
    2d58:   4807        ldr r0, [pc, #28]   ; r0 = (0x2d78)
    2d5a:   4780        blx r0              ; call r0 (clock_init)
    2d5c:   4807        ldr r0, [pc, #28]   ; r0 = (0x2d7c)
    2d5e:   4700        bx r0               ; jump r0 (entry)

    ; all the faults and unused interrupts are dead loops
    ; they just wait to be killed by the watchdog
nmi:
  0x2d60:   e7fe        b.n 0x2d60
hard_fault:
  0x2d62:   e7fe        b.n 0x2d62
mcu_fault:
  0x2d64:   e7fe        b.n 0x2d64
bus_fault:
  0x2d66:   e7fe        b.n 0x2d66
usage_fault:
  0x2d68:   e7fe        b.n 0x2d68
svccall_intr:
  0x2d6a:   e7fe        b.n 0x2d6a
debug_intr:
  0x2d6c:   e7fe        b.n 0x2d6c
pendsv_intr:
  0x2d6e:   e7fe        b.n 0x2d6e
systick_intr:
  0x2d70:   e7fe        b.n 0x2d70

generic_intr:
  0x2d72:   e7fe        b.n 0x2d72

  0x2d74:   0x70e9 (watchdog_init)
  0x2d78:   0x66b9 (clock_init)
  0x2d7c:   0x2d81 (entry)

entry:
    ; Load stack pointer at top of stack (redundant?)
  0x2d80:   f8df d00c   ldr.w sp, [pc, #12]     ; sp = (0x2d90)
    2d84:   f000 f82a   bl 0x2ddc               ; call sram_init
    ; Jump to main
  0x2d88:   4800        ldr r0, [pc, #0]        ; r0 = (0x2d8c)
    2d8a:   4700        bx r0                   ; jump r0 = 0x7b95 (main)

  0x2d8c:   0x7b95      ; (main)
  0x2d90:   0x20003760  ; stack_max

rand:
    ; This is a pseudo random number generator (PRNG)
    ; Each result is the next seed
    ; Look at http://stackoverflow.com/a/4768189/4526277
    ; Only difference is RAND_MAX, here it is 0x7fffffff
  0x2d94:   4906        ldr r1, [pc, #24]       ; r1 = (0x2db0)
    2d96:   4a07        ldr r2, [pc, #28]       ; r2 = (0x2db4) = 0x41c64e6d
    2d98:   6808        ldr r0, [r1, #0]        ; r0 = [r1]

                                                ; r0 = (r0 * 0x41c64e6d) & 0xffffffff + 0x3039
    2d9a:   4350        muls r0, r2             ; r0 = r0 * r2
    2d9c:   f243 0239   movw r2, #12345         ; r2 = 0x3039 LCG increment
    2da0:   4410        add r0, r2              ; r0 = r0 + r2

    2da2:   6008        str r0, [r1, #0]        ; [r1] = r0

    2da4:   0840        lsrs r0, r0, #1         ; r0 = r0 >> 1
    2da6:   4770        bx lr

srand:
    ; r0 = seed
    ; Sets the PRNG seed
  0x2da8:   4901        ldr r1, [pc, #4]        ; r1 = (0x2db0)
    2daa:   6008        str r0, [r1, #0]        ; [r1] = r0
    2dac:   4770        bx lr
    2dae:   0000

  0x2db0:   0x20000230  ; (prng_seed)
  0x2db4:   0x41c64e6d  ; 1103515145 LCG multiplier

memcpy:
    ; r0 = dest
    ; r1 = src
    ; r2 = length (in bytes)
  0x2db8:   ea40 0301   orr.w r3, r0, r1
    2dbc:   079b        lsls r3, r3, #30
    2dbe:   d003        beq.n 0x2dc8                ; if((r2 | r1) & 0x3 == 0) branch to 0x2dc8 | if((r2 | r1) & 0x3 == 0){
                                                    ; Copy by word if word aligned, otherwise copy by byte
    2dc0:   e009        b.n 0x2dd6                  ; branch 0x2dd6                             |     while(!((r2 -= 4) < 4))
  0x2dc2:   c908        ldmia r1!, {r3}             ; r3 = *(int *)r1++                         |         *(int *)r1++ = *(int *)r0++;
    2dc4:   1f12        subs r2, r2, #4             ; r2 -= 4                                   | }
    2dc6:   c008        stmia r0!, {r3}             ; *(int *)r0++ = r3                         |
  0x2dc8:   2a04        cmp r2, #4                  ; if(r2 < 4) branch 0x2dc2                  |
    2dca:   d2fa        bcs.n 0x2dc2
    2dcc:   e003        b.n 0x2dd6                  ; branch 0x2dd6                             |
    2dce:   f811 3b01   ldrb.w r3, [r1], #1         ; r3 = *(char *)r1++                        | while(r2-- >= 0)
    2dd2:   f800 3b01   strb.w r3, [r0], #1         ; *(char *)r0++ = r3                        |     *(char *)r1++ = *(char *)r0++;
  0x2dd6:   1e52        subs r2, r2, #1             ; r2 -= 1                                   |
    2dd8:   d2f9        bcs.n 0x2dce                ; if(r2 >= 0) branch 0x2dce                 | return;
    2dda:   4770        bx lr                       ; return

sram_init:
    ; This calls two functions to init parts of SRAM
    ; Static data at 0x20000000 is decoded from flash
    ; Everything after 0x20000234 until the top of the stack is zeroed
  0x2ddc:   4c06        ldr r4, [pc, #24]       ; r4 = (0x2df8) 0x8ff0
    2dde:   4d07        ldr r5, [pc, #28]       ; r5 = (0x2dfc) 0x9010
    2de0:   e006        b.n 0x2df0

    ; load function pointers and arguments from data
    ; calls sram_decode_static(0x9010, 0x20000000, 0x234)
    ; calls sram_stack_zero(0x90d4, 0x20000234, 0x352c)
  0x2de2:   68e0        ldr r0, [r4, #12]           ; r0 = [r4 + 0xc] = 0x2e00, 0x74c0
                                                    ; set lsb (required by blx)
    2de4:   f040 0301   orr.w r3, r0, #1            ; r3 = r0 | 1
    2de8:   e894 0007   ldmia.w r4, {r0, r1, r2}    ; r0,r1,r2 loaded from r4
                                                    ; r0 = 0x9010, 0x90d4
                                                    ; r1 = 0x20000000, 0x20000234
                                                    ; r2 = 0x234, 0x352c
    2dec:   4798        blx r3                      ; call r3 (sram_decode_static, sram_stack_zero)
    2dee:   3410        adds r4, #16                ; r4 = r4 + 0x10

  0x2df0:   42ac        cmp r4, r5
    2df2:   d3f6        bcc.n 0x2de2            ; branch if r4 < r5
    2df4:   f7ff ffc8   bl 0x2d88

  0x2df8:   0x8ff0  ; task_1
  0x2dfc:   0x9010

sram_decode_static:
    ; r0 = 0x9010 (sram_init_data)
    ; r1 = 0x20000000
    ; r2 = 0x234
    ; Haven't gone in depth, but pretty sure this
    ; decodes some data from flash, and loads
    ; as static variables in SRAM
    ; So, initializes SRAM from 0x20000000 to 0x20000234
  0x2e00:   b570        push {r4, r5, r6, lr}
    2e02:   eb01 0402   add.w r4, r1, r2        ; r4 = r1 + r2
  0x2e06:   f810 5b01   ldrb.w r5, [r0], #1     ; r5 = [r0++]
    2e0a:   f015 0307   ands.w r3, r5, #7       ; r3 = r5 & 7
    2e0e:   d101        bne.n 0x2e14
    2e10:   f810 3b01   ldrb.w r3, [r0], #1     ; r3 = [r0++]
  0x2e14:   112a        asrs r2, r5, #4         ; r2 = r5 >> 4
    2e16:   d106        bne.n 0x2e26
    2e18:   f810 2b01   ldrb.w r2, [r0], #1     ; r2 = [r0++]
    2e1c:   e003        b.n 0x2e26
  0x2e1e:   f810 6b01   ldrb.w r6, [r0], #1     ; r6 = [r0++]
    2e22:   f801 6b01   strb.w r6, [r1], #1     ; [r1++] = r6
  0x2e26:   1e5b        subs r3, r3, #1         ; r3 = r3 - 1
    2e28:   d1f9        bne.n 0x2e1e
    2e2a:   072b        lsls r3, r5, #28        ; r3 = r5 << r8
    2e2c:   d405        bmi.n 0x2e3a
    2e2e:   2300        movs r3, #0             ; r3 = 0
  0x2e30:   1e52        subs r2, r2, #1         ; r2 = r2 - 1
    2e32:   d40f        bmi.n 0x2e54
    2e34:   f801 3b01   strb.w r3, [r1], #1     ; [r1++] = r3
    2e38:   e7fa        b.n 0x2e30
  0x2e3a:   f810 3b01   ldrb.w r3, [r0], #1     ; r3 = [r0++]
    2e3e:   f102 0202   add.w r2, r2, #2        ; r2 = r2 + 2
    2e42:   eba1 0303   sub.w r3, r1, r3        ; r3 = r1 + r3
    2e46:   e003        b.n 0x2e50
  0x2e48:   f813 5b01   ldrb.w r5, [r3], #1     ; r5 = [r3++]
    2e4c:   f801 5b01   strb.w r5, [r1], #1     ; [r1++] = r5
  0x2e50:   1e52        subs r2, r2, #1         ; r2 = r2 - 1
    2e52:   d5f9        bpl.n 0x2e48
    2e54:   42a1        cmp r1, r4
    2e56:   d3d6        bcc.n 0x2e06            ; branch if r1 <= r4
    2e58:   2000        movs r0, #0             ; r0 = 0
    2e5a:   bd70        pop {r4, r5, r6, pc}

function_e_32:
    ; r0 =
    ; r1 =
  0x2e5c:   b5f0        push {r4, r5, r6, r7, lr}
    2e5e:   4b39        ldr r3, [pc, #228]      ; r3 = (0x2f44) pointer_35
    2e60:   4e39        ldr r6, [pc, #228]      ; r6 = (0x2f48) pointer_15
    2e62:   2501        movs r5, #1             ; r5 = 1
    2e64:   785a        ldrb r2, [r3, #1]       ; r2 = [r3 + 1]
    2e66:   f001 0101   and.w r1, r1, #1        ; r1 = r1 & 1
    2e6a:   28e9        cmp r0, #233
    2e6c:   d004        beq.n 0x2e78            ; branch if r0 == 0xe9
    2e6e:   28ea        cmp r0, #234
    2e70:   d005        beq.n 0x2e7e            ; branch if r0 == 0xea
    2e72:   28eb        cmp r0, #235
    2e74:   d107        bne.n 0x2e86            ; branch if r0 == 0xeb
    2e76:   e01e        b.n 0x2eb6

  0x2e78:   f361 0200   bfi r2, r1, #0, #1
    2e7c:   e001        b.n 0x2e82

  0x2e7e:   f361 0241   bfi r2, r1, #1, #1
  0x2e82:   705a        strb r2, [r3, #1]       ; [r3 + 1] = r2
    2e84:   61f5        str r5, [r6, #28]       ; [r6 + 0x28] = r5 = 1
  0x2e86:   38ec        subs r0, #236           ; r0 = r0 - 0xec
    2e88:   2811        cmp r0, #17
    2e8a:   d859        bhi.n 0x2f40            ; return if r0 > 17
    2e8c:   4a2f        ldr r2, [pc, #188]      ; r2 = (0x2f4c) pointer_36
    2e8e:   f8df c0b8   ldr.w ip, [pc, #184]    ; ip = (0x2f48) pointer_15
    2e92:   2812        cmp r0, #18
    2e94:   7853        ldrb r3, [r2, #1]       ; r3 = [r2 + 1]
    2e96:   7894        ldrb r4, [r2, #2]       ; r4 = [r2 + 2]
    2e98:   78d7        ldrb r7, [r2, #3]       ; r7 = [r2 + 3]
    2e9a:   f1ac 0c80   sub.w ip, ip, #128      ; ip = ip - 0x80
    2e9e:   d24e        bcs.n 0x2f3e            ; branch if r0 >= 18

    ; table branch
    2ea0:   e8df f000   tbb [pc, r0]
                        ; jump addr = 0x2ea4 + (branch byte * 2)
    2ea4:   0c          ; case 0:   0x2ebc
            0f          ; case 1:   0x2ec2
    2ea6:   13          ; case 2:   0x2eca
            16          ; case 3:   0x2ed0
    2ea8:   19          ; case 4:   0x2ed6
            1c          ; case 5:   0x2edc
    2eaa:   1f          ; case 6:   0x2ee2
            22          ; case 7:   0x2ee8
    2eac:   25          ; case 8:   0x2eee
            2b          ; case 9:   0x2efa
    2eae:   30          ; case 10:  0x2f04
            37          ; case 11:  0x2f12
    2eb0:   3a          ; case 12:  0x2f18
            3e          ; case 13:  0x2f20
    2eb2:   41          ; case 14:  0x2f26
            44          ; case 15:  0x2f2c
    2eb4:   47          ; case 16:  0x2f32
            4a          ; case 17:  0x2f38

  0x2eb6:   f361 0282   bfi r2, r1, #2, #1
    2eba:   e7e2        b.n 0x2e82

  0x2ebc:   f361 0300   bfi r3, r1, #0, #1
    2ec0:   e001        b.n 0x2ec6

  0x2ec2:   f361 0341   bfi r3, r1, #1, #1
  0x2ec6:   7053        strb r3, [r2, #1]       ; [r2 + 1] = r3
    2ec8:   e039        b.n 0x2f3e

  0x2eca:   f361 0382   bfi r3, r1, #2, #1
    2ece:   e7fa        b.n 0x2ec6

  0x2ed0:   f361 03c3   bfi r3, r1, #3, #1
    2ed4:   e7f7        b.n 0x2ec6

  0x2ed6:   f361 1304   bfi r3, r1, #4, #1
    2eda:   e7f4        b.n 0x2ec6

  0x2edc:   f361 1345   bfi r3, r1, #5, #1
    2ee0:   e7f1        b.n 0x2ec6

  0x2ee2:   f361 1386   bfi r3, r1, #6, #1
    2ee6:   e7ee        b.n 0x2ec6

  0x2ee8:   f361 13c7   bfi r3, r1, #7, #1
    2eec:   e7eb        b.n 0x2ec6

  0x2eee:   f361 0400   bfi r4, r1, #0, #1
    2ef2:   7094        strb r4, [r2, #2]       ; [r2 + 2] = r4
    2ef4:   f88c 5017   strb.w r5, [ip, #23]    ; [ip + 0x17] = r5
    2ef8:   e021        b.n 0x2f3e

  0x2efa:   f361 0441   bfi r4, r1, #1, #1
    2efe:   7094        strb r4, [r2, #2]       ; [r2 + 2] = r4
    2f00:   2002        movs r0, #2             ; r0 = 2
    2f02:   e003        b.n 0x2f0c

  0x2f04:   f361 0482   bfi r4, r1, #2, #1
    2f08:   7094        strb r4, [r2, #2]       ; [r2 + 2] = r4
    2f0a:   2004        movs r0, #4             ; r0 = 4
  0x2f0c:   f88c 0017   strb.w r0, [ip, #23]    ; [ip + 0x17] = r0
    2f10:   e015        b.n 0x2f3e

  0x2f12:   f361 04c3   bfi r4, r1, #3, #1
    2f16:   e001        b.n 0x2f1c

  0x2f18:   f361 1404   bfi r4, r1, #4, #1
  0x2f1c:   7094        strb r4, [r2, #2]       ; [r2 + 2] = r4
    2f1e:   e00e        b.n 0x2f3e

  0x2f20:   f361 1445   bfi r4, r1, #5, #1
    2f24:   e7fa        b.n 0x2f1c

  0x2f26:   f361 1486   bfi r4, r1, #6, #1
    2f2a:   e7f7        b.n 0x2f1c

  0x2f2c:   f361 14c7   bfi r4, r1, #7, #1
    2f30:   e7f4        b.n 0x2f1c

  0x2f32:   f361 0700   bfi r7, r1, #0, #1
    2f36:   e001        b.n 0x2f3c

  0x2f38:   f361 0741   bfi r7, r1, #1, #1
  0x2f3c:   70d7        strb r7, [r2, #3]       ; [r2 + 3] = r7
  0x2f3e:   61b5        str r5, [r6, #24]       ; [r6 + 0x18] = r5
  0x2f40:   bdf0        pop {r4, r5, r6, r7, pc}
    2f42:   0000

  0x2f44:   0x20000018  ; pointer_35
  0x2f48:   0x200000d8  ; pointer_15
  0x2f4c:   0x2000002c  ; pointer_36

afio_exti_ssr_write:
    ; this writes to the EXTI source selection register 0 or 1 (ESSR0, ESSR1) in the AFIO control registers
    ; r0 = some notion of which bit to set. this also controls which register to set it in.
    ; r1 = ? value to be put into the 4 bit EXTnPIN field (n is controlled by r0)
  0x2f50:   b510        push {r4, lr}
    2f52:   2200        movs r2, #0
    2f54:   281c        cmp r0, #28
    2f56:   d902        bls.n 0x2f5e
    2f58:   2201        movs r2, #1
    2f5a:   3820        subs r0, #32
    2f5c:   b2c0        uxtb r0, r0
    2f5e:   4b05        ldr r3, [pc, #20]   ; (0x2f74)
    2f60:   eb03 0282   add.w r2, r3, r2, lsl #2        ; r2 = 0x40022000 or 0x40022004
    2f64:   6813        ldr r3, [r2, #0]
    2f66:   240f        movs r4, #15
    2f68:   4084        lsls r4, r0
    2f6a:   43a3        bics r3, r4
    2f6c:   4081        lsls r1, r0
    2f6e:   4319        orrs r1, r3
    2f70:   6011        str r1, [r2, #0]
    2f72:   bd10        pop {r4, pc}

  0x2f74:   0x40022000

handle_update_packet:
  0x2f78:   b570        push {r4, r5, r6, lr}
    2f7a:   481d        ldr r0, [pc, #116]   ; (0x2ff0)
    2f7c:   6801        ldr r1, [r0, #0]
    2f7e:   2901        cmp r1, #1
    2f80:   d134        bne.n 0x2fec            ; return
    2f82:   2600        movs r6, #0
    2f84:   6006        str r6, [r0, #0]
    2f86:   4c1b        ldr r4, [pc, #108]   ; (0x2ff4)
    2f88:   4d1b        ldr r5, [pc, #108]   ; (0x2ff8)
    2f8a:   6026        str r6, [r4, #0]

  0x2f8c:   6820        ldr r0, [r4, #0]
    2f8e:   1829        adds r1, r5, r0
    2f90:   1c40        adds r0, r0, #1
    2f92:   6020        str r0, [r4, #0]
    2f94:   4819        ldr r0, [pc, #100]   ; (0x2ffc)
    2f96:   f000 fa0f   bl 0x33b8               ; call function_e_2
    2f9a:   6820        ldr r0, [r4, #0]
    2f9c:   2840        cmp r0, #64   ; 0x40
    2f9e:   d3f5        bcc.n 0x2f8c

    2fa0:   886c        ldrh r4, [r5, #2]
    2fa2:   70ee        strb r6, [r5, #3]
    2fa4:   70ae        strb r6, [r5, #2]
    2fa6:   2240        movs r2, #64   ; 0x40
    2fa8:   4913        ldr r1, [pc, #76]   ; (0x2ff8)
    2faa:   2000        movs r0, #0
    2fac:   f000 fa68   bl 0x3480               ; call crc16
    2fb0:   7829        ldrb r1, [r5, #0]
    2fb2:   2907        cmp r1, #7
    2fb4:   d801        bhi.n 0x2fba
    2fb6:   4284        cmp r4, r0
    2fb8:   d004        beq.n 0x2fc4
    2fba:   2446        movs r4, #70   ; 0x46
    2fbc:   480f        ldr r0, [pc, #60]   ; (0x2ffc)
    2fbe:   f000 f9f1   bl 0x33a4               ; call clear_two_words
    2fc2:   e00c        b.n 0x2fde
  0x2fc4:   f06f 0001   mvn.w r0, #1
    2fc8:   f003 fb1c   bl 0x6604               ; call function_e_4

    ; call an update handler function from the update cmd
    ; 0: flash_erase_cmd
    ; 1: flash_read_write_cmd
    ; 2: flash_crc_cmd
    ; 3: update_start_cmd
    ; 4: reset_cmd
    ; 5: disconnect_cmd
    ; 6: debug_cmd
    2fcc:   782b        ldrb r3, [r5, #0]           ; r3 = [r5]
    2fce:   4c0c        ldr r4, [pc, #48]           ; r4 = (0x3000)
    2fd0:   e9d5 1201   ldrd r1, r2, [r5, #4]       ; r1 = [r5 + 4]
                                                    ; r2 = [r5 + 8]
    2fd4:   f854 3023   ldr.w r3, [r4, r3, lsl #2]  ; r3 = [r4 + r3 << 2]
    2fd8:   7868        ldrb r0, [r5, #1]           ; r0 = [r5 + 1]
    2fda:   4798        blx r3                      ; call r3
    2fdc:   4604        mov r4, r0
  0x2fde:   4621        mov r1, r4
    2fe0:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    2fe4:   4805        ldr r0, [pc, #20]   ; (0x2ffc)
    2fe6:   3810        subs r0, #16
    2fe8:   f000 b9fa   b.w 0x33e0
    2fec:   bd70        pop {r4, r5, r6, pc}
    2fee:   0000

  0x2ff0:   0x20000028
  0x2ff4:   0x20000054
  0x2ff8:   0x200007cc
  0x2ffc:   0x20000368
  0x3000:   0x8b54      ; update_handlers

function_e_33:
  0x3004:   4815        ldr r0, [pc, #84]   ; (0x305c)
    3006:   b510        push {r4, lr}
    3008:   6801        ldr r1, [r0, #0]
    300a:   b289        uxth r1, r1
    300c:   f041 5288   orr.w r2, r1, #285212672   ; 0x11000000
    3010:   4913        ldr r1, [pc, #76]   ; (0x3060)
    3012:   600a        str r2, [r1, #0]
    3014:   6882        ldr r2, [r0, #8]
    3016:   f44f 5330   mov.w r3, #11264   ; 0x2c00
    301a:   ea43 4202   orr.w r2, r3, r2, lsl #16
    301e:   604a        str r2, [r1, #4]
    3020:   6842        ldr r2, [r0, #4]
    3022:   6840        ldr r0, [r0, #4]
    3024:   f1a2 020a   sub.w r2, r2, #10
    3028:   f1a0 000a   sub.w r0, r0, #10
    302c:   ea42 4000   orr.w r0, r2, r0, lsl #16
    3030:   6088        str r0, [r1, #8]
    3032:   f44f 5020   mov.w r0, #10240   ; 0x2800
    3036:   60c8        str r0, [r1, #12]
    3038:   f1a1 0144   sub.w r1, r1, #68   ; 0x44
    303c:   f04f 0244   mov.w r2, #68   ; 0x44
    3040:   f5a1 6084   sub.w r0, r1, #1056   ; 0x420
    3044:   f000 f9b2   bl 0x33ac               ; call clear_two_words_and_write_two_bytes
    3048:   4906        ldr r1, [pc, #24]   ; (0x3064)
    304a:   e8bd 4010   ldmia.w sp!, {r4, lr}
    304e:   f44f 6280   mov.w r2, #1024   ; 0x400
    3052:   f1a1 0010   sub.w r0, r1, #16
    3056:   f000 b9a9   b.w 0x33ac              ; call clear_two_words_and_write_two_bytes
    305a:   0000

  0x305c:   0x40080180
  0x3060:   0x07bc2000
  0x3064:   0x03782000

reset_cmd:
    ; This will disconnect usb, and reset the processor.
    ; On reset, the builtin firmware will not jump back to main firmware until
    ; the reset_cmd in the builtin firmware is called.
    ; r0 unused
    ; r1 unused
    ; r2 unused
  0x3068:   2101        movs r1, #1
    306a:   0408        lsls r0, r1, #16
    306c:   f000 f9da   bl 0x3424               ; call ckcu_ahb_clock_enable(0x10000, 1)

    ; Set GPIO A pin 9
    3070:   490f        ldr r1, [pc, #60]       ; (0x30b0)
    3072:   f44f 7000   mov.w r0, #512          ; 0x200
    3076:   6248        str r0, [r1, #36]       ; 0x24

    ; Disable interrupt 53 (USB)
    ; Write 0x200000 to NVIC_ICER1 (0xe000e184)
    ; Disconnect USB
    3078:   490e        ldr r1, [pc, #56]       ; (0x30b4)
    307a:   0300        lsls r0, r0, #12
    307c:   f04f 24e0   mov.w r4, #3758153728   ; 0xe000e000
    3080:   6008        str r0, [r1, #0]
    3082:   f000 f98c   bl 0x339e               ; call usb_disable_dppu()

    ; Set FMC.SVBT1 (PC) to specific value
    3086:   490d        ldr r1, [pc, #52]       ; (0x30bc)
    3088:   480b        ldr r0, [pc, #44]       ; (0x30b8)
    308a:   f8c1 0304   str.w r0, [r1, #772]    ; 0x304

    ; spin loop on counter
    308e:   480c        ldr r0, [pc, #48]       ; (0x30c0)
    3090:   1e40        subs r0, r0, #1
    3092:   d1fd        bne.n 0x3090

    3094:   f3bf 8f4f   dsb sy

    ; Request system reset
    ; Write 0x5fa0004 to AIRCR
    ; Set SYSRESETREQ
    3098:   f8d4 0d0c   ldr.w r0, [r4, #3340]   ; 0xd0c
    309c:   4909        ldr r1, [pc, #36]       ; (0x30c4)
    309e:   f400 60e0   and.w r0, r0, #1792     ; 0x700
    30a2:   ea40 0001   orr.w r0, r0, r1
    30a6:   f8c4 0d0c   str.w r0, [r4, #3340]   ; 0xd0c

    30aa:   f3bf 8f4f   dsb sy

  0x30ae:   e7fe        b.n 0x30ae              ; dead loop

  0x30b0:   0x400b0000  ; GPIO A
  0x30b4:   0xe000e184
  0x30b8:   0x55aafaf5
  0x30bc:   0x40080000  ; FMC
  0x30c0:   0x61a80
  0x30c4:   0x05fa0004  ; AIRCR key and reset

function_e_99:
  0x30c8:   b570        push {r4, r5, r6, lr}
    30ca:   f7ff fe63   bl 0x2d94               ; call rand()

    30ce:   4848        ldr r0, [pc, #288]      ; r0 = (0x31f0)
    30d0:   f000 f8c8   bl 0x3264               ; call bftm_clear(BFTM 0)

    30d4:   4847        ldr r0, [pc, #284]      ; r0 = (0x31f4) pointer_6
    30d6:   2201        movs r2, #1             ; r2 = 1
    30d8:   4b47        ldr r3, [pc, #284]      ; r3 = (0x31f8) pointer_7
    30da:   8800        ldrh r0, [r0, #0]       ; r0 = [r0]
    30dc:   2801        cmp r0, #1
    30de:   d90a        bls.n 0x30f6            ; branch if r0 <= 1

    ; a = (a - (b * (a / b))) & 0xffff
    ; (*pointer_8) = (*pointer_8) - ( (*pointer_6) * ( (*pointer_8) / (*pointer_6) ) ) & 0xffff
    30e0:   4c46        ldr r4, [pc, #280]      ; r4 = (0x31fc) pointer_8
    30e2:   8821        ldrh r1, [r4, #0]       ; r1 = [r4]
    30e4:   1c49        adds r1, r1, #1         ; r1++
    30e6:   fbb1 f5f0   udiv r5, r1, r0         ; r5 = r1 / r0
    30ea:   fb00 1015   mls r0, r0, r5, r1      ; r0 = r1 - (r0 * r5)
    30ee:   0400        lsls r0, r0, #16        ; r0 = r0 << 16
    30f0:   0c00        lsrs r0, r0, #16        ; r0 = r0 >> 16
    30f2:   8020        strh r0, [r4, #0]       ; [r4] = r0
    30f4:   d100        bne.n 0x30f8
  0x30f6:   701a        strb r2, [r3, #0]       ; [r3] = r2

    ; (*pointer_9)++
  0x30f8:   4841        ldr r0, [pc, #260]      ; r0 = (0x3200) pointer_9
    30fa:   7801        ldrb r1, [r0, #0]       ; r1 = [r0]
    30fc:   1c49        adds r1, r1, #1         ; r1++
    30fe:   7001        strb r1, [r0, #0]       ; [r0] = r1

    ; (*pointer_10)++
    3100:   4940        ldr r1, [pc, #256]      ; r1 = (0x3204) pointer_10
    3102:   7808        ldrb r0, [r1, #0]       ; r0 = [r1]
    3104:   1c40        adds r0, r0, #1         ; r0++
    3106:   7008        strb r0, [r1, #0]       ; [r1] = r0

    ; (*pointer_11)++
    3108:   483f        ldr r0, [pc, #252]      ; r0 = (0x3208) pointer_11
    310a:   7801        ldrb r1, [r0, #0]       ; r1 = [r0]
    310c:   1c49        adds r1, r1, #1         ; r1++
    310e:   7001        strb r1, [r0, #0]       ; [r0] = r1

    3110:   483e        ldr r0, [pc, #248]      ; r0 = (0x320c) pointer_12
    3112:   6801        ldr r1, [r0, #0]        ; r1 = [r0]
    3114:   b111        cbz r1, 0x311c          ; branch if r1 == 0
    3116:   6801        ldr r1, [r0, #0]        ; r1 = [r0]
    3118:   1e49        subs r1, r1, #1         ; r1--
    311a:   6001        str r1, [r0, #0]        ; [r0] = r1
  0x311c:   6841        ldr r1, [r0, #4]        ; r1 = [r0]
    311e:   b111        cbz r1, 0x3126          ; branch if r1 == 0
    3120:   6841        ldr r1, [r0, #4]        ; r1 = [r0 + 4]
    3122:   1e49        subs r1, r1, #1         ; r1++
    3124:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1

  0x3126:   483a        ldr r0, [pc, #232]      ; r0 = (0x3210) pointer_13
    3128:   6801        ldr r1, [r0, #0]
    312a:   2901        cmp r1, #1
    312c:   d902        bls.n 0x3134
    312e:   6801        ldr r1, [r0, #0]
    3130:   1e49        subs r1, r1, #1
    3132:   6001        str r1, [r0, #0]

  0x3134:   4837        ldr r0, [pc, #220]      ; r0 = (0x3214) pointer_14
    3136:   6801        ldr r1, [r0, #0]
    3138:   2901        cmp r1, #1
    313a:   d902        bls.n 0x3142
    313c:   6801        ldr r1, [r0, #0]
    313e:   1e49        subs r1, r1, #1
    3140:   6001        str r1, [r0, #0]

  0x3142:   4835        ldr r0, [pc, #212]      ; r0 = (0x3218) pointer_15
    3144:   6801        ldr r1, [r0, #0]
    3146:   b111        cbz r1, 0x314e
    3148:   6801        ldr r1, [r0, #0]
    314a:   1c49        adds r1, r1, #1
    314c:   6001        str r1, [r0, #0]

  0x314e:   4833        ldr r0, [pc, #204]      ; r0 = (0x321c) pointer_16
    3150:   6801        ldr r1, [r0, #0]
    3152:   b111        cbz r1, 0x315a
    3154:   6801        ldr r1, [r0, #0]
    3156:   1c49        adds r1, r1, #1
    3158:   6001        str r1, [r0, #0]

  0x315a:   4831        ldr r0, [pc, #196]      ; r0 = (0x3220) pointer_17
    315c:   6801        ldr r1, [r0, #0]
    315e:   b111        cbz r1, 0x3166
    3160:   6801        ldr r1, [r0, #0]
    3162:   1c49        adds r1, r1, #1
    3164:   6001        str r1, [r0, #0]

  0x3166:   482f        ldr r0, [pc, #188]      ; r0 = (0x3224) pointer_18
    3168:   6801        ldr r1, [r0, #0]
    316a:   b111        cbz r1, 0x3172
    316c:   6801        ldr r1, [r0, #0]
    316e:   1c49        adds r1, r1, #1
    3170:   6001        str r1, [r0, #0]

  0x3172:   482d        ldr r0, [pc, #180]      ; r0 = (0x3228) pointer_18
    3174:   6801        ldr r1, [r0, #0]
    3176:   b111        cbz r1, 0x317e
    3178:   6801        ldr r1, [r0, #0]
    317a:   1c49        adds r1, r1, #1
    317c:   6001        str r1, [r0, #0]

  0x317e:   482b        ldr r0, [pc, #172]      ; r0 = (0x322c) pointer_20
    3180:   6801        ldr r1, [r0, #0]
    3182:   b111        cbz r1, 0x318a
    3184:   6801        ldr r1, [r0, #0]
    3186:   1c49        adds r1, r1, #1
    3188:   6001        str r1, [r0, #0]

  0x318a:   4829        ldr r0, [pc, #164]      ; r0 = (0x3230) pointer_21
    318c:   6801        ldr r1, [r0, #0]
    318e:   b111        cbz r1, 0x3196
    3190:   6801        ldr r1, [r0, #0]
    3192:   1c49        adds r1, r1, #1
    3194:   6001        str r1, [r0, #0]

  0x3196:   4827        ldr r0, [pc, #156]      ; r0 = (0x3234) pointer_22
    3198:   6801        ldr r1, [r0, #0]
    319a:   b111        cbz r1, 0x31a2
    319c:   6801        ldr r1, [r0, #0]
    319e:   1c49        adds r1, r1, #1
    31a0:   6001        str r1, [r0, #0]

  0x31a2:   4825        ldr r0, [pc, #148]      ; r0 = (0x3238) pointer_23
    31a4:   6801        ldr r1, [r0, #0]
    31a6:   b111        cbz r1, 0x31ae
    31a8:   6801        ldr r1, [r0, #0]
    31aa:   1c49        adds r1, r1, #1
    31ac:   6001        str r1, [r0, #0]

  0x31ae:   4823        ldr r0, [pc, #140]      ; r0 = (0x323c) pointer_24
    31b0:   6801        ldr r1, [r0, #0]
    31b2:   b111        cbz r1, 0x31ba
    31b4:   6801        ldr r1, [r0, #0]
    31b6:   1c49        adds r1, r1, #1
    31b8:   6001        str r1, [r0, #0]

  0x31ba:   4821        ldr r0, [pc, #132]      ; r0 = (0x3240) pointer_25
    31bc:   8801        ldrh r1, [r0, #0]
    31be:   b111        cbz r1, 0x31c6
    31c0:   8801        ldrh r1, [r0, #0]
    31c2:   1e49        subs r1, r1, #1
    31c4:   8001        strh r1, [r0, #0]

  0x31c6:   481f        ldr r0, [pc, #124]      ; r0 = (0x3244) pointer_26
    31c8:   6801        ldr r1, [r0, #0]
    31ca:   b111        cbz r1, 0x31d2
    31cc:   6801        ldr r1, [r0, #0]
    31ce:   1c49        adds r1, r1, #1
    31d0:   6001        str r1, [r0, #0]

  0x31d2:   481d        ldr r0, [pc, #116]      ; r0 = (0x3248) pointer_27
    31d4:   6801        ldr r1, [r0, #0]
    31d6:   b111        cbz r1, 0x31de
    31d8:   6801        ldr r1, [r0, #0]
    31da:   1c49        adds r1, r1, #1
    31dc:   6001        str r1, [r0, #0]

  0x31de:   481b        ldr r0, [pc, #108]      ; r0 = (0x324c) pointer_28
    31e0:   6801        ldr r1, [r0, #0]
    31e2:   2900        cmp r1, #0
    31e4:   d002        beq.n 0x31ec
    31e6:   6801        ldr r1, [r0, #0]
    31e8:   1c49        adds r1, r1, #1
    31ea:   6001        str r1, [r0, #0]

  0x31ec:   bd70        pop {r4, r5, r6, pc}
    31ee:   0000

  0x31f0:   0x40076000  ; BFTM 0
  0x31f4:   0x20000100  ; pointer_6
  0x31f8:   0x20000090  ; pointer_7
  0x31fc:   0x20000104  ; pointer_8
  0x3200:   0x2000006b  ; pointer_9
  0x3204:   0x2000006c  ; pointer_10
  0x3208:   0x2000006d  ; pointer_11
  0x320c:   0x20000308  ; pointer_12
  0x3210:   0x200000c0  ; pointer_13
  0x3214:   0x200000c4  ; pointer_14
  0x3218:   0x200000d8  ; pointer_15
  0x321c:   0x200000d4  ; pointer_16
  0x3220:   0x200000e4  ; pointer_17
  0x3224:   0x20000108  ; pointer_18
  0x3228:   0x2000010c  ; pointer_19
  0x322c:   0x200000dc  ; pointer_20
  0x3230:   0x200000c8  ; pointer_21
  0x3234:   0x200000cc  ; pointer_22
  0x3238:   0x200000d0  ; pointer_23
  0x323c:   0x200000b4  ; pointer_24
  0x3240:   0x2000009a  ; pointer_25
  0x3244:   0x200000fc  ; pointer_26
  0x3248:   0x200001d0  ; pointer_27
  0x324c:   0x200000e0  ; pointer_28

function_e_100:
  0x3250:   b510        push {r4, lr}
    3252:   4803        ldr r0, [pc, #12]       ; r0 = (0x3260)
    3254:   f000 f806   bl 0x3264               ; call bftm_clear(BFTM1)
    3258:   e8bd 4010   ldmia.w sp!, {r4, lr}
    325c:   f002 be94   b.w 0x5f88              ; return function_e_47()

  0x3260:   0x40077000  ; BFTM1

bftm_clear:
    ; r0 = pointer
    ; Clear the function timer compare match flag
    ; This will stop repetitive timers, or cancel one-shot timers
  0x3264:   6841        ldr r1, [r0, #4]        ; r1 = [r0 + 4]
    3266:   f021 0101   bic.w r1, r1, #1        ; r1 = r1 & ~1
    326a:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1
    326c:   f3bf 8f4f   dsb sy                  ; data syncronization barrier (debugging)
    3270:   4770        bx lr

function_45:
  0x3272:   2900        cmp r1, #0
    3274:   6801        ldr r1, [r0, #0]
    3276:   d002        beq.n 0x327e
    3278:   f041 0104   orr.w r1, r1, #4
    327c:   e001        b.n 0x3282
    327e:   f021 0104   bic.w r1, r1, #4
    3282:   6001        str r1, [r0, #0]
    3284:   4770        bx lr

function_46:
  0x3286:   2900        cmp r1, #0
    3288:   6801        ldr r1, [r0, #0]
    328a:   d002        beq.n 0x3292
    328c:   f041 0101   orr.w r1, r1, #1
    3290:   e001        b.n 0x3296
  0x3292:   f021 0101   bic.w r1, r1, #1
  0x3296:   6001        str r1, [r0, #0]
    3298:   4770        bx lr

function_47:
  0x329a:   60c1        str r1, [r0, #12]
    329c:   4770        bx lr

function_48:
  0x329e:   6081        str r1, [r0, #8]
    32a0:   4770        bx lr
    32a2:   0000

afio_pin_config:
    ; r0 = GPIO # 0/1/2/3/4 A/B/C/D/E
    ; r1 = Pin #
    ; r2 = Alternate function #
  0x32a4:   00c0        lsls r0, r0, #3             ; r0 = r0 << 3          0
    32a6:   08cb        lsrs r3, r1, #3             ; r3 = r1 >> 3          1
    32a8:   eb00 0083   add.w r0, r0, r3, lsl #2    ; r0 = r0 + r3 << 2     4
    32ac:   4b06        ldr r3, [pc, #24]           ; r3 = (0x32c8)
    32ae:   b510        push {r4, lr}
    32b0:   4418        add r0, r3                  ; r0 = r0 + r3          0x40022024 GPIO A Reg 1
    32b2:   0749        lsls r1, r1, #29            ; r1 = r1 << 0x1d
    32b4:   6803        ldr r3, [r0, #0]            ; r3 = [r0]
    32b6:   0ec9        lsrs r1, r1, #27            ; r1 = r1 >> 0x1b       0xc
    32b8:   240f        movs r4, #15                ; r4 = 0xf
    32ba:   408c        lsls r4, r1                 ; r4 = r4 << r1         0xf000
    32bc:   43a3        bics r3, r4                 ; r3 = r3 & ~r4
    32be:   408a        lsls r2, r1                 ; r2 = r2 << r1

    32c0:   4313        orrs r3, r2                 ; r3 = r3 | r2
    32c2:   6003        str r3, [r0, #0]            ; [r0] = r3
    32c4:   bd10        pop {r4, pc}
    32c6:   0000

  0x32c8:   0x40022020  ; AFIO.GPACFGLR GPIO Port A Configuration 0

spin_wait_maybe:
    ; Seems to spin and wait for (r0 * 20 * 2) instructions
    ; At 8MHz and 5 cycles / instruction, r0 = 10 should take around 250 us
    ; r0 = "time"
  0x32cc:   eb00 0080   add.w r0, r0, r0, lsl #2    ; r0 = r0 + (r0 << 2)
    32d0:   0080        lsls r0, r0, #2             ; r0 = r0 << 2
  0x32d2:   1e40        subs r0, r0, #1             ; r0 = r0 - 1
    32d4:   d2fd        bcs.n 0x32d2
    32d6:   4770        bx lr

setup_afio_gpio:
  0x32d8:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}

    ; Enable AFIO clock
    32dc:   2101        movs r1, #1             ; r1 = 1
    32de:   038d        lsls r5, r1, #14        ; r5 = 0x4000
    32e0:   4628        mov r0, r5              ; r0 = r5
    32e2:   f000 f8ab   bl 0x343c               ; call ckcu_apb0_clock_enable(0x4000, 1)

    ; Enable GPIO A clock
    32e6:   2101        movs r1, #1
    32e8:   040c        lsls r4, r1, #16
    32ea:   4620        mov r0, r4
    32ec:   f000 f89a   bl 0x3424               ; call ckcu_ahb_clock_enable(0x10000, 1)

    32f0:   4e24        ldr r6, [pc, #144]      ; r6 = (0x3384) GPIO A
    32f2:   2200        movs r2, #0
    32f4:   4629        mov r1, r5
    32f6:   4630        mov r0, r6
    32f8:   f000 f920   bl 0x353c               ; call gpio_set_input_enable(GPIO A, 0x4000, 0)
    32fc:   1067        asrs r7, r4, #1
    32fe:   2200        movs r2, #0
    3300:   4639        mov r1, r7
    3302:   4630        mov r0, r6
    3304:   f000 f91a   bl 0x353c               ; call gpio_set_input_enable(GPIO A, 0x8000, 0)
    3308:   2202        movs r2, #2
    330a:   4629        mov r1, r5
    330c:   4630        mov r0, r6
    330e:   f000 f925   bl 0x355c               ; call gpio_set_pin_pull_up_down(GPIO A, 0x4000, 2)
    3312:   2202        movs r2, #2
    3314:   4639        mov r1, r7
    3316:   4630        mov r0, r6
    3318:   f000 f920   bl 0x355c               ; call gpio_set_pin_pull_up_down(GPIO A, 0x8000, 2)

    331c:   1165        asrs r5, r4, #5
    331e:   2200        movs r2, #0
    3320:   4629        mov r1, r5
    3322:   4630        mov r0, r6
    3324:   f000 f90a   bl 0x353c               ; call gpio_set_input_enable(GPIO A, 0x800, 0)
    3328:   2202        movs r2, #2
    332a:   4629        mov r1, r5
    332c:   4630        mov r0, r6
    332e:   f000 f915   bl 0x355c               ; call gpio_set_pin_pull_up_down(GPIO A, 0x800, 2)

    3332:   2201        movs r2, #1
    3334:   210b        movs r1, #11
    3336:   2000        movs r0, #0
    3338:   f7ff ffb4   bl 0x32a4               ; call afio_pin_config(0, 0xb, 1)
    333c:   2201        movs r2, #1
    333e:   210d        movs r1, #13
    3340:   2002        movs r0, #2
    3342:   f7ff ffaf   bl 0x32a4               ; call afio_pin_config(2, 0xd, 1)
    3346:   2201        movs r2, #1
    3348:   210e        movs r1, #14
    334a:   2002        movs r0, #2
    334c:   f7ff ffaa   bl 0x32a4               ; call afio_pin_config(2, 0xe, 1)
    3350:   2201        movs r2, #1
    3352:   210f        movs r1, #15
    3354:   2002        movs r0, #2
    3356:   f7ff ffa5   bl 0x32a4               ; call afio_pin_config(2, 0xf, 1)

    ; Check if CKCU.HSEEN set (external high-speed oscillator)
    335a:   480b        ldr r0, [pc, #44]       ; r0 = (0x3388) CKCU
    335c:   6840        ldr r0, [r0, #4]        ; r0 = [r0 + 4]
    335e:   0540        lsls r0, r0, #21        ; r0 <<= 21
    3360:   d409        bmi.n 0x3376            ; branch if HSEEN set

    3362:   2201        movs r2, #1
    3364:   210e        movs r1, #14
    3366:   4610        mov r0, r2
    3368:   f7ff ff9c   bl 0x32a4               ; call afio_pin_config(1, 0xe, 1)
    336c:   2201        movs r2, #1
    336e:   210f        movs r1, #15
    3370:   4610        mov r0, r2
    3372:   f7ff ff97   bl 0x32a4               ; call afio_pin_config(1, 0xf, 1)

    ; Disable GPIO A clock
  0x3376:   2100        movs r1, #0
    3378:   4620        mov r0, r4
    337a:   f000 f853   bl 0x3424               ; call ckcu_ahb_clock_enable(0x1000, 0)

    337e:   2001        movs r0, #1             ; return 1
    3380:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

  0x3384:   0x400b0000  ; GPIO A
  0x3388:   0x40088000  ; CKCU

function_e_34:
  0x338c:   b510        push {r4, lr}
    338e:   2001        movs r0, #1
    3390:   f003 fd0e   bl 0x6db0               ; call usb_dp_pull_up
    3394:   e8bd 4010   ldmia.w sp!, {r4, lr}

  0x3398:   20fa        movs r0, #250   ; 0xfa
    339a:   f7ff bf97   b.w 0x32cc              ; spin_wait_maybe(250)

usb_disable_dppu:
  0x339e:   2000        movs r0, #0
    33a0:   f003 bd06   b.w 0x6db0              ; return usb_dp_pull_up(0)

clear_two_words:
    ; r0 = pointer
    ; sets two words to zero...
  0x33a4:   2100        movs r1, #0
    33a6:   6041        str r1, [r0, #4]
    33a8:   6001        str r1, [r0, #0]
    33aa:   4770        bx lr

clear_two_words_and_write_two_bytes:
    ; r0 = pointer
    ; r1 = set r0[2] = r1
    ; r2 = set r0[3] = r2
  0x33ac:   2300        movs r3, #0
    33ae:   6003        str r3, [r0, #0]
    33b0:   6043        str r3, [r0, #4]
    33b2:   e9c0 1202   strd r1, r2, [r0, #8]
    33b6:   4770        bx lr

function_e_2:
    ; r0 =
    ; r1 = data byte
  0x33b8:   b510        push {r4, lr}
    33ba:   6844        ldr r4, [r0, #4]
    33bc:   2200        movs r2, #0
    33be:   6803        ldr r3, [r0, #0]
    33c0:   429c        cmp r4, r3
    33c2:   d00b        beq.n 0x33dc
    33c4:   6882        ldr r2, [r0, #8]
    33c6:   5cd2        ldrb r2, [r2, r3]
    33c8:   700a        strb r2, [r1, #0]
    33ca:   6801        ldr r1, [r0, #0]
    33cc:   68c2        ldr r2, [r0, #12]
    33ce:   1c49        adds r1, r1, #1
    33d0:   fbb1 f3f2   udiv r3, r1, r2
    33d4:   fb02 1113   mls r1, r2, r3, r1
    33d8:   2201        movs r2, #1
    33da:   6001        str r1, [r0, #0]
  0x33dc:   4610        mov r0, r2
    33de:   bd10        pop {r4, pc}

function_14:
    ; r0 = pointer
    ; r1 =
  0x33e0:   b530        push {r4, r5, lr}
    33e2:   6843        ldr r3, [r0, #4]        ; r3 = [r0 + 4]
    33e4:   2200        movs r2, #0             ; r2 = 0
    33e6:   68c4        ldr r4, [r0, #12]       ; r4 = [r0 + 0xc]
    33e8:   1c5b        adds r3, r3, #1         ; r3 = r3 + 1
    33ea:   fbb3 f5f4   udiv r5, r3, r4         ; r5 = r4 / r4
    33ee:   fb04 3315   mls r3, r4, r5, r3      ; r3 = r3 - (r4 * r5)
    33f2:   6804        ldr r4, [r0, #0]        ; r4 = [r0]
    33f4:   42a3        cmp r3, r4
    33f6:   d00a        beq.n 0x340e            ; branch if r3 == r4
    33f8:   6842        ldr r2, [r0, #4]        ; r2 = [r0 + 4]
    33fa:   6883        ldr r3, [r0, #8]        ; r3 = [r0 + 8[
    33fc:   5499        strb r1, [r3, r2]       ; [r3 + r2] = r1
    33fe:   68c1        ldr r1, [r0, #12]       ; r1 = [r0 + 0xc]
    3400:   1c52        adds r2, r2, #1         ; r2 = r2 + 1
    3402:   fbb2 f3f1   udiv r3, r2, r1         ; r3 = r2 + 1
    3406:   fb01 2113   mls r1, r1, r3, r2      ; r1 = r2 - (r1 * r3)
    340a:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1
    340c:   2201        movs r2, #1             ; r2 = 1
    340e:   4610        mov r0, r2              ; r0 = r2
    3410:   bd30        pop {r4, r5, pc}

function_e_35:
  0x3412:   6841        ldr r1, [r0, #4]
    3414:   6800        ldr r0, [r0, #0]
    3416:   4281        cmp r1, r0
    3418:   d101        bne.n 0x341e
    341a:   2001        movs r0, #1
    341c:   4770        bx lr
  0x341e:   2000        movs r0, #0
    3420:   4770        bx lr
    3422:   0000

ckcu_ahb_clock_enable:
    ; Enable or disable AHB peripheral clocks
    ; r0 = enable bit mask
    ; r1 = enable/disable
  0x3424:   4a04        ldr r2, [pc, #16]       ; r2 = (0x3438)
    3426:   2901        cmp r1, #1
    3428:   6a51        ldr r1, [r2, #36]       ; r1 = [r2 + 0x24]
    342a:   d002        beq.n 0x3432            ; branch if r1 == 1
    342c:   4381        bics r1, r0             ; r1 = r1 & ~r0
  0x342e:   6251        str r1, [r2, #36]       ; [r2 + 0x24] = r1
    3430:   4770        bx lr
  0x3432:   4301        orrs r1, r0             ; r1 = r1 | r0
    3434:   e7fb        b.n 0x342e
    3436:   0000

  0x3438:   0x40088000  ; CKCU Registers

ckcu_apb0_clock_enable:
    ; Enable or disable APB peripheral clocks
    ; r0 = enable bit mask
    ; r1 = enable/disable
  0x343c:   4a04        ldr r2, [pc, #16]       ; r2 = (0x3450)
    343e:   2901        cmp r1, #1
    3440:   6ad1        ldr r1, [r2, #44]       ; r1 = [r2 + 0x2c]
    3442:   d002        beq.n 0x344a
    3444:   4381        bics r1, r0             ; r1 = r1 & ~r0
  0x3446:   62d1        str r1, [r2, #44]       ; [r2 + 0x2c] = r1
    3448:   4770        bx lr
  0x344a:   4301        orrs r1, r0             ; r1 = r1 | r0
    344c:   e7fb        b.n 0x3446
    344e:   0000

  0x3450:   0x40088000  ; CKCU Registers

ckcu_apb1_clock_enable:
    ; Enable or disable APB peripheral clocks
    ; r0 = enable bit mask
    ; r1 = enable/disable
  0x3454:   4a04        ldr r2, [pc, #16]   ; r2 = (0x3468) CKCU registers
    3456:   2901        cmp r1, #1
    3458:   6b11        ldr r1, [r2, #48]   ; r1 = [r2 + 0x30]
    345a:   d002        beq.n 0x3462        ; branch if r1 == 1
    345c:   4381        bics r1, r0         ; r1 = r1 & r0 ?
  0x345e:   6311        str r1, [r2, #48]   ; [r2 + 0x30] = r1
    3460:   4770        bx lr
  0x3462:   4301        orrs r1, r0         ; r1 = r1 | r0
    3464:   e7fb        b.n 0x345e
    3466:   0000

  0x3468:   0x40088000  ; CKCU Registers

ckcu_set_usb_prescaler:
    ; r0 = usb clock prescaler 0/1/2
  0x346c:   4903        ldr r1, [pc, #12]           ; r1 = (0x347c) CKCU registers
    346e:   680a        ldr r2, [r1, #0]            ; r2 = [r1]
    3470:   f422 0240   bic.w r2, r2, #12582912     ; r2 = r2 & ~0xc00000
    3474:   ea42 5080   orr.w r0, r2, r0, lsl #22   ; r0 = r2 | r0 << 22
    3478:   6008        str r0, [r1, #0]            ; [r1] = r0
    347a:   4770        bx lr

  0x347c:   0x40088000  ; CKCU Registers

crc16:
  0x3480:   b5f0        push {r4, r5, r6, r7, lr}
    3482:   2600        movs r6, #0
    3484:   e01a        b.n 0x34bc
    3486:   5d8b        ldrb r3, [r1, r6]
    3488:   f241 0c21   movw ip, #4129              ; 0x1021
    348c:   ea83 2310   eor.w r3, r3, r0, lsr #8
    3490:   ea4f 2403   mov.w r4, r3, lsl #8
    3494:   2300        movs r3, #0
    3496:   2508        movs r5, #8
    3498:   ea84 0e03   eor.w lr, r4, r3
    349c:   ea4f 0743   mov.w r7, r3, lsl #1
    34a0:   ea5f 4e0e   movs.w lr, lr, lsl #16
    34a4:   d501        bpl.n 0x34aa
    34a6:   ea8c 0743   eor.w r7, ip, r3, lsl #1
    34aa:   463b        mov r3, r7
    34ac:   1e6d        subs r5, r5, #1
    34ae:   ea4f 0444   mov.w r4, r4, lsl #1
    34b2:   d1f1        bne.n 0x3498
    34b4:   b2bb        uxth r3, r7
    34b6:   ea83 2000   eor.w r0, r3, r0, lsl #8
    34ba:   1c76        adds r6, r6, #1
  0x34bc:   4296        cmp r6, r2
    34be:   d3e2        bcc.n 0x3486
    34c0:   b280        uxth r0, r0
    34c2:   bdf0        pop {r4, r5, r6, r7, pc}

flash_page_erase:
    ; r0 = page address
  0x34c4:   4903        ldr r1, [pc, #12]       ; r1 = (0x34d4) FMC Registers
    34c6:   6008        str r0, [r1, #0]        ; [r1] = r0 Write TADR
                                                ; Page erase
    34c8:   2008        movs r0, #8             ; r0 = 8
    34ca:   60c8        str r0, [r1, #12]       ; [r1 + 0xc] = r0 Write OCMR
                                                ; Commit command
    34cc:   2014        movs r0, #20            ; r0 = 0x14
    34ce:   6108        str r0, [r1, #16]       ; [r1 + 0x10] = r0 Write OPCR
    34d0:   f000 b812   b.w 0x34f8              ; branch

  0x34d4:   0x40080000  ; FMC Registers

flash_get_protection_status:
  0x34d8:   4801        ldr r0, [pc, #4]        ; r0 = (0x34e0) FMC Registers
    34da:   6b00        ldr r0, [r0, #48]       ; r0 = [r0 + 0x30]
    34dc:   4770        bx lr
    34de:   0000

  0x34e0:   0x40080000  ; FMC Registers

flash_write:
    ; r0 = Flash CMD command
    ; r1 = Flash TADR target address
    ; r2 = Flash WRDR write data
  0x34e4:   4b03        ldr r3, [pc, #12]       ; r3 = (0x34f4)
    34e6:   60d8        str r0, [r3, #12]       ; [r3 + 0xc] = r0 Write CMD to OCMR
    34e8:   6019        str r1, [r3, #0]        ; [r3] = r1 Write TADR
    34ea:   605a        str r2, [r3, #4]        ; [r3 + 4] = r2 Write WRDR
                                                ; Commit command
    34ec:   2014        movs r0, #20            ; r0 = 0x14
    34ee:   6118        str r0, [r3, #16]       ; [r3 + 0x10] = r0 Write OPCR
    34f0:   4770        bx lr
    34f2:   0000

  0x34f4:   0x40080000  ; FMC registers

    ; Continuation from flash_page_erase
  0x34f8:   4806        ldr r0, [pc, #24]       ; r0 = (0x3514) 0xfffff
    34fa:   4907        ldr r1, [pc, #28]       ; r1 = (0x3518) FMC Registers
    34fc:   e004        b.n 0x3508              ; branch into loop

    ; Wait for operation finished in OPCR
  0x34fe:   690a        ldr r2, [r1, #16]       ; r2 = [r1 + 0x10] Read OPCR
    3500:   f3c2 0281   ubfx r2, r2, #2, #2     ; r2 = (r2 << 2) & 0x3
    3504:   2a03        cmp r2, #3
    3506:   d003        beq.n 0x3510            ; branch out of loop if r2 == 3

  0x3508:   1e40        subs r0, r0, #1         ; r0 = r0 - 1
    350a:   d2f8        bcs.n 0x34fe            ; loop
    350c:   2008        movs r0, #8             ; r0 = 8 Timeout
    350e:   4770        bx lr
  0x3510:   2000        movs r0, #0             ; r0 = 0 Success
    3512:   4770        bx lr

  0x3514:   0xfffff  ; timeout counter
  0x3518:   0x40080000  ; FMC Registers

gpio_set_input_output:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = 0/1 input/output
  0x351c:   2a00        cmp r2, #0
    351e:   6802        ldr r2, [r0, #0]    ; r2 = [r0]
    3520:   d001        beq.n 0x3526        ; branch if r2 == 0
    3522:   430a        orrs r2, r1         ; r2 = r2 | r1
    3524:   e000        b.n 0x3528
  0x3526:   438a        bics r2, r1         ; r2 = r2 & ~r1
  0x3528:   6002        str r2, [r0, #0]    ; [r0] = r2
    352a:   4770        bx lr

gpio_set_output_current:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = 0/1 4mA/8mA
  0x352c:   2a00        cmp r2, #0
    352e:   6942        ldr r2, [r0, #20]       ; r2 = [r0 + 0x14]
    3530:   d001        beq.n 0x3536            ; branch if r2 == 0
    3532:   430a        orrs r2, r1             ; r2 = r2 | r1
    3534:   e000        b.n 0x3538
  0x3536:   438a        bics r2, r1             ; r2 = r2 & ~r1
  0x3538:   6142        str r2, [r0, #20]       ; [r0 + 0x14] = r2
    353a:   4770        bx lr

gpio_set_input_enable:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = 0/1 disable/enable
  0x353c:   2a00        cmp r2, #0
    353e:   6842        ldr r2, [r0, #4]        ; r2 = [r0 + 4]
    3540:   d001        beq.n 0x3546            ; branch if r2 == 0
                                                ; if r1 == 1, set pin bit
    3542:   430a        orrs r2, r1             ; r2 = r2 | r1
    3544:   e000        b.n 0x3548
                                                ; if r2 == 0, clear pin bit
  0x3546:   438a        bics r2, r1             ; r2 = r2 & ~r1
                                                ; update input enable mask
  0x3548:   6042        str r2, [r0, #4]        ; [r0 + 4] = r2
    354a:   4770        bx lr

gpio_set_open_drain:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = enable/disable
  0x354c:   2a00        cmp r2, #0
    354e:   6902        ldr r2, [r0, #16]       ; r2 = [r0 + 0x10]
    3550:   d001        beq.n 0x3556            ; branch if r2 == 0
    3552:   430a        orrs r2, r1             ; r2 = r2 | r1
    3554:   e000        b.n 0x3558
  0x3556:   438a        bics r2, r1             ; r2 = r2 & ~r1
  0x3558:   6102        str r2, [r0, #16]       ; [r0 + 0x10] = r2
    355a:   4770        bx lr

gpio_set_pin_pull_up_down:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = 0/1/2 pull-up/pull-down/none
  0x355c:   b142        cbz r2, 0x3570          ; branch if r2 == 0
    355e:   2a01        cmp r2, #1
    3560:   d009        beq.n 0x3576            ; branch if r2 == 1
                                                ; if r2 == 2
                                                ; disable pull-up
    3562:   6882        ldr r2, [r0, #8]        ; r2 = [r0 + 8]
    3564:   438a        bics r2, r1             ; r2 = r2 & ~r1
  0x3566:   6082        str r2, [r0, #8]        ; [r0 + 8] = r2
                                                ; disable pull-down
    3568:   68c2        ldr r2, [r0, #12]       ; r2 = [r0 + 0xc]
    356a:   438a        bics r2, r1             ; r2 = r2 & ~r1
    356c:   60c2        str r2, [r0, #12]       ; [r0 + 0xc] = r2
    356e:   4770        bx lr
                                                ; if r2 == 0
                                                ; enable pull-up
  0x3570:   6882        ldr r2, [r0, #8]        ; r2 = [r0 + 8]
    3572:   430a        orrs r2, r1             ; r2 = r2 | r1
    3574:   e7f7        b.n 0x3566
                                                ; if r2 == 1
                                                ; enable pull-down
  0x3576:   68c2        ldr r2, [r0, #12]       ; r2 = [r0 + 0xc]
    3578:   430a        orrs r2, r1             ; r2 = r2 | r1
    357a:   60c2        str r2, [r0, #12]       ; [r0 + 0xc] = r2
                                                ; disable pull-up
    357c:   6882        ldr r2, [r0, #8]        ; r2 = [r0 + 8]
    357e:   438a        bics r2, r1             ; r2 = r2 & ~r1
    3580:   6082        str r2, [r0, #8]        ; [r0 + 8] = r2
    3582:   4770        bx lr

gpio_set_pin:
    ; r0 = GPIO reg base
    ; r1 = pin bit
  0x3584:   6241        str r1, [r0, #36]       ; [r0 + 0x24] = r1
    3586:   4770        bx lr

gpio_set_reset_pin:
    ; r0 = GPIO reg base
    ; r1 = pin bit
    ; r2 = 0/1 reset/set
  0x3588:   b10a        cbz r2, 0x358e          ; branch if r2 == 0
    358a:   6241        str r1, [r0, #36]       ; [r0 + 0x24] = r1
    358c:   4770        bx lr
  0x358e:   6281        str r1, [r0, #40]       ; [r0 + 0x28] = r1
    3590:   4770        bx lr

gptm_enable_disable:
    ; r0 = GPTM reg base
    ; r1 = 0/1 enable/disable
  0x3592:   2900        cmp r1, #0
    3594:   6901        ldr r1, [r0, #16]       ; r1 = [r0 + 0x10]
    3596:   d002        beq.n 0x359e            ; branch if r1 == 0
    3598:   f041 0101   orr.w r1, r1, #1        ; r1 = r1 | 1
    359c:   e001        b.n 0x35a2
  0x359e:   f021 0101   bic.w r1, r1, #1        ; r1 = r1 & ~1
  0x35a2:   6101        str r1, [r0, #16]       ; [r0 = 0x10] = r1
    35a4:   4770        bx lr

function_62:
    ; r0 =
    ; r1 =
    ; r2 =
  0x35a6:   b5f0        push {r4, r5, r6, r7, lr}
    35a8:   780b        ldrb r3, [r1, #0]
    35aa:   2401        movs r4, #1                 ; r4 = 1
    35ac:   eb00 0683   add.w r6, r0, r3, lsl #2
    35b0:   005b        lsls r3, r3, #1             ; r3 = r3 << 1
    35b2:   409c        lsls r4, r3                 ; r4 = r4 << r3
    35b4:   6d07        ldr r7, [r0, #80]       ; 0x50
    35b6:   f106 0240   add.w r2, r6, #64       ; 0x40
    35ba:   f106 0590   add.w r5, r6, #144      ; 0x90
    35be:   43e4        mvns r4, r4
    35c0:   4027        ands r7, r4
    35c2:   6507        str r7, [r0, #80]       ; 0x50
    35c4:   6d47        ldr r7, [r0, #84]       ; 0x54
    35c6:   4027        ands r7, r4
    35c8:   6547        str r7, [r0, #84]       ; 0x54
    35ca:   6d44        ldr r4, [r0, #84]       ; 0x54
    35cc:   7a4f        ldrb r7, [r1, #9]
    35ce:   409f        lsls r7, r3
    35d0:   433c        orrs r4, r7
    35d2:   6544        str r4, [r0, #84]   ; 0x54
    35d4:   6814        ldr r4, [r2, #0]
    35d6:   f240 1707   movw r7, #263   ; 0x107
    35da:   43bc        bics r4, r7
    35dc:   6014        str r4, [r2, #0]
    35de:   6814        ldr r4, [r2, #0]
    35e0:   684f        ldr r7, [r1, #4]
    35e2:   433c        orrs r4, r7
    35e4:   6014        str r4, [r2, #0]
    35e6:   894a        ldrh r2, [r1, #10]
    35e8:   602a        str r2, [r5, #0]
    35ea:   898a        ldrh r2, [r1, #12]
    35ec:   f8c6 20a0   str.w r2, [r6, #160]   ; 0xa0
    35f0:   6d02        ldr r2, [r0, #80]   ; 0x50
    35f2:   7a09        ldrb r1, [r1, #8]
    35f4:   4099        lsls r1, r3
    35f6:   430a        orrs r2, r1
    35f8:   6502        str r2, [r0, #80]   ; 0x50
    35fa:   bdf0        pop {r4, r5, r6, r7, pc}

function_e_36:
    ; r0 = sp
  0x35fc:   2100        movs r1, #0
    35fe:   7001        strb r1, [r0, #0]
    3600:   6041        str r1, [r0, #4]
    3602:   7201        strb r1, [r0, #8]
    3604:   7241        strb r1, [r0, #9]
    3606:   8141        strh r1, [r0, #10]
    3608:   8181        strh r1, [r0, #12]
    360a:   4770        bx lr
    360c:   880a        ldrh r2, [r1, #0]
    360e:   f8c0 2088   str.w r2, [r0, #136]   ; 0x88
    3612:   884a        ldrh r2, [r1, #2]
    3614:   f8c0 2084   str.w r2, [r0, #132]   ; 0x84
    3618:   6802        ldr r2, [r0, #0]
    361a:   f422 3240   bic.w r2, r2, #196608   ; 0x30000
    361e:   6002        str r2, [r0, #0]
    3620:   6802        ldr r2, [r0, #0]
    3622:   f022 7280   bic.w r2, r2, #16777216   ; 0x1000000
    3626:   6002        str r2, [r0, #0]
    3628:   6802        ldr r2, [r0, #0]
    362a:   684b        ldr r3, [r1, #4]
    362c:   431a        orrs r2, r3
    362e:   6002        str r2, [r0, #0]
    3630:   8909        ldrh r1, [r1, #8]
    3632:   6781        str r1, [r0, #120]   ; 0x78
    3634:   4770        bx lr
    3636:   2100        movs r1, #0
    3638:   f64f 72ff   movw r2, #65535   ; 0xffff
    363c:   6041        str r1, [r0, #4]
    363e:   8002        strh r2, [r0, #0]
    3640:   8041        strh r1, [r0, #2]
    3642:   f44f 7180   mov.w r1, #256   ; 0x100
    3646:   8101        strh r1, [r0, #8]
    3648:   4770        bx lr
    364a:   0000

function_e_37:
  0x364c:   e92d 47f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3650:   4847        ldr r0, [pc, #284]   ; (0x3770)
    3652:   68c2        ldr r2, [r0, #12]
    3654:   60c2        str r2, [r0, #12]
    3656:   4c47        ldr r4, [pc, #284]   ; (0x3774)
    3658:   0551        lsls r1, r2, #21
    365a:   f04f 0900   mov.w r9, #0
    365e:   d501        bpl.n 0x3664
    3660:   2105        movs r1, #5
    3662:   e07f        b.n 0x3764
    3664:   05d1        lsls r1, r2, #23
    3666:   d501        bpl.n 0x366c
    3668:   2104        movs r1, #4
    366a:   e07b        b.n 0x3764
    366c:   0511        lsls r1, r2, #20
    366e:   d501        bpl.n 0x3674
    3670:   2106        movs r1, #6
    3672:   e077        b.n 0x3764
    3674:   493f        ldr r1, [pc, #252]   ; (0x3774)
    3676:   0593        lsls r3, r2, #22
    3678:   7809        ldrb r1, [r1, #0]
    367a:   d507        bpl.n 0x368c
    367c:   8962        ldrh r2, [r4, #10]
    367e:   b11a        cbz r2, 0x3688
    3680:   1e52        subs r2, r2, #1
    3682:   8162        strh r2, [r4, #10]
    3684:   2200        movs r2, #0
    3686:   e03b        b.n 0x3700
    3688:   2102        movs r1, #2
    368a:   e06b        b.n 0x3764
    368c:   f8d4 c010   ldr.w ip, [r4, #16]
    3690:   f1bc 0f00   cmp.w ip, #0
    3694:   d065        beq.n 0x3762
    3696:   4d37        ldr r5, [pc, #220]   ; (0x3774)
    3698:   892b        ldrh r3, [r5, #8]
    369a:   88ed        ldrh r5, [r5, #6]
    369c:   1c5e        adds r6, r3, #1
    369e:   b2b6        uxth r6, r6
    36a0:   f5b2 1fc8   cmp.w r2, #1638400   ; 0x190000
    36a4:   d040        beq.n 0x3728
    36a6:   dc0c        bgt.n 0x36c2
    36a8:   f46f 11c0   mvn.w r1, #1572864   ; 0x180000
    36ac:   1851        adds r1, r2, r1
    36ae:   d01e        beq.n 0x36ee
    36b0:   2903        cmp r1, #3
    36b2:   d11c        bne.n 0x36ee
    36b4:   2d01        cmp r5, #1
    36b6:   d91a        bls.n 0x36ee
    36b8:   e8bd 47f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36bc:   2101        movs r1, #1
    36be:   f000 b85d   b.w 0x377c
    36c2:   4f2c        ldr r7, [pc, #176]   ; (0x3774)
    36c4:   f8df 80b0   ldr.w r8, [pc, #176]   ; 0x3778
    36c8:   f04f 0a01   mov.w sl, #1
    36cc:   88bf        ldrh r7, [r7, #4]
    36ce:   f5b2 1f68   cmp.w r2, #3801088   ; 0x3a0000
    36d2:   d00e        beq.n 0x36f2
    36d4:   f5a2 1268   sub.w r2, r2, #3801088   ; 0x3a0000
    36d8:   1f12        subs r2, r2, #4
    36da:   d108        bne.n 0x36ee
    36dc:   7861        ldrb r1, [r4, #1]
    36de:   2901        cmp r1, #1
    36e0:   d001        beq.n 0x36e6
    36e2:   6187        str r7, [r0, #24]
    36e4:   e01d        b.n 0x3722
    36e6:   0a39        lsrs r1, r7, #8
    36e8:   6181        str r1, [r0, #24]
    36ea:   f888 9001   strb.w r9, [r8, #1]
    36ee:   e8bd 87f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36f2:   f898 2001   ldrb.w r2, [r8, #1]
    36f6:   b192        cbz r2, 0x371e
    36f8:   78a2        ldrb r2, [r4, #2]
    36fa:   b12a        cbz r2, 0x3708
    36fc:   f44f 6280   mov.w r2, #1024   ; 0x400
    3700:   e8bd 47f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3704:   f000 b849   b.w 0x379a
    3708:   42ab        cmp r3, r5
    370a:   d204        bcs.n 0x3716
    370c:   f81c 1003   ldrb.w r1, [ip, r3]
    3710:   6181        str r1, [r0, #24]
    3712:   8126        strh r6, [r4, #8]
    3714:   e7eb        b.n 0x36ee
    3716:   464d        mov r5, r9
    3718:   f884 9003   strb.w r9, [r4, #3]
    371c:   e018        b.n 0x3750
    371e:   b2f9        uxtb r1, r7
    3720:   6181        str r1, [r0, #24]
    3722:   f888 a001   strb.w sl, [r8, #1]
    3726:   e7e2        b.n 0x36ee
    3728:   4607        mov r7, r0
    372a:   6980        ldr r0, [r0, #24]
    372c:   f80c 0003   strb.w r0, [ip, r3]
    3730:   1e6d        subs r5, r5, #1
    3732:   8126        strh r6, [r4, #8]
    3734:   42ae        cmp r6, r5
    3736:   d103        bne.n 0x3740
    3738:   2100        movs r1, #0
    373a:   4638        mov r0, r7
    373c:   f000 f81e   bl 0x377c
    3740:   8920        ldrh r0, [r4, #8]
    3742:   88e1        ldrh r1, [r4, #6]
    3744:   4288        cmp r0, r1
    3746:   d1d2        bne.n 0x36ee
    3748:   464d        mov r5, r9
    374a:   f884 9003   strb.w r9, [r4, #3]
    374e:   4638        mov r0, r7
    3750:   f000 f81e   bl 0x3790
    3754:   6125        str r5, [r4, #16]
    3756:   68e0        ldr r0, [r4, #12]
    3758:   2800        cmp r0, #0
    375a:   d0c8        beq.n 0x36ee
    375c:   e8bd 47f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3760:   4700        bx r0
    3762:   2103        movs r1, #3
    3764:   70e1        strb r1, [r4, #3]
    3766:   f000 f813   bl 0x3790
    376a:   f8c4 9010   str.w r9, [r4, #16]
    376e:   e7be        b.n 0x36ee

  0x3770:   0x40049000  ; I2C1 Registers
  0x3774:   0x20002f4c  ; pointer_30
  0x3778:   0x2000021e  ; pointer_29

function_57:
  0x377c:   2900        cmp r1, #0
    377e:   6801        ldr r1, [r0, #0]
    3780:   d002        beq.n 0x3788
    3782:   f041 0101   orr.w r1, r1, #1
    3786:   e001        b.n 0x378c
    3788:   f021 0101   bic.w r1, r1, #1
    378c:   6001        str r1, [r0, #0]
    378e:   4770        bx lr

function_58:
  0x3790:   6801        ldr r1, [r0, #0]
    3792:   f041 0102   orr.w r1, r1, #2
    3796:   6001        str r1, [r0, #0]
    3798:   4770        bx lr

function_59:
  0x379a:   6803        ldr r3, [r0, #0]
    379c:   079b        lsls r3, r3, #30
    379e:   d4fc        bmi.n 0x379a
    37a0:   b10a        cbz r2, 0x37a6
    37a2:   f441 6180   orr.w r1, r1, #1024   ; 0x400
    37a6:   61c1        str r1, [r0, #28]
    37a8:   4770        bx lr
    37aa:   0000

function_60:
  0x37ac:   b500        push {lr}
    37ae:   f000 f80b   bl 0x37c8           ; call function_61
    37b2:   4804        ldr r0, [pc, #16]   ; (0x37c4)
    37b4:   7801        ldrb r1, [r0, #0]
    37b6:   2901        cmp r1, #1
    37b8:   d101        bne.n 0x37be
    37ba:   2102        movs r1, #2
    37bc:   7001        strb r1, [r0, #0]
    37be:   2001        movs r0, #1
    37c0:   bd00        pop {pc}
    37c2:   0000

  0x37c4:   0x2000021c  ; pointer_31

function_61:
  0x37c8:   4803        ldr r0, [pc, #12]   ; (0x37d8)
    37ca:   7801        ldrb r1, [r0, #0]
    37cc:   b909        cbnz r1, 0x37d2
    37ce:   2101        movs r1, #1
    37d0:   7001        strb r1, [r0, #0]
    37d2:   2001        movs r0, #1
    37d4:   4770        bx lr
    37d6:   0000

  0x37d8:   0x2000021c  ; pointer_31

nop_1:
  0x37dc:   4770        bx lr
    37de:   0000

function_13:
  0x37e0:   b530        push {r4, r5, lr}
    37e2:   210e        movs r1, #14
    37e4:   2401        movs r4, #1
    37e6:   4b1b        ldr r3, [pc, #108]   ; (0x3854)
    37e8:   ebb1 1f10   cmp.w r1, r0, lsr #4
    37ec:   d108        bne.n 0x3800
    37ee:   f000 000f   and.w r0, r0, #15
    37f2:   2808        cmp r0, #8
    37f4:   d22c        bcs.n 0x3850
    37f6:   7819        ldrb r1, [r3, #0]
    37f8:   4084        lsls r4, r0
    37fa:   4321        orrs r1, r4
    37fc:   7019        strb r1, [r3, #0]
    37fe:   e027        b.n 0x3850
    3800:   2891        cmp r0, #145   ; 0x91
    3802:   d825        bhi.n 0x3850
    3804:   2200        movs r2, #0
    3806:   4611        mov r1, r2
    3808:   185d        adds r5, r3, r1
    380a:   78ad        ldrb r5, [r5, #2]
    380c:   4285        cmp r5, r0
    380e:   d100        bne.n 0x3812
    3810:   2201        movs r2, #1
    3812:   1c49        adds r1, r1, #1
    3814:   b2c9        uxtb r1, r1
    3816:   2906        cmp r1, #6
    3818:   d3f6        bcc.n 0x3808
    381a:   b9ca        cbnz r2, 0x3850
    381c:   2100        movs r1, #0
    381e:   185a        adds r2, r3, r1
    3820:   7892        ldrb r2, [r2, #2]
    3822:   b132        cbz r2, 0x3832
    3824:   1c49        adds r1, r1, #1
    3826:   b2c9        uxtb r1, r1
    3828:   2906        cmp r1, #6
    382a:   d3f8        bcc.n 0x381e
    382c:   2906        cmp r1, #6
    382e:   d003        beq.n 0x3838
    3830:   e00e        b.n 0x3850
    3832:   185a        adds r2, r3, r1
    3834:   7090        strb r0, [r2, #2]
    3836:   e7f9        b.n 0x382c
    3838:   08c2        lsrs r2, r0, #3
    383a:   f000 0007   and.w r0, r0, #7
    383e:   fa04 f100   lsl.w r1, r4, r0
    3842:   4805        ldr r0, [pc, #20]       ; (0x3858)
    3844:   4410        add r0, r2
    3846:   7882        ldrb r2, [r0, #2]
    3848:   430a        orrs r2, r1
    384a:   7082        strb r2, [r0, #2]
    384c:   4803        ldr r0, [pc, #12]       ; (0x385c)
    384e:   6144        str r4, [r0, #20]
    3850:   2001        movs r0, #1
    3852:   bd30        pop {r4, r5, pc}

  0x3854:   0x2000003c  ; pointer_33
  0x3858:   0x2000032c  ; pointer_32
  0x385c:   0x200000d8  ; pointer_15

exti_set_wakup:
    ; Set EXTIWAKUPFLG = 0xe878
  0x3860:   4902        ldr r1, [pc, #8]        ; r1 = (0x386c) EXTI Registers
    3862:   f64e 0078   movw r0, #59512         ; r0 = 0xe878
    3866:   6588        str r0, [r1, #88]       ; [r1 + 0x58] = r0
    3868:   4770        bx lr
    386a:   0000

  0x386c:   0x40024000  ; EXTI Registers

exti_check_wakup:
    ; Check if EXTIWAKUPFLG == 0xe878
    ; Return 0 or 1
  0x3870:   4803        ldr r0, [pc, #12]       ; r0 = (0x3880) EXTI Registers
    3872:   6d80        ldr r0, [r0, #88]       ; r0 = [r0 + 0x58]
    3874:   f64e 0178   movw r1, #59512         ; r1 = 0xe878
    3878:   4008        ands r0, r1             ; r0 = r0 & r1
    387a:   d000        beq.n 0x387e            ; branch if r0 == 0
    387c:   2001        movs r0, #1             ; r0 = 1
  0x387e:   4770        bx lr

  0x3880:   0x40024000  ; EXTI Registers

function_74:
  0x3884:   b570        push {r4, r5, r6, lr}
    3886:   b086        sub sp, #24
    3888:   f7ff ff90   bl 0x37ac                   ; call function_60
    388c:   f001 fd0c   bl 0x52a8                   ; call spi_flash_init
    3890:   4c2a        ldr r4, [pc, #168]          ; (0x393c)
    3892:   4e29        ldr r6, [pc, #164]          ; (0x3938)
    3894:   2203        movs r2, #3
    3896:   f894 0026   ldrb.w r0, [r4, #38]        ; 0x26
    389a:   f856 1020   ldr.w r1, [r6, r0, lsl #2]
    389e:   4828        ldr r0, [pc, #160]          ; (0x3940)
    38a0:   f601 71fb   addw r1, r1, #4091          ; 0xffb
    38a4:   f001 fb90   bl 0x4fc8
    38a8:   4d25        ldr r5, [pc, #148]          ; (0x3940)
    38aa:   7828        ldrb r0, [r5, #0]
    38ac:   2856        cmp r0, #86                 ; 0x56
    38ae:   d105        bne.n 0x38bc
    38b0:   7868        ldrb r0, [r5, #1]
    38b2:   2831        cmp r0, #49                 ; 0x31
    38b4:   d102        bne.n 0x38bc
    38b6:   78a8        ldrb r0, [r5, #2]
    38b8:   2834        cmp r0, #52                 ; 0x34
    38ba:   d006        beq.n 0x38ca
    38bc:   f004 fade   bl 0x7e7c                   ; call function_e_95
  0x38c0:   f894 0039   ldrb.w r0, [r4, #57]        ; 0x39
    38c4:   2801        cmp r0, #1
    38c6:   d012        beq.n 0x38ee
    38c8:   e01a        b.n 0x3900

    38ca:   f894 0026   ldrb.w r0, [r4, #38]        ; 0x26
    38ce:   f44f 627f   mov.w r2, #4080             ; 0xff0
    38d2:   f856 1020   ldr.w r1, [r6, r0, lsl #2]
    38d6:   481a        ldr r0, [pc, #104]          ; (0x3940)
    38d8:   f501 617f   add.w r1, r1, #4080         ; 0xff0
    38dc:   f001 fb74   bl 0x4fc8
    38e0:   7828        ldrb r0, [r5, #0]
    38e2:   7620        strb r0, [r4, #24]
    38e4:   f894 0026   ldrb.w r0, [r4, #38]        ; 0x26
    38e8:   f000 ffba   bl 0x4860                   ; call function_e_25
    38ec:   e7e8        b.n 0x38c0

    38ee:   f8b4 0046   ldrh.w r0, [r4, #70]        ; 0x46
    38f2:   b928        cbnz r0, 0x3900
    38f4:   f8b4 0048   ldrh.w r0, [r4, #72]        ; 0x48
    38f8:   b910        cbnz r0, 0x3900
    38fa:   20c8        movs r0, #200   ; 0xc8
    38fc:   f8a4 0048   strh.w r0, [r4, #72]        ; 0x48

  0x3900:   4810        ldr r0, [pc, #64]           ; r0 = (0x3944) data_9
    3902:   9003        str r0, [sp, #12]           ; [sp + 0xc] = r0

    3904:   2009        movs r0, #9                 ; r0 = 9
    3906:   f88d 0013   strb.w r0, [sp, #19]
    390a:   f44f 7002   mov.w r0, #520              ; 0x208
    390e:   f8ad 0010   strh.w r0, [sp, #16]
    3912:   480d        ldr r0, [pc, #52]           ; (0x3948)
    3914:   9000        str r0, [sp, #0]
    3916:   2001        movs r0, #1
    3918:   f88d 0012   strb.w r0, [sp, #18]
    391c:   2000        movs r0, #0
    391e:   9001        str r0, [sp, #4]
    3920:   9002        str r0, [sp, #8]

    3922:   4668        mov r0, sp
    3924:   f002 fbcc   bl 0x60c0                   ; call function_e_48(sp)

    3928:   f894 0039   ldrb.w r0, [r4, #57]        ; 0x39
    392c:   f000 fb30   bl 0x3f90                   ; call function_e_18
    3930:   f000 ff78   bl 0x4824                   ; call function_e_24
    3934:   b006        add sp, #24
    3936:   bd70        pop {r4, r5, r6, pc}

  0x3938:   0x8d44      ; data_3
  0x393c:   0x20000058  ; variable_sram_e_1
  0x3940:   0x20001cba
  0x3944:   0x8fa8      ; data_9
  0x3948:   0x394d      ; function_e_17

function_e_17:
    ; r0 =
    ; seriously huge function
  0x394c:   e92d 4ff7   stmdb sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ; put 4 words on the stack
    3950:   b084        sub sp, #16             ; sp = sp - 0x10
    3952:   4605        mov r5, r0              ; r5 = r0
    3954:   2001        movs r0, #1             ; r0 = 1
    3956:   9003        str r0, [sp, #12]       ; [sp + 0xc] = r0 = 1
    3958:   2000        movs r0, #0             ; r0 = 0
    395a:   f8df b3fc   ldr.w fp, [pc, #1020]   ; fp = (0x3d58) pointer_15
    395e:   9000        str r0, [sp, #0]        ; [sp] = r0 = 0
    3960:   9001        str r0, [sp, #4]        ; [sp + 4] = r0 = 0
    3962:   9002        str r0, [sp, #8]        ; [sp + 8] = r0 = 0

    3964:   460e        mov r6, r1
    3966:   4681        mov r9, r0
    3968:   f8cb 0034   str.w r0, [fp, #52]   ; 0x34
    396c:   f1ab 0780   sub.w r7, fp, #128   ; 0x80
    3970:   f897 0030   ldrb.w r0, [r7, #48]   ; 0x30
    3974:   2801        cmp r0, #1
    3976:   d90e        bls.n 0x3996
    3978:   49f8        ldr r1, [pc, #992]   ; (0x3d5c)
    397a:   7809        ldrb r1, [r1, #0]
    397c:   2901        cmp r1, #1
    397e:   d10a        bne.n 0x3996
    3980:   1c40        adds r0, r0, #1
    3982:   b2c0        uxtb r0, r0
    3984:   f887 0030   strb.w r0, [r7, #48]   ; 0x30
    3988:   2806        cmp r0, #6
    398a:   d902        bls.n 0x3992
    398c:   2002        movs r0, #2
    398e:   f887 0030   strb.w r0, [r7, #48]   ; 0x30
    3992:   f004 ff33   bl 0x87fc                   ; call function_e_15
    3996:   78b8        ldrb r0, [r7, #2]
    3998:   f04f 0a01   mov.w sl, #1
    399c:   2801        cmp r0, #1
    399e:   d103        bne.n 0x39a8
    39a0:   48ef        ldr r0, [pc, #956]   ; (0x3d60)
    39a2:   7980        ldrb r0, [r0, #6]
    39a4:   28fc        cmp r0, #252   ; 0xfc
    39a6:   d004        beq.n 0x39b2
    39a8:   f897 0030   ldrb.w r0, [r7, #48]   ; 0x30
    39ac:   2801        cmp r0, #1
    39ae:   d006        beq.n 0x39be
    39b0:   e00a        b.n 0x39c8
    39b2:   f897 0030   ldrb.w r0, [r7, #48]   ; 0x30
    39b6:   2801        cmp r0, #1
    39b8:   d006        beq.n 0x39c8
    39ba:   4650        mov r0, sl
    39bc:   e000        b.n 0x39c0
    39be:   4648        mov r0, r9
    39c0:   f887 0030   strb.w r0, [r7, #48]   ; 0x30
    39c4:   f8cb 0008   str.w r0, [fp, #8]
    39c8:   eb06 04c5   add.w r4, r6, r5, lsl #3
    39cc:   2c22        cmp r4, #34   ; 0x22
    39ce:   d001        beq.n 0x39d4
    39d0:   2c43        cmp r4, #67   ; 0x43
    39d2:   d131        bne.n 0x3a38
    39d4:   9806        ldr r0, [sp, #24]       ; r0 = [sp + 0x18]
    39d6:   b1c8        cbz r0, 0x3a0c
    39d8:   2c22        cmp r4, #34   ; 0x22
    39da:   d105        bne.n 0x39e8
    39dc:   f897 002b   ldrb.w r0, [r7, #43]   ; 0x2b
    39e0:   f040 0001   orr.w r0, r0, #1
    39e4:   f887 002b   strb.w r0, [r7, #43]   ; 0x2b
    39e8:   2c43        cmp r4, #67   ; 0x43
    39ea:   d105        bne.n 0x39f8
    39ec:   f897 002b   ldrb.w r0, [r7, #43]   ; 0x2b
    39f0:   f040 0002   orr.w r0, r0, #2
    39f4:   f887 002b   strb.w r0, [r7, #43]   ; 0x2b
    39f8:   f897 002b   ldrb.w r0, [r7, #43]   ; 0x2b
    39fc:   2803        cmp r0, #3
    39fe:   d11b        bne.n 0x3a38
    3a00:   f8cb a034   str.w sl, [fp, #52]   ; 0x34
    3a04:   2002        movs r0, #2
    3a06:   f887 002a   strb.w r0, [r7, #42]   ; 0x2a
    3a0a:   e015        b.n 0x3a38
    3a0c:   4648        mov r0, r9
    3a0e:   f887 902a   strb.w r9, [r7, #42]   ; 0x2a
    3a12:   2c22        cmp r4, #34   ; 0x22
    3a14:   d105        bne.n 0x3a22
    3a16:   f897 102b   ldrb.w r1, [r7, #43]   ; 0x2b
    3a1a:   f001 01fe   and.w r1, r1, #254   ; 0xfe
    3a1e:   f887 102b   strb.w r1, [r7, #43]   ; 0x2b
    3a22:   2c43        cmp r4, #67   ; 0x43
    3a24:   d105        bne.n 0x3a32
    3a26:   f897 102b   ldrb.w r1, [r7, #43]   ; 0x2b
    3a2a:   f001 01fd   and.w r1, r1, #253   ; 0xfd
    3a2e:   f887 102b   strb.w r1, [r7, #43]   ; 0x2b
    3a32:   7338        strb r0, [r7, #12]
    3a34:   f8cb 0034   str.w r0, [fp, #52]   ; 0x34
    3a38:   2c44        cmp r4, #68   ; 0x44
    3a3a:   d001        beq.n 0x3a40
    3a3c:   2c0c        cmp r4, #12
    3a3e:   d117        bne.n 0x3a70
    3a40:   9806        ldr r0, [sp, #24]
    3a42:   b178        cbz r0, 0x3a64
    3a44:   2010        movs r0, #16
    3a46:   2c44        cmp r4, #68   ; 0x44
    3a48:   d101        bne.n 0x3a4e
    3a4a:   f887 002b   strb.w r0, [r7, #43]   ; 0x2b
    3a4e:   2c0c        cmp r4, #12
    3a50:   d10e        bne.n 0x3a70
    3a52:   f897 002b   ldrb.w r0, [r7, #43]   ; 0x2b
    3a56:   2810        cmp r0, #16
    3a58:   d10a        bne.n 0x3a70
    3a5a:   f887 902a   strb.w r9, [r7, #42]   ; 0x2a
    3a5e:   f8cb a034   str.w sl, [fp, #52]   ; 0x34
    3a62:   e005        b.n 0x3a70
    3a64:   2c44        cmp r4, #68   ; 0x44
    3a66:   d101        bne.n 0x3a6c
    3a68:   f887 902b   strb.w r9, [r7, #43]   ; 0x2b
    3a6c:   f8cb 9034   str.w r9, [fp, #52]   ; 0x34
    3a70:   2c3a        cmp r4, #58   ; 0x3a
    3a72:   d003        beq.n 0x3a7c
    3a74:   2c43        cmp r4, #67   ; 0x43
    3a76:   d001        beq.n 0x3a7c
    3a78:   2c21        cmp r4, #33   ; 0x21
    3a7a:   d140        bne.n 0x3afe
    3a7c:   9806        ldr r0, [sp, #24]
    3a7e:   b330        cbz r0, 0x3ace
    3a80:   2c43        cmp r4, #67   ; 0x43
    3a82:   d105        bne.n 0x3a90
    3a84:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3a88:   f040 0010   orr.w r0, r0, #16
    3a8c:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3a90:   2c3a        cmp r4, #58   ; 0x3a
    3a92:   d105        bne.n 0x3aa0
    3a94:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3a98:   f040 0020   orr.w r0, r0, #32
    3a9c:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3aa0:   2c21        cmp r4, #33   ; 0x21
    3aa2:   d105        bne.n 0x3ab0
    3aa4:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3aa8:   f040 0040   orr.w r0, r0, #64   ; 0x40
    3aac:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3ab0:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3ab4:   2870        cmp r0, #112   ; 0x70
    3ab6:   d122        bne.n 0x3afe
    3ab8:   f887 902e   strb.w r9, [r7, #46]   ; 0x2e
    3abc:   f887 a02f   strb.w sl, [r7, #47]   ; 0x2f
    3ac0:   f897 002c   ldrb.w r0, [r7, #44]   ; 0x2c
    3ac4:   f080 0001   eor.w r0, r0, #1
    3ac8:   f887 002d   strb.w r0, [r7, #45]   ; 0x2d
    3acc:   e017        b.n 0x3afe
    3ace:   2c43        cmp r4, #67   ; 0x43
    3ad0:   d105        bne.n 0x3ade
    3ad2:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3ad6:   f020 0010   bic.w r0, r0, #16
    3ada:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3ade:   2c3a        cmp r4, #58   ; 0x3a
    3ae0:   d105        bne.n 0x3aee
    3ae2:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3ae6:   f020 0020   bic.w r0, r0, #32
    3aea:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3aee:   2c21        cmp r4, #33   ; 0x21
    3af0:   d105        bne.n 0x3afe
    3af2:   f897 002e   ldrb.w r0, [r7, #46]   ; 0x2e
    3af6:   f020 0040   bic.w r0, r0, #64   ; 0x40
    3afa:   f887 002e   strb.w r0, [r7, #46]   ; 0x2e
    3afe:   f004 fedd   bl 0x88bc
    3b02:   2801        cmp r0, #1
    3b04:   d151        bne.n 0x3baa
    3b06:   7e78        ldrb r0, [r7, #25]
    3b08:   4b96        ldr r3, [pc, #600]   ; (0x3d64)
    3b0a:   f44f 6c7f   mov.w ip, #4080   ; 0xff0
    3b0e:   2801        cmp r0, #1
    3b10:   d008        beq.n 0x3b24
    3b12:   f897 0028   ldrb.w r0, [r7, #40]   ; 0x28
    3b16:   2801        cmp r0, #1
    3b18:   d018        beq.n 0x3b4c
    3b1a:   f897 002f   ldrb.w r0, [r7, #47]   ; 0x2f
    3b1e:   2801        cmp r0, #1
    3b20:   d014        beq.n 0x3b4c
    3b22:   e042        b.n 0x3baa
    3b24:   7eb8        ldrb r0, [r7, #26]
    3b26:   7638        strb r0, [r7, #24]
    3b28:   f897 1027   ldrb.w r1, [r7, #39]    ; 0x27
    3b2c:   4a8e        ldr r2, [pc, #568]      ; (0x3d68)
    3b2e:   f887 1026   strb.w r1, [r7, #38]    ; 0x26
    3b32:   f887 9019   strb.w r9, [r7, #25]
    3b36:   f882 0ff0   strb.w r0, [r2, #4080]  ; 0xff0
    3b3a:   f853 0021   ldr.w r0, [r3, r1, lsl #2]
    3b3e:   4662        mov r2, ip
    3b40:   f500 607f   add.w r0, r0, #4080     ; 0xff0
    3b44:   4601        mov r1, r0
    3b46:   f004 fef5   bl 0x8934               ; call function_e_97
    3b4a:   e022        b.n 0x3b92
    3b4c:   f897 0028   ldrb.w r0, [r7, #40]    ; 0x28
    3b50:   2801        cmp r0, #1
    3b52:   d004        beq.n 0x3b5e
    3b54:   f897 002f   ldrb.w r0, [r7, #47]    ; 0x2f
    3b58:   2801        cmp r0, #1
    3b5a:   d014        beq.n 0x3b86
    3b5c:   e019        b.n 0x3b92
    3b5e:   f107 0718   add.w r7, r7, #24
    3b62:   7bf8        ldrb r0, [r7, #15]
    3b64:   73b8        strb r0, [r7, #14]
    3b66:   4662        mov r2, ip
    3b68:   f853 1020   ldr.w r1, [r3, r0, lsl #2]
    3b6c:   487e        ldr r0, [pc, #504]      ; (0x3d68)
    3b6e:   f501 617f   add.w r1, r1, #4080     ; 0xff0
    3b72:   f001 fa29   bl 0x4fc8
    3b76:   487c        ldr r0, [pc, #496]      ; (0x3d68)
    3b78:   7800        ldrb r0, [r0, #0]
    3b7a:   7038        strb r0, [r7, #0]
    3b7c:   f887 9010   strb.w r9, [r7, #16]
    3b80:   f1a7 0718   sub.w r7, r7, #24
    3b84:   e005        b.n 0x3b92
    3b86:   f897 002d   ldrb.w r0, [r7, #45]    ; 0x2d
    3b8a:   f887 002c   strb.w r0, [r7, #44]    ; 0x2c
    3b8e:   f887 902f   strb.w r9, [r7, #47]    ; 0x2f
    3b92:   f897 0026   ldrb.w r0, [r7, #38]    ; 0x26
    3b96:   f000 fe63   bl 0x4860               ; call function_e_25
    3b9a:   f897 0039   ldrb.w r0, [r7, #57]    ; 0x39
    3b9e:   f000 f9f7   bl 0x3f90               ; call function_e_18
    3ba2:   f003 fded   bl 0x7780               ; call function_e_83
    3ba6:   f887 901b   strb.w r9, [r7, #27]
    3baa:   f897 003d   ldrb.w r0, [r7, #61]    ; 0x3d
    3bae:   4a6f        ldr r2, [pc, #444]      ; (0x3d6c)
    3bb0:   4284        cmp r4, r0
    3bb2:   d002        beq.n 0x3bba
    3bb4:   f1b8 0fe8   cmp.w r8, #232          ; 0xe8
    3bb8:   d122        bne.n 0x3c00
    3bba:   f897 002c   ldrb.w r0, [r7, #44]   ; 0x2c
    3bbe:   2101        movs r1, #1
    3bc0:   2801        cmp r0, #1
    3bc2:   d10a        bne.n 0x3bda
    3bc4:   2000        movs r0, #0
    3bc6:   5c13        ldrb r3, [r2, r0]
    3bc8:   429c        cmp r4, r3
    3bca:   d100        bne.n 0x3bce
    3bcc:   2100        movs r1, #0
    3bce:   1c40        adds r0, r0, #1
    3bd0:   b2c0        uxtb r0, r0
    3bd2:   2804        cmp r0, #4
    3bd4:   d3f7        bcc.n 0x3bc6
    3bd6:   2901        cmp r1, #1
    3bd8:   d112        bne.n 0x3c00
    3bda:   9806        ldr r0, [sp, #24]
    3bdc:   b110        cbz r0, 0x3be4
    3bde:   f887 a002   strb.w sl, [r7, #2]
    3be2:   e009        b.n 0x3bf8
    3be4:   f887 9002   strb.w r9, [r7, #2]
    3be8:   f887 9004   strb.w r9, [r7, #4]
    3bec:   f8c7 9068   str.w r9, [r7, #104]   ; 0x68
    3bf0:   f8c7 906c   str.w r9, [r7, #108]   ; 0x6c
    3bf4:   f8cb 9004   str.w r9, [fp, #4]
    3bf8:   2001        movs r0, #1             ; r0 = 1
    3bfa:   f04f 0800   mov.w r8, #0            ; r8 = 0
    3bfe:   9000        str r0, [sp, #0]        ; [sp] = r0 = 1
    3c00:   f897 003e   ldrb.w r0, [r7, #62]   ; 0x3e
    3c04:   4284        cmp r4, r0
    3c06:   d118        bne.n 0x3c3a
    3c08:   f897 002c   ldrb.w r0, [r7, #44]   ; 0x2c
    3c0c:   2101        movs r1, #1
    3c0e:   2801        cmp r0, #1
    3c10:   d10a        bne.n 0x3c28
    3c12:   2000        movs r0, #0
    3c14:   5c13        ldrb r3, [r2, r0]
    3c16:   429c        cmp r4, r3
    3c18:   d100        bne.n 0x3c1c
    3c1a:   2100        movs r1, #0
    3c1c:   1c40        adds r0, r0, #1
    3c1e:   b2c0        uxtb r0, r0
    3c20:   2804        cmp r0, #4
    3c22:   d3f7        bcc.n 0x3c14
    3c24:   2901        cmp r1, #1
    3c26:   d108        bne.n 0x3c3a
    3c28:   9806        ldr r0, [sp, #24]
    3c2a:   b110        cbz r0, 0x3c32
    3c2c:   f887 a003   strb.w sl, [r7, #3]
    3c30:   e001        b.n 0x3c36
    3c32:   f887 9003   strb.w r9, [r7, #3]
    3c36:   2001        movs r0, #1             ; r0 = 1
    3c38:   9000        str r0, [sp, #0]        ; [sp] = r0 = 1
    3c3a:   4847        ldr r0, [pc, #284]      ; (0x3d58)
    3c3c:   3880        subs r0, #128           ; 0x80
    3c3e:   f890 002c   ldrb.w r0, [r0, #44]    ; 0x2c
    3c42:   2801        cmp r0, #1
    3c44:   d109        bne.n 0x3c5a
    3c46:   2000        movs r0, #0
    3c48:   5c11        ldrb r1, [r2, r0]
    3c4a:   428c        cmp r4, r1
    3c4c:   d101        bne.n 0x3c52
    3c4e:   2101        movs r1, #1             ; r1 = 1
    3c50:   9102        str r1, [sp, #8]        ; [sp + 8] = r1 = 1
    3c52:   1c40        adds r0, r0, #1
    3c54:   b2c0        uxtb r0, r0
    3c56:   2804        cmp r0, #4
    3c58:   d3f6        bcc.n 0x3c48
    3c5a:   2401        movs r4, #1
    3c5c:   9b06        ldr r3, [sp, #24]
    3c5e:   40b4        lsls r4, r6
    3c60:   4843        ldr r0, [pc, #268]      ; (0x3d70)
    3c62:   4944        ldr r1, [pc, #272]      ; (0x3d74)
    3c64:   4a44        ldr r2, [pc, #272]      ; (0x3d78)
    3c66:   2b00        cmp r3, #0
    3c68:   9b00        ldr r3, [sp, #0]
    3c6a:   eb00 00c5   add.w r0, r0, r5, lsl #3
    3c6e:   eb01 01c5   add.w r1, r1, r5, lsl #3
    3c72:   eb02 02c5   add.w r2, r2, r5, lsl #3
    3c76:   d02e        beq.n 0x3cd6
    3c78:   2b01        cmp r3, #1
    3c7a:   d043        beq.n 0x3d04
    3c7c:   4f36        ldr r7, [pc, #216]      ; (0x3d58)
    3c7e:   3f80        subs r7, #128           ; 0x80
    3c80:   7e3b        ldrb r3, [r7, #24]
    3c82:   b123        cbz r3, 0x3c8e
    3c84:   f8db 3034   ldr.w r3, [fp, #52]     ; 0x34
    3c88:   b90b        cbnz r3, 0x3c8e
    3c8a:   9b02        ldr r3, [sp, #8]
    3c8c:   b143        cbz r3, 0x3ca0
    3c8e:   f897 3026   ldrb.w r3, [r7, #38]    ; 0x26
    3c92:   2b01        cmp r3, #1
    3c94:   d01b        beq.n 0x3cce
    3c96:   2b02        cmp r3, #2
    3c98:   d01b        beq.n 0x3cd2
    3c9a:   5d90        ldrb r0, [r2, r6]
    3c9c:   4680        mov r8, r0
    3c9e:   e031        b.n 0x3d04
    3ca0:   4631        mov r1, r6
    3ca2:   4628        mov r0, r5
    3ca4:   9a06        ldr r2, [sp, #24]
    3ca6:   f003 fc13   bl 0x74d0               ; call function_e_82
    3caa:   4680        mov r8, r0
    3cac:   f897 0024   ldrb.w r0, [r7, #36]    ; 0x24
    3cb0:   2802        cmp r0, #2
    3cb2:   d005        beq.n 0x3cc0
    3cb4:   2812        cmp r0, #18
    3cb6:   d003        beq.n 0x3cc0
    3cb8:   2803        cmp r0, #3
    3cba:   d001        beq.n 0x3cc0
    3cbc:   2813        cmp r0, #19
    3cbe:   d121        bne.n 0x3d04
    3cc0:   492e        ldr r1, [pc, #184]      ; (0x3d7c)
    3cc2:   5d48        ldrb r0, [r1, r5]
    3cc4:   4320        orrs r0, r4
    3cc6:   5548        strb r0, [r1, r5]
    3cc8:   2001        movs r0, #1             ; r0 = 1
    3cca:   9001        str r0, [sp, #4]        ; [sp + 4] = r0 = 1
    3ccc:   e01a        b.n 0x3d04
    3cce:   5d80        ldrb r0, [r0, r6]
    3cd0:   e7e4        b.n 0x3c9c
    3cd2:   5d88        ldrb r0, [r1, r6]
    3cd4:   e7e2        b.n 0x3c9c
    3cd6:   2b01        cmp r3, #1
    3cd8:   d014        beq.n 0x3d04
    3cda:   4f1f        ldr r7, [pc, #124]      ; (0x3d58)
    3cdc:   3f80        subs r7, #128           ; 0x80
    3cde:   7e3b        ldrb r3, [r7, #24]
    3ce0:   b123        cbz r3, 0x3cec
    3ce2:   f8db 3034   ldr.w r3, [fp, #52]     ; 0x34
    3ce6:   b90b        cbnz r3, 0x3cec
    3ce8:   9b02        ldr r3, [sp, #8]
    3cea:   b303        cbz r3, 0x3d2e
    3cec:   f897 3026   ldrb.w r3, [r7, #38]    ; 0x26
    3cf0:   2b01        cmp r3, #1
    3cf2:   d02f        beq.n 0x3d54
    3cf4:   2b02        cmp r3, #2
    3cf6:   d043        beq.n 0x3d80
    3cf8:   5d90        ldrb r0, [r2, r6]
  0x3cfa:   4680        mov r8, r0
  0x3cfc:   481f        ldr r0, [pc, #124]      ; (0x3d7c)
    3cfe:   5d41        ldrb r1, [r0, r5]
    3d00:   43a1        bics r1, r4
    3d02:   5541        strb r1, [r0, r5]
    3d04:   4640        mov r0, r8
    3d06:   9906        ldr r1, [sp, #24]
    3d08:   f003 fd9e   bl 0x7848               ; call function_e_85
    3d0c:   4f17        ldr r7, [pc, #92]       ; (0x3d6c)
    3d0e:   9806        ldr r0, [sp, #24]
    3d10:   3716        adds r7, #22
    3d12:   2800        cmp r0, #0
    3d14:   9800        ldr r0, [sp, #0]
    3d16:   d07c        beq.n 0x3e12
    3d18:   2801        cmp r0, #1
    3d1a:   d07b        beq.n 0x3e14
    3d1c:   4632        mov r2, r6
    3d1e:   4629        mov r1, r5
    3d20:   4640        mov r0, r8
    3d22:   f004 fd33   bl 0x878c               ; call function_e_13
    3d26:   4604        mov r4, r0
    3d28:   28e8        cmp r0, #232            ; 0xe8
    3d2a:   d02b        beq.n 0x3d84
    3d2c:   e031        b.n 0x3d92

    3d2e:   4631        mov r1, r6
    3d30:   4628        mov r0, r5
    3d32:   9a06        ldr r2, [sp, #24]
    3d34:   f003 fbcc   bl 0x74d0               ; call function_e_82
    3d38:   4680        mov r8, r0
    3d3a:   f897 0024   ldrb.w r0, [r7, #36]    ; 0x24
    3d3e:   2802        cmp r0, #2
    3d40:   d005        beq.n 0x3d4e
    3d42:   2812        cmp r0, #18
    3d44:   d003        beq.n 0x3d4e
    3d46:   2803        cmp r0, #3
    3d48:   d001        beq.n 0x3d4e
    3d4a:   2813        cmp r0, #19
    3d4c:   d1d6        bne.n 0x3cfc
  0x3d4e:   2001        movs r0, #1             ; r0 = 1
    3d50:   9001        str r0, [sp, #4]        ; [sp + 4] = r0
    3d52:   e7d3        b.n 0x3cfc
    3d54:   5d80        ldrb r0, [r0, r6]
    3d56:   e7d0        b.n 0x3cfa

  0x3d58:   0x200000d8  ; pointer_15
  0x3d5c:   0x2000003c  ; pointer_33
  0x3d60:   0x20002de4  ; pointer_34
  0x3d64:   0x8d44      ; data_3
  0x3d68:   0x20001cba
  0x3d6c:   0x8b70      ; data_4
  0x3d70:   0x8f10      ; data_5
  0x3d74:   0x8f58      ; data_6
  0x3d78:   0x8ec8      ; data_7
  0x3d7c:   0x20002cba

    ; continuation of function_e_17
  0x3d80:   5d88        ldrb r0, [r1, r6]
    3d82:   e7ba        b.n 0x3cfa
  0x3d84:   487e        ldr r0, [pc, #504]   ; (0x3f80)
    3d86:   7881        ldrb r1, [r0, #2]
    3d88:   2901        cmp r1, #1
    3d8a:   d002        beq.n 0x3d92
    3d8c:   f880 a002   strb.w sl, [r0, #2]
    3d90:   2400        movs r4, #0
  0x3d92:   487c        ldr r0, [pc, #496]   ; (0x3f84)
    3d94:   7800        ldrb r0, [r0, #0]
    3d96:   0780        lsls r0, r0, #30
    3d98:   d504        bpl.n 0x3da4
    3d9a:   2c29        cmp r4, #41   ; 0x29
    3d9c:   d102        bne.n 0x3da4
    3d9e:   4878        ldr r0, [pc, #480]   ; (0x3f80)
    3da0:   7881        ldrb r1, [r0, #2]
    3da2:   b121        cbz r1, 0x3dae
    3da4:   4976        ldr r1, [pc, #472]   ; (0x3f80)
    3da6:   7888        ldrb r0, [r1, #2]
    3da8:   2801        cmp r0, #1
    3daa:   d004        beq.n 0x3db6
    3dac:   e043        b.n 0x3e36
    3dae:   f880 a022   strb.w sl, [r0, #34]   ; 0x22
    3db2:   2435        movs r4, #53   ; 0x35
    3db4:   e03f        b.n 0x3e36

    3db6:   78c8        ldrb r0, [r1, #3]
    3db8:   2801        cmp r0, #1
    3dba:   d03c        beq.n 0x3e36
    3dbc:   9801        ldr r0, [sp, #4]        ; r0 = [sp + 4]
    3dbe:   bb50        cbnz r0, 0x3e16
    3dc0:   4a71        ldr r2, [pc, #452]      ; r2 = (0x3f88)

  0x3dc2:   5c3b        ldrb r3, [r7, r0]       ; r3 = [r7 + r0]
    3dc4:   42ab        cmp r3, r5
    3dc6:   d102        bne.n 0x3dce            ; branch if r3 != r5
    3dc8:   5c13        ldrb r3, [r2, r0]       ; r3 = [r2 + r0]
    3dca:   42b3        cmp r3, r6
    3dcc:   d004        beq.n 0x3dd8            ;
  0x3dce:   1c40        adds r0, r0, #1         ; r0++
    3dd0:   b2c0        uxtb r0, r0
    3dd2:   282c        cmp r0, #44
    3dd4:   d3f5        bcc.n 0x3dc2            ; loop if r0 < 0x2c
    3dd6:   e010        b.n 0x3dfa

  0x3dd8:   282c        cmp r0, #44
    3dda:   d20e        bcs.n 0x3dfa            ; branch if r0 >= 0x2c
    3ddc:   2301        movs r3, #1             ; r3 = 1
    3dde:   f000 021f   and.w r2, r0, #31       ; r2 = r0 & 0x1f
    3de2:   4093        lsls r3, r2             ; r3 = r3 << r2
    3de4:   4c66        ldr r4, [pc, #408]      ; r4 = (0x3f80)
    3de6:   0942        lsrs r2, r0, #5         ; r2 = r0 >> 5
    3de8:   34f8        adds r4, #248               ; r4 = 0xf8
    3dea:   f854 5022   ldr.w r5, [r4, r2, lsl #2]  ; r5 = [r4 + r2 << 2]
    3dee:   431d        orrs r5, r3                 ; r5 = r5 | r3
    3df0:   f844 5022   str.w r5, [r4, r2, lsl #2]  ; [r4 + r2 << 2] = r5
    3df4:   4a64        ldr r2, [pc, #400]          ; r2 = (0x3f88)
    3df6:   322c        adds r2, #44            ; r2 = r2 + 0x2c
    3df8:   5c14        ldrb r4, [r2, r0]       ; r4 = [r2 + r0]

  0x3dfa:   2cc4        cmp r4, #196            ; 0xc4
    3dfc:   d054        beq.n 0x3ea8
    3dfe:   dc0b        bgt.n 0x3e18
    3e00:   2cc0        cmp r4, #192   ; 0xc0
    3e02:   d010        beq.n 0x3e26
    3e04:   2cc1        cmp r4, #193   ; 0xc1
    3e06:   d011        beq.n 0x3e2c
    3e08:   2cc2        cmp r4, #194   ; 0xc2
    3e0a:   d01f        beq.n 0x3e4c
    3e0c:   2cc3        cmp r4, #195   ; 0xc3
    3e0e:   d112        bne.n 0x3e36
    3e10:   e01e        b.n 0x3e50
    3e12:   e05e        b.n 0x3ed2
    3e14:   e0af        b.n 0x3f76
    3e16:   e00e        b.n 0x3e36
    3e18:   2cc5        cmp r4, #197   ; 0xc5
    3e1a:   d04b        beq.n 0x3eb4
    3e1c:   2cc6        cmp r4, #198   ; 0xc6
    3e1e:   d046        beq.n 0x3eae
    3e20:   2ce4        cmp r4, #228   ; 0xe4
    3e22:   d108        bne.n 0x3e36
    3e24:   e019        b.n 0x3e5a
    3e26:   f881 901a   strb.w r9, [r1, #26]
    3e2a:   e013        b.n 0x3e54
    3e2c:   f881 a01a   strb.w sl, [r1, #26]
    3e30:   f881 a019   strb.w sl, [r1, #25]
    3e34:   2400        movs r4, #0
  0x3e36:   4620        mov r0, r4
    3e38:   9906        ldr r1, [sp, #24]
    3e3a:   f7ff f80f   bl 0x2e5c               ; call function_e_32(0, r1)
    3e3e:   4620        mov r0, r4
    3e40:   9906        ldr r1, [sp, #24]
    3e42:   f003 ff4b   bl 0x7cdc               ; call function_e_92(0, r1)
    3e46:   2801        cmp r0, #1
    3e48:   d037        beq.n 0x3eba
    3e4a:   e037        b.n 0x3ebc
    3e4c:   2002        movs r0, #2
    3e4e:   e000        b.n 0x3e52
    3e50:   2003        movs r0, #3
    3e52:   7688        strb r0, [r1, #26]
    3e54:   f881 a019   strb.w sl, [r1, #25]
    3e58:   e7ec        b.n 0x3e34
    3e5a:   7e08        ldrb r0, [r1, #24]
    3e5c:   b110        cbz r0, 0x3e64
    3e5e:   f891 0020   ldrb.w r0, [r1, #32]
    3e62:   b170        cbz r0, 0x3e82
    3e64:   f891 0020   ldrb.w r0, [r1, #32]
    3e68:   2801        cmp r0, #1
    3e6a:   d1e3        bne.n 0x3e34
    3e6c:   f8cb a024   str.w sl, [fp, #36]   ; 0x24
    3e70:   f101 0124   add.w r1, r1, #36   ; 0x24
    3e74:   4845        ldr r0, [pc, #276]   ; (0x3f8c)
    3e76:   f881 a001   strb.w sl, [r1, #1]
    3e7a:   f8b0 008a   ldrh.w r0, [r0, #138]   ; 0x8a
    3e7e:   8408        strh r0, [r1, #32]
    3e80:   e7d8        b.n 0x3e34
    3e82:   f881 a016   strb.w sl, [r1, #22]
    3e86:   f8c1 a05c   str.w sl, [r1, #92]   ; 0x5c
    3e8a:   f881 a000   strb.w sl, [r1]
    3e8e:   4b3c        ldr r3, [pc, #240]   ; (0x3f80)
    3e90:   33f8        adds r3, #248   ; 0xf8
    3e92:   f8c3 9000   str.w r9, [r3]
    3e96:   f8c3 9004   str.w r9, [r3, #4]
    3e9a:   f881 901b   strb.w r9, [r1, #27]
    3e9e:   f8cb a024   str.w sl, [fp, #36]   ; 0x24
    3ea2:   f881 9032   strb.w r9, [r1, #50]   ; 0x32
    3ea6:   e7c5        b.n 0x3e34
  0x3ea8:   f003 fdf6   bl 0x7a98               ; call function_e_90
    3eac:   e7c2        b.n 0x3e34
    3eae:   f003 fdcf   bl 0x7a50               ; call function_e_88
    3eb2:   e7bf        b.n 0x3e34
    3eb4:   f003 fe06   bl 0x7ac4               ; call function_e_91
    3eb8:   e7bc        b.n 0x3e34
    3eba:   2400        movs r4, #0
    3ebc:   4620        mov r0, r4
    3ebe:   f7ff fc8f   bl 0x37e0               ; function_13
    3ec2:   2801        cmp r0, #1
    3ec4:   d002        beq.n 0x3ecc
    3ec6:   2000        movs r0, #0
    3ec8:   9003        str r0, [sp, #12]
    3eca:   e054        b.n 0x3f76
    3ecc:   f8cb a010   str.w sl, [fp, #16]
    3ed0:   e051        b.n 0x3f76
    3ed2:   2801        cmp r0, #1
    3ed4:   d04f        beq.n 0x3f76
    3ed6:   4632        mov r2, r6
    3ed8:   4629        mov r1, r5
    3eda:   4640        mov r0, r8
    3edc:   f004 fc1c   bl 0x8718                   ; call function_e_12
    3ee0:   4604        mov r4, r0
    3ee2:   28e8        cmp r0, #232   ; 0xe8
    3ee4:   d002        beq.n 0x3eec
    3ee6:   2c29        cmp r4, #41   ; 0x29
    3ee8:   d00d        beq.n 0x3f06
    3eea:   e014        b.n 0x3f16
    3eec:   4924        ldr r1, [pc, #144]   ; (0x3f80)
    3eee:   f881 9002   strb.w r9, [r1, #2]
    3ef2:   f881 9004   strb.w r9, [r1, #4]
    3ef6:   f8c1 9068   str.w r9, [r1, #104]   ; 0x68
    3efa:   f8c1 906c   str.w r9, [r1, #108]   ; 0x6c
    3efe:   f8cb 9004   str.w r9, [fp, #4]
    3f02:   2400        movs r4, #0
    3f04:   e007        b.n 0x3f16
    3f06:   481e        ldr r0, [pc, #120]   ; (0x3f80)
    3f08:   f890 1022   ldrb.w r1, [r0, #34]   ; 0x22
    3f0c:   2901        cmp r1, #1
    3f0e:   d102        bne.n 0x3f16
    3f10:   f880 9022   strb.w r9, [r0, #34]   ; 0x22
    3f14:   2435        movs r4, #53   ; 0x35
    3f16:   9801        ldr r0, [sp, #4]        ; r0 = [sp + 4]
    3f18:   b9f0        cbnz r0, 0x3f58
    3f1a:   491b        ldr r1, [pc, #108]   ; (0x3f88)
    3f1c:   5c3a        ldrb r2, [r7, r0]
    3f1e:   42aa        cmp r2, r5
    3f20:   d102        bne.n 0x3f28
    3f22:   5c0a        ldrb r2, [r1, r0]
    3f24:   42b2        cmp r2, r6
    3f26:   d004        beq.n 0x3f32
    3f28:   1c40        adds r0, r0, #1         ; r0++
    3f2a:   b2c0        uxtb r0, r0
    3f2c:   282c        cmp r0, #44   ; 0x2c
    3f2e:   d3f5        bcc.n 0x3f1c
    3f30:   e012        b.n 0x3f58
    3f32:   282c        cmp r0, #44   ; 0x2c
    3f34:   d210        bcs.n 0x3f58
    3f36:   4d12        ldr r5, [pc, #72]   ; (0x3f80)
    3f38:   0943        lsrs r3, r0, #5
    3f3a:   35f8        adds r5, #248   ; 0xf8
    3f3c:   f000 061f   and.w r6, r0, #31
    3f40:   f855 2023   ldr.w r2, [r5, r3, lsl #2]
    3f44:   fa0a f106   lsl.w r1, sl, r6
    3f48:   420a        tst r2, r1
    3f4a:   d005        beq.n 0x3f58
    3f4c:   4c0e        ldr r4, [pc, #56]       ; r4 = (0x3f88) data_8
    3f4e:   3458        adds r4, #88            ; r4 += 0x58
    3f50:   438a        bics r2, r1
    3f52:   5c24        ldrb r4, [r4, r0]
    3f54:   f845 2023   str.w r2, [r5, r3, lsl #2]
    3f58:   4620        mov r0, r4
    3f5a:   9906        ldr r1, [sp, #24]
    3f5c:   f7fe ff7e   bl 0x2e5c                   ; call function_e_32(
    3f60:   4620        mov r0, r4
    3f62:   9906        ldr r1, [sp, #24]
    3f64:   f003 feba   bl 0x7cdc                   ; call function_e_92
    3f68:   2801        cmp r0, #1
    3f6a:   d100        bne.n 0x3f6e
    3f6c:   2400        movs r4, #0
    3f6e:   4620        mov r0, r4
    3f70:   f000 fc24   bl 0x47bc               ; call function_e_23
    3f74:   e7aa        b.n 0x3ecc
    3f76:   9803        ldr r0, [sp, #12]
    3f78:   b007        add sp, #28
    3f7a:   e8bd 8ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f7e:   0000

  0x3f80:   0x20000058  ; variable_sram_e_1
  0x3f84:   0x2000003c  ; pointer_33
  0x3f88:   0x8bb2      ; data_8
  0x3f8c:   0x20002e2c

function_e_18:
  0x3f90:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3f94:   4dad        ldr r5, [pc, #692]   ; (0x424c)
    3f96:   2164        movs r1, #100   ; 0x64
    3f98:   f8df b2a8   ldr.w fp, [pc, #680]   ; 0x4244
    3f9c:   2400        movs r4, #0
    3f9e:   4baa        ldr r3, [pc, #680]   ; (0x4248)
    3fa0:   4606        mov r6, r0
    3fa2:   f04f 0802   mov.w r8, #2
    3fa6:   f44f 797a   mov.w r9, #1000   ; 0x3e8
    3faa:   f64f 7aff   movw sl, #65535   ; 0xffff
    3fae:   f105 0790   add.w r7, r5, #144   ; 0x90
    3fb2:   280c        cmp r0, #12
    3fb4:   d212        bcs.n 0x3fdc
    3fb6:   e8df f000   tbb [pc, r0]
    3fba:   5706        ldrsb r6, [r0, r4]
    3fbc:   0606        lsls r6, r0, #24
    3fbe:   fde4 11fc   stc2l 1, cr1, [r4, #1008]!   ; 0x3f0
    3fc2:   8111        strh r1, [r2, #8]
    3fc4:   1706        asrs r6, r0, #28
    3fc6:   f001 f9a1   bl 0x530c               ; call function_e_41
    3fca:   210a        movs r1, #10
    3fcc:   f8cb 1028   str.w r1, [fp, #40]   ; 0x28
    3fd0:   2e0a        cmp r6, #10
    3fd2:   d004        beq.n 0x3fde
    3fd4:   2e03        cmp r6, #3
    3fd6:   d001        beq.n 0x3fdc
    3fd8:   2e02        cmp r6, #2
    3fda:   d002        beq.n 0x3fe2
    3fdc:   e12d        b.n 0x423a
    3fde:   2104        movs r1, #4
    3fe0:   e03f        b.n 0x4062
    3fe2:   f8cb 8028   str.w r8, [fp, #40]   ; 0x28
    3fe6:   e128        b.n 0x423a
    3fe8:   2600        movs r6, #0
    3fea:   4897        ldr r0, [pc, #604]   ; (0x4248)
    3fec:   2500        movs r5, #0
    3fee:   eb00 1806   add.w r8, r0, r6, lsl #4
    3ff2:   4896        ldr r0, [pc, #600]   ; (0x424c)
    3ff4:   f240 37e9   movw r7, #1001   ; 0x3e9
    3ff8:   eb00 1906   add.w r9, r0, r6, lsl #4
    3ffc:   3090        adds r0, #144   ; 0x90
    3ffe:   eb00 1a06   add.w sl, r0, r6, lsl #4
    4002:   f7fe fec7   bl 0x2d94               ; call rand()
    4006:   fb90 f1f7   sdiv r1, r0, r7
    400a:   fb07 0011   mls r0, r7, r1, r0
    400e:   b280        uxth r0, r0
    4010:   ebc0 4200   rsb r2, r0, r0, lsl #16
    4014:   f44f 717a   mov.w r1, #1000   ; 0x3e8
    4018:   fbb2 f1f1   udiv r1, r2, r1
    401c:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    4020:   4351        muls r1, r2
    4022:   f64f 72ff   movw r2, #65535   ; 0xffff
    4026:   fbb1 f1f2   udiv r1, r1, r2
    402a:   f828 1015   strh.w r1, [r8, r5, lsl #1]
    402e:   f829 0015   strh.w r0, [r9, r5, lsl #1]
    4032:   f7fe feaf   bl 0x2d94               ; call rand()
    4036:   fb90 f1f7   sdiv r1, r0, r7
    403a:   fb07 0011   mls r0, r7, r1, r0
    403e:   f82a 0015   strh.w r0, [sl, r5, lsl #1]
    4042:   1c6d        adds r5, r5, #1
    4044:   b2ed        uxtb r5, r5
    4046:   2d08        cmp r5, #8
    4048:   d3db        bcc.n 0x4002
    404a:   1c76        adds r6, r6, #1
    404c:   b2f6        uxtb r6, r6
    404e:   2e09        cmp r6, #9
    4050:   d3cb        bcc.n 0x3fea
    4052:   497c        ldr r1, [pc, #496]   ; (0x4244)
    4054:   f8cb 402c   str.w r4, [fp, #44]   ; 0x2c
    4058:   3980        subs r1, #128   ; 0x80
    405a:   f881 4038   strb.w r4, [r1, #56]   ; 0x38
    405e:   f44f 61fa   mov.w r1, #2000   ; 0x7d0
    4062:   f8cb 1028   str.w r1, [fp, #40]   ; 0x28
    4066:   e0e8        b.n 0x423a
    4068:   4876        ldr r0, [pc, #472]   ; (0x4244)
    406a:   e9cb 840a   strd r8, r4, [fp, #40]   ; 0x28
    406e:   3880        subs r0, #128   ; 0x80
    4070:   2100        movs r1, #0
    4072:   f880 4038   strb.w r4, [r0, #56]   ; 0x38
    4076:   f8b0 0048   ldrh.w r0, [r0, #72]   ; 0x48
    407a:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    407e:   ebc0 4000   rsb r0, r0, r0, lsl #16
    4082:   fbb0 f0f9   udiv r0, r0, r9
    4086:   4350        muls r0, r2
    4088:   fbb0 f0fa   udiv r0, r0, sl
    408c:   fa1f f880   uxth.w r8, r0
    4090:   2000        movs r0, #0
    4092:   eb03 1601   add.w r6, r3, r1, lsl #4
    4096:   eb05 1201   add.w r2, r5, r1, lsl #4
    409a:   eb07 1c01   add.w ip, r7, r1, lsl #4
    409e:   f826 8010   strh.w r8, [r6, r0, lsl #1]
    40a2:   f822 4010   strh.w r4, [r2, r0, lsl #1]
    40a6:   f82c 4010   strh.w r4, [ip, r0, lsl #1]
    40aa:   1c40        adds r0, r0, #1
    40ac:   b2c0        uxtb r0, r0
    40ae:   2808        cmp r0, #8
    40b0:   d3f5        bcc.n 0x409e
    40b2:   1c49        adds r1, r1, #1
    40b4:   b2c9        uxtb r1, r1
    40b6:   2909        cmp r1, #9
    40b8:   d3ea        bcc.n 0x4090
    40ba:   e0be        b.n 0x423a
    40bc:   4e63        ldr r6, [pc, #396]   ; (0x424c)
    40be:   f44f 73fa   mov.w r3, #500   ; 0x1f4
    40c2:   3e3c        subs r6, #60   ; 0x3c
    40c4:   f44f 7796   mov.w r7, #300   ; 0x12c
    40c8:   8033        strh r3, [r6, #0]
    40ca:   8071        strh r1, [r6, #2]
    40cc:   80b7        strh r7, [r6, #4]
    40ce:   f44f 782f   mov.w r8, #700   ; 0x2bc
    40d2:   f8a6 8006   strh.w r8, [r6, #6]
    40d6:   f44f 7c61   mov.w ip, #900   ; 0x384
    40da:   f106 0428   add.w r4, r6, #40   ; 0x28
    40de:   f8a6 c008   strh.w ip, [r6, #8]
    40e2:   2000        movs r0, #0
    40e4:   7020        strb r0, [r4, #0]
    40e6:   7060        strb r0, [r4, #1]
    40e8:   2201        movs r2, #1
    40ea:   70a2        strb r2, [r4, #2]
    40ec:   70e2        strb r2, [r4, #3]
    40ee:   f1a4 0514   sub.w r5, r4, #20
    40f2:   7120        strb r0, [r4, #4]
    40f4:   802b        strh r3, [r5, #0]
    40f6:   f8a5 c002   strh.w ip, [r5, #2]
    40fa:   f8a5 8004   strh.w r8, [r5, #4]
    40fe:   80ef        strh r7, [r5, #6]
    4100:   8129        strh r1, [r5, #8]
    4102:   f104 010a   add.w r1, r4, #10
    4106:   2300        movs r3, #0
    4108:   700a        strb r2, [r1, #0]
    410a:   704a        strb r2, [r1, #1]
    410c:   7088        strb r0, [r1, #2]
    410e:   70c8        strb r0, [r1, #3]
    4110:   710a        strb r2, [r1, #4]
    4112:   494d        ldr r1, [pc, #308]   ; (0x4248)
    4114:   4a4e        ldr r2, [pc, #312]   ; (0x4250)
    4116:   46ce        mov lr, r9
    4118:   4656        mov r6, sl
    411a:   4c4a        ldr r4, [pc, #296]   ; (0x4244)
    411c:   2000        movs r0, #0
    411e:   f8df a12c   ldr.w sl, [pc, #300]   ; 0x424c
    4122:   34ad        adds r4, #173   ; 0xad
    4124:   f1aa 0a3c   sub.w sl, sl, #60   ; 0x3c
    4128:   eb04 09c3   add.w r9, r4, r3, lsl #3
    412c:   f44f 78e1   mov.w r8, #450   ; 0x1c2
    4130:   f819 4000   ldrb.w r4, [r9, r0]
    4134:   1c40        adds r0, r0, #1
    4136:   2808        cmp r0, #8
    4138:   f83a 7014   ldrh.w r7, [sl, r4, lsl #1]
    413c:   ebc7 4c07   rsb ip, r7, r7, lsl #16
    4140:   fbbc fcfe   udiv ip, ip, lr
    4144:   fb0c fc08   mul.w ip, ip, r8
    4148:   fbbc fcf6   udiv ip, ip, r6
    414c:   f821 cb02   strh.w ip, [r1], #2
    4150:   f835 4014   ldrh.w r4, [r5, r4, lsl #1]
    4154:   ebc4 4404   rsb r4, r4, r4, lsl #16
    4158:   fbb4 f4fe   udiv r4, r4, lr
    415c:   fb04 f408   mul.w r4, r4, r8
    4160:   fbb4 f4f6   udiv r4, r4, r6
    4164:   f822 4b02   strh.w r4, [r2], #2
    4168:   d3e0        bcc.n 0x412c
    416a:   1c5b        adds r3, r3, #1
    416c:   2b09        cmp r3, #9
    416e:   d3d4        bcc.n 0x411a
    4170:   2000        movs r0, #0
    4172:   2201        movs r2, #1
    4174:   4933        ldr r1, [pc, #204]   ; (0x4244)
    4176:   e9cb 200a   strd r2, r0, [fp, #40]   ; 0x28
    417a:   3980        subs r1, #128   ; 0x80
    417c:   f881 0038   strb.w r0, [r1, #56]   ; 0x38
    4180:   e05b        b.n 0x423a
    4182:   f8df 80c0   ldr.w r8, [pc, #192]   ; 0x4244
    4186:   2100        movs r1, #0
    4188:   f1a8 0880   sub.w r8, r8, #128   ; 0x80
    418c:   f898 2006   ldrb.w r2, [r8, #6]
    4190:   2000        movs r0, #0
    4192:   f898 6009   ldrb.w r6, [r8, #9]
    4196:   46c4        mov ip, r8
    4198:   b16e        cbz r6, 0x41b6
    419a:   b162        cbz r2, 0x41b6
    419c:   f89c 6009   ldrb.w r6, [ip, #9]
    41a0:   2e01        cmp r6, #1
    41a2:   d00a        beq.n 0x41ba
    41a4:   2a01        cmp r2, #1
    41a6:   d008        beq.n 0x41ba
    41a8:   f89c 6009   ldrb.w r6, [ip, #9]
    41ac:   2e02        cmp r6, #2
    41ae:   d018        beq.n 0x41e2
    41b0:   e028        b.n 0x4204
    41b2:   e03a        b.n 0x422a
    41b4:   e02f        b.n 0x4216
    41b6:   4e27        ldr r6, [pc, #156]   ; (0x4254)
    41b8:   e000        b.n 0x41bc
    41ba:   4e27        ldr r6, [pc, #156]   ; (0x4258)
    41bc:   eb06 1641   add.w r6, r6, r1, lsl #5
    41c0:   f836 6020   ldrh.w r6, [r6, r0, lsl #2]
    41c4:   ebc6 4c06   rsb ip, r6, r6, lsl #16
    41c8:   fbbc f6f9   udiv r6, ip, r9
    41cc:   f44f 7ce1   mov.w ip, #450   ; 0x1c2
    41d0:   fb06 f60c   mul.w r6, r6, ip
    41d4:   fbb6 f6fa   udiv r6, r6, sl
    41d8:   eb03 1c01   add.w ip, r3, r1, lsl #4
    41dc:   f82c 6010   strh.w r6, [ip, r0, lsl #1]
    41e0:   e008        b.n 0x41f4
    41e2:   eb03 1601   add.w r6, r3, r1, lsl #4
    41e6:   f826 4010   strh.w r4, [r6, r0, lsl #1]
    41ea:   4e19        ldr r6, [pc, #100]   ; (0x4250)
    41ec:   eb06 1601   add.w r6, r6, r1, lsl #4
    41f0:   f826 4010   strh.w r4, [r6, r0, lsl #1]
    41f4:   eb05 1601   add.w r6, r5, r1, lsl #4
    41f8:   f826 4010   strh.w r4, [r6, r0, lsl #1]
    41fc:   eb07 1601   add.w r6, r7, r1, lsl #4
    4200:   f826 4010   strh.w r4, [r6, r0, lsl #1]
    4204:   1c40        adds r0, r0, #1
    4206:   b2c0        uxtb r0, r0
    4208:   2808        cmp r0, #8
    420a:   d3c2        bcc.n 0x4192
    420c:   1c49        adds r1, r1, #1
    420e:   b2c9        uxtb r1, r1
    4210:   2909        cmp r1, #9
    4212:   d3bd        bcc.n 0x4190
    4214:   e011        b.n 0x423a
    4216:   4d0b        ldr r5, [pc, #44]   ; (0x4244)
    4218:   e9cb 140a   strd r1, r4, [fp, #40]   ; 0x28
    421c:   3d4f        subs r5, #79   ; 0x4f
    421e:   71ec        strb r4, [r5, #7]
    4220:   f001 f874   bl 0x530c               ; call function_e_41
    4224:   2001        movs r0, #1
    4226:   7028        strb r0, [r5, #0]
    4228:   e007        b.n 0x423a
    422a:   4806        ldr r0, [pc, #24]   ; (0x4244)
    422c:   e9cb 140a   strd r1, r4, [fp, #40]   ; 0x28
    4230:   3880        subs r0, #128   ; 0x80
    4232:   f880 4038   strb.w r4, [r0, #56]   ; 0x38
    4236:   f001 f869   bl 0x530c               ; call function_e_41
    423a:   e8bd 5ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    423e:   f004 b99f   b.w 0x8580                  ; call function_e_1
    4242:   0000

  0x4244:   0x200000d8  ; pointer_15
  0x4248:   0x20002e2c
  0x424c:   0x20000b9a
  0x4250:   0x20002ebc
  0x4254:   0x2000091e
  0x4258:   0x20000a3e

function_e_19:
  0x425c:   e92d 5ffc   stmdb sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4260:   f8df b378   ldr.w fp, [pc, #888]   ; 0x45dc
    4264:   2401        movs r4, #1
    4266:   f10b 011c   add.w r1, fp, #28
    426a:   f89b 2039   ldrb.w r2, [fp, #57]   ; 0x39
    426e:   8e4e        ldrh r6, [r1, #50]   ; 0x32
    4270:   8e8d        ldrh r5, [r1, #52]   ; 0x34
    4272:   1c70        adds r0, r6, #1
    4274:   fa1f fa80   uxth.w sl, r0
    4278:   1e70        subs r0, r6, #1
    427a:   b287        uxth r7, r0
    427c:   1c68        adds r0, r5, #1
    427e:   b280        uxth r0, r0
    4280:   9000        str r0, [sp, #0]
    4282:   1e68        subs r0, r5, #1
    4284:   b280        uxth r0, r0
    4286:   9001        str r0, [sp, #4]
    4288:   7f88        ldrb r0, [r1, #30]
    428a:   f811 3c15   ldrb.w r3, [r1, #-21]
    428e:   1e92        subs r2, r2, #2
    4290:   2100        movs r1, #0
    4292:   f8df 934c   ldr.w r9, [pc, #844]   ; 0x45e0
    4296:   f44f 787a   mov.w r8, #1000   ; 0x3e8
    429a:   f64f 7eff   movw lr, #65535   ; 0xffff
    429e:   2a0a        cmp r2, #10
    42a0:   d25e        bcs.n 0x4360
    42a2:   e8df f002   tbb [pc, r2]
            c6
            5e
            5d
            fe
            fd
            5d
            5d
            5d
            05
            fc
    42b0:   465a        mov r2, fp
    42b2:   b113        cbz r3, 0x42ba
    42b4:   2b01        cmp r3, #1
    42b6:   d009        beq.n 0x42cc
    42b8:   e012        b.n 0x42e0
    42ba:   b108        cbz r0, 0x42c0
    42bc:   2802        cmp r0, #2
    42be:   d10f        bne.n 0x42e0
    42c0:   f8a2 a04e   strh.w sl, [r2, #78]   ; 0x4e
    42c4:   45c2        cmp sl, r8
    42c6:   d30b        bcc.n 0x42e0
    42c8:   71d4        strb r4, [r2, #7]
    42ca:   e009        b.n 0x42e0
    42cc:   b108        cbz r0, 0x42d2
    42ce:   2802        cmp r0, #2
    42d0:   d106        bne.n 0x42e0
    42d2:   f8a2 704e   strh.w r7, [r2, #78]   ; 0x4e
    42d6:   b91f        cbnz r7, 0x42e0
    42d8:   71d1        strb r1, [r2, #7]
    42da:   b908        cbnz r0, 0x42e0
    42dc:   f882 403a   strb.w r4, [r2, #58]   ; 0x3a
    42e0:   7a10        ldrb r0, [r2, #8]
    42e2:   b110        cbz r0, 0x42ea
    42e4:   2801        cmp r0, #1
    42e6:   d00d        beq.n 0x4304
    42e8:   e01f        b.n 0x432a
    42ea:   f892 003a   ldrb.w r0, [r2, #58]   ; 0x3a
    42ee:   2801        cmp r0, #1
    42f0:   d001        beq.n 0x42f6
    42f2:   2802        cmp r0, #2
    42f4:   d119        bne.n 0x432a
    42f6:   9800        ldr r0, [sp, #0]
    42f8:   f8a2 0050   strh.w r0, [r2, #80]   ; 0x50
    42fc:   4540        cmp r0, r8
    42fe:   d314        bcc.n 0x432a
    4300:   7214        strb r4, [r2, #8]
    4302:   e012        b.n 0x432a
    4304:   f892 003a   ldrb.w r0, [r2, #58]   ; 0x3a
    4308:   2801        cmp r0, #1
    430a:   d001        beq.n 0x4310
    430c:   2802        cmp r0, #2
    430e:   d10c        bne.n 0x432a
    4310:   9b01        ldr r3, [sp, #4]
    4312:   f8a2 3050   strh.w r3, [r2, #80]   ; 0x50
    4316:   b943        cbnz r3, 0x432a
    4318:   7211        strb r1, [r2, #8]
    431a:   1c40        adds r0, r0, #1
    431c:   2103        movs r1, #3
    431e:   fbb0 f3f1   udiv r3, r0, r1
    4322:   fb01 0013   mls r0, r1, r3, r0
    4326:   f882 003a   strb.w r0, [r2, #58]   ; 0x3a
    432a:   f8bb 004e   ldrh.w r0, [fp, #78]   ; 0x4e
    432e:   2100        movs r1, #0
    4330:   ebc0 4000   rsb r0, r0, r0, lsl #16
    4334:   fbb0 f0f8   udiv r0, r0, r8
    4338:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    433c:   4350        muls r0, r2
    433e:   fbb0 f0fe   udiv r0, r0, lr
    4342:   b282        uxth r2, r0
    4344:   464c        mov r4, r9
    4346:   2000        movs r0, #0
    4348:   eb04 1301   add.w r3, r4, r1, lsl #4
    434c:   f823 2010   strh.w r2, [r3, r0, lsl #1]
    4350:   1c40        adds r0, r0, #1
    4352:   b2c0        uxtb r0, r0
    4354:   2808        cmp r0, #8
    4356:   d3f9        bcc.n 0x434c
    4358:   1c49        adds r1, r1, #1
    435a:   b2c9        uxtb r1, r1
    435c:   2909        cmp r1, #9
    435e:   d3f2        bcc.n 0x4346
    4360:   e124        b.n 0x45ac
    4362:   465a        mov r2, fp
    4364:   f04f 0c02   mov.w ip, #2
    4368:   f44f 7bfa   mov.w fp, #500   ; 0x1f4
    436c:   2806        cmp r0, #6
    436e:   d222        bcs.n 0x43b6
    4370:   e8df f000   tbb [pc, r0]
            03
            09
            21
            0f
            18
            1f
    437a:   71d1        strb r1, [r2, #7]
    437c:   f882 c008   strb.w ip, [r2, #8]
    4380:   f882 403a   strb.w r4, [r2, #58]   ; 0x3a
    4384:   e01e        b.n 0x43c4
    4386:   455e        cmp r6, fp
    4388:   d115        bne.n 0x43b6
    438a:   7211        strb r1, [r2, #8]
    438c:   f882 c03a   strb.w ip, [r2, #58]   ; 0x3a
    4390:   e011        b.n 0x43b6
    4392:   2d01        cmp r5, #1
    4394:   d10f        bne.n 0x43b6
    4396:   f882 c007   strb.w ip, [r2, #7]
    439a:   7211        strb r1, [r2, #8]
    439c:   2004        movs r0, #4
    439e:   f882 003a   strb.w r0, [r2, #58]   ; 0x3a
    43a2:   e01e        b.n 0x43e2
    43a4:   455d        cmp r5, fp
    43a6:   d106        bne.n 0x43b6
    43a8:   71d1        strb r1, [r2, #7]
    43aa:   2005        movs r0, #5
    43ac:   f882 003a   strb.w r0, [r2, #58]   ; 0x3a
    43b0:   e008        b.n 0x43c4
    43b2:   2e01        cmp r6, #1
    43b4:   d003        beq.n 0x43be
    43b6:   b12b        cbz r3, 0x43c4
    43b8:   2b01        cmp r3, #1
    43ba:   d009        beq.n 0x43d0
    43bc:   e00c        b.n 0x43d8
    43be:   71d1        strb r1, [r2, #7]
    43c0:   f882 103a   strb.w r1, [r2, #58]   ; 0x3a
    43c4:   f8a2 a04e   strh.w sl, [r2, #78]   ; 0x4e
    43c8:   45c2        cmp sl, r8
    43ca:   d305        bcc.n 0x43d8
    43cc:   71d4        strb r4, [r2, #7]
    43ce:   e003        b.n 0x43d8
    43d0:   f8a2 704e   strh.w r7, [r2, #78]   ; 0x4e
    43d4:   b907        cbnz r7, 0x43d8
    43d6:   71d1        strb r1, [r2, #7]
    43d8:   7a10        ldrb r0, [r2, #8]
    43da:   b110        cbz r0, 0x43e2
    43dc:   2801        cmp r0, #1
    43de:   d007        beq.n 0x43f0
    43e0:   e00b        b.n 0x43fa
    43e2:   9800        ldr r0, [sp, #0]
    43e4:   f8a2 0050   strh.w r0, [r2, #80]   ; 0x50
    43e8:   4540        cmp r0, r8
    43ea:   d306        bcc.n 0x43fa
    43ec:   7214        strb r4, [r2, #8]
    43ee:   e004        b.n 0x43fa
    43f0:   9801        ldr r0, [sp, #4]
    43f2:   f8a2 0050   strh.w r0, [r2, #80]   ; 0x50
    43f6:   b900        cbnz r0, 0x43fa
    43f8:   7211        strb r1, [r2, #8]
    43fa:   f8b2 004e   ldrh.w r0, [r2, #78]   ; 0x4e
    43fe:   2100        movs r1, #0
    4400:   ebc0 4000   rsb r0, r0, r0, lsl #16
    4404:   fbb0 f0f8   udiv r0, r0, r8
    4408:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    440c:   4350        muls r0, r2
    440e:   fbb0 f0fe   udiv r0, r0, lr
    4412:   b282        uxth r2, r0
    4414:   464c        mov r4, r9
    4416:   2000        movs r0, #0
    4418:   eb04 1301   add.w r3, r4, r1, lsl #4
    441c:   f823 2010   strh.w r2, [r3, r0, lsl #1]
    4420:   1c40        adds r0, r0, #1
    4422:   b2c0        uxtb r0, r0
    4424:   2808        cmp r0, #8
    4426:   d3f9        bcc.n 0x441c
    4428:   1c49        adds r1, r1, #1
    442a:   b2c9        uxtb r1, r1
    442c:   2909        cmp r1, #9
    442e:   d3f2        bcc.n 0x4416
    4430:   e0bc        b.n 0x45ac
    4432:   2100        movs r1, #0
    4434:   486b        ldr r0, [pc, #428]   ; (0x45e4)
    4436:   4a6c        ldr r2, [pc, #432]   ; (0x45e8)
    4438:   4408        add r0, r1
    443a:   2301        movs r3, #1
    443c:   f890 a014   ldrb.w sl, [r0, #20]
    4440:   2000        movs r0, #0
    4442:   eb02 1401   add.w r4, r2, r1, lsl #4
    4446:   3290        adds r2, #144   ; 0x90
    4448:   eb02 1501   add.w r5, r2, r1, lsl #4
    444c:   ea1a 0f03   tst.w sl, r3
    4450:   d033        beq.n 0x44ba
    4452:   f934 2010   ldrsh.w r2, [r4, r0, lsl #1]
    4456:   f935 c010   ldrsh.w ip, [r5, r0, lsl #1]
    445a:   2a00        cmp r2, #0
    445c:   dd13        ble.n 0x4486
    445e:   1e52        subs r2, r2, #1
    4460:   b212        sxth r2, r2
    4462:   2a00        cmp r2, #0
    4464:   da00        bge.n 0x4468
    4466:   2200        movs r2, #0
    4468:   ebc2 4602   rsb r6, r2, r2, lsl #16
    446c:   fbb6 f6f8   udiv r6, r6, r8
    4470:   f44f 77e1   mov.w r7, #450   ; 0x1c2
    4474:   437e        muls r6, r7
    4476:   fbb6 f6fe   udiv r6, r6, lr
    447a:   eb09 1701   add.w r7, r9, r1, lsl #4
    447e:   f827 6010   strh.w r6, [r7, r0, lsl #1]
    4482:   f824 2010   strh.w r2, [r4, r0, lsl #1]
    4486:   f1bc 0f00   cmp.w ip, #0
    448a:   dd07        ble.n 0x449c
    448c:   f1ac 0201   sub.w r2, ip, #1
    4490:   b212        sxth r2, r2
    4492:   2a00        cmp r2, #0
    4494:   da00        bge.n 0x4498
    4496:   2200        movs r2, #0
    4498:   f825 2010   strh.w r2, [r5, r0, lsl #1]
    449c:   e002        b.n 0x44a4
    449e:   e017        b.n 0x44d0
    44a0:   e06d        b.n 0x457e
    44a2:   e03b        b.n 0x451c
    44a4:   065a        lsls r2, r3, #25
    44a6:   1c40        adds r0, r0, #1
    44a8:   0e13        lsrs r3, r2, #24
    44aa:   b2c0        uxtb r0, r0
    44ac:   2808        cmp r0, #8
    44ae:   d3cd        bcc.n 0x444c
    44b0:   1c49        adds r1, r1, #1
    44b2:   b2c9        uxtb r1, r1
    44b4:   2909        cmp r1, #9
    44b6:   d3bd        bcc.n 0x4434
    44b8:   e078        b.n 0x45ac
    44ba:   eb09 1601   add.w r6, r9, r1, lsl #4
    44be:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    44c2:   f826 2010   strh.w r2, [r6, r0, lsl #1]
    44c6:   f824 8010   strh.w r8, [r4, r0, lsl #1]
    44ca:   f8bb 204a   ldrh.w r2, [fp, #74]   ; 0x4a
    44ce:   e7e3        b.n 0x4498
    44d0:   2500        movs r5, #0
    44d2:   4677        mov r7, lr
    44d4:   f240 3be9   movw fp, #1001   ; 0x3e9
    44d8:   46ca        mov sl, r9
    44da:   2400        movs r4, #0
    44dc:   46d9        mov r9, fp
    44de:   eb0a 1605   add.w r6, sl, r5, lsl #4
    44e2:   f7fe fc57   bl 0x2d94               ; call rand()
    44e6:   fb90 f2f9   sdiv r2, r0, r9
    44ea:   fb09 0012   mls r0, r9, r2, r0
    44ee:   b280        uxth r0, r0
    44f0:   ebc0 4000   rsb r0, r0, r0, lsl #16
    44f4:   fbb0 f0f8   udiv r0, r0, r8
    44f8:   f44f 71e1   mov.w r1, #450   ; 0x1c2
    44fc:   4348        muls r0, r1
    44fe:   fbb0 f0f7   udiv r0, r0, r7
    4502:   f826 0014   strh.w r0, [r6, r4, lsl #1]
    4506:   f7fe fc45   bl 0x2d94               ; call rand()
    450a:   1c64        adds r4, r4, #1
    450c:   b2e4        uxtb r4, r4
    450e:   2c08        cmp r4, #8
    4510:   d3e7        bcc.n 0x44e2
    4512:   1c6d        adds r5, r5, #1
    4514:   b2ed        uxtb r5, r5
    4516:   2d09        cmp r5, #9
    4518:   d3df        bcc.n 0x44da
    451a:   e047        b.n 0x45ac
    451c:   f000 fef6   bl 0x530c               ; call function_e_41
    4520:   f8df a0c8   ldr.w sl, [pc, #200]   ; 0x45ec
    4524:   f89b 2031   ldrb.w r2, [fp, #49]   ; 0x31
    4528:   2100        movs r1, #0
    452a:   46d8        mov r8, fp
    452c:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    4530:   46cc        mov ip, r9
    4532:   2000        movs r0, #0
    4534:   eb0a 06c1   add.w r6, sl, r1, lsl #3
    4538:   eb0c 1501   add.w r5, ip, r1, lsl #4
    453c:   5c37        ldrb r7, [r6, r0]
    453e:   4297        cmp r7, r2
    4540:   d101        bne.n 0x4546
    4542:   f825 3010   strh.w r3, [r5, r0, lsl #1]
    4546:   1c40        adds r0, r0, #1
    4548:   b2c0        uxtb r0, r0
    454a:   2808        cmp r0, #8
    454c:   d3f6        bcc.n 0x453c
    454e:   1c49        adds r1, r1, #1
    4550:   b2c9        uxtb r1, r1
    4552:   2909        cmp r1, #9
    4554:   d3ed        bcc.n 0x4532
    4556:   4826        ldr r0, [pc, #152]   ; (0x45f0)
    4558:   2a3a        cmp r2, #58   ; 0x3a
    455a:   d002        beq.n 0x4562
    455c:   2a3d        cmp r2, #61   ; 0x3d
    455e:   d003        beq.n 0x4568
    4560:   e004        b.n 0x456c
    4562:   f8a0 3072   strh.w r3, [r0, #114]   ; 0x72
    4566:   e001        b.n 0x456c
    4568:   f8a0 3084   strh.w r3, [r0, #132]   ; 0x84
    456c:   1c52        adds r2, r2, #1
    456e:   b2d0        uxtb r0, r2
    4570:   f888 0031   strb.w r0, [r8, #49]   ; 0x31
    4574:   2841        cmp r0, #65   ; 0x41
    4576:   d919        bls.n 0x45ac
    4578:   f88b 4031   strb.w r4, [fp, #49]   ; 0x31
    457c:   e016        b.n 0x45ac
    457e:   f89b 201d   ldrb.w r2, [fp, #29]
    4582:   4658        mov r0, fp
    4584:   2a01        cmp r2, #1
    4586:   d015        beq.n 0x45b4
    4588:   f8a9 1002   strh.w r1, [r9, #2]
    458c:   7f82        ldrb r2, [r0, #30]
    458e:   2a01        cmp r2, #1
    4590:   d015        beq.n 0x45be
    4592:   f8a9 1004   strh.w r1, [r9, #4]
    4596:   7fc2        ldrb r2, [r0, #31]
    4598:   2a01        cmp r2, #1
    459a:   d015        beq.n 0x45c8
    459c:   f8a9 1006   strh.w r1, [r9, #6]
    45a0:   f89b 0020   ldrb.w r0, [fp, #32]
    45a4:   2801        cmp r0, #1
    45a6:   d014        beq.n 0x45d2
    45a8:   f8a9 1008   strh.w r1, [r9, #8]
    45ac:   e8bd 5ffc   ldmia.w sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

    45b0:   f003 bfe6   b.w 0x8580              ; call function_e_1
    45b4:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    45b8:   f8a9 2002   strh.w r2, [r9, #2]
    45bc:   e7e6        b.n 0x458c
    45be:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    45c2:   f8a9 3004   strh.w r3, [r9, #4]
    45c6:   e7e6        b.n 0x4596
    45c8:   f44f 72e1   mov.w r2, #450   ; 0x1c2
    45cc:   f8a9 2006   strh.w r2, [r9, #6]
    45d0:   e7e6        b.n 0x45a0
    45d2:   f44f 70e1   mov.w r0, #450   ; 0x1c2
    45d6:   f8a9 0008   strh.w r0, [r9, #8]
    45da:   e7e7        b.n 0x45ac

  0x45dc:   0x20000058  ; variable_sram_e_1
  0x45e0:   0x20002e2c
  0x45e4:   0x20002de4  ; pointer_34
  0x45e8:   0x20000b9a
  0x45ec:   0x8e80      ; data_10
  0x45f0:   0x20002ebc

function_e_20:
  0x45f4:   b510        push {r4, lr}
    45f6:   4907        ldr r1, [pc, #28]   ; (0x4614)
    45f8:   b128        cbz r0, 0x4606
    45fa:   2001        movs r0, #1
    45fc:   7148        strb r0, [r1, #5]
    45fe:   f003 ffbf   bl 0x8580                   ; call function_e_1
    4602:   2001        movs r0, #1
    4604:   bd10        pop {r4, pc}
    4606:   2000        movs r0, #0
    4608:   7148        strb r0, [r1, #5]
    460a:   f003 ffb9   bl 0x8580                   ; call function_e_1
    460e:   2000        movs r0, #0
    4610:   bd10        pop {r4, pc}
    4612:   0000

  0x4614:   0x20000058  ; variable_sram_e_1

nop_3:
  0x4618:   4770        bx lr

nop_2:
  0x461a:   4770        bx lr

function_37:
    ; r0 =
  0x461c:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    4620:   4604        mov r4, r0              ; r4 = r0
    4622:   f7ff f8db   bl 0x37dc               ; call nop_1
    4626:   4620        mov r0, r4              ; r0 = r4
    4628:   f000 fe6e   bl 0x5308               ; call jump_2
    462c:   4620        mov r0, r4              ; r0 = r4
    462e:   f001 fe8f   bl 0x6350               ; call function_e_49

    4632:   f44f 7180   mov.w r1, #256          ; r2 = 0x100
    4636:   4821        ldr r0, [pc, #132]      ; r0 = (0x46bc) GPIO C
    4638:   010d        lsls r5, r1, #4         ; r5 = r1 << 4 (0x10)
    463a:   4e21        ldr r6, [pc, #132]      ; r6 = (0x46c0) GPIO A
    463c:   014f        lsls r7, r1, #5         ; r7 = r1 << 5 (0x8)
    463e:   b324        cbz r4, 0x468a          ; branch if r4 == 0

    4640:   2200        movs r2, #0             ; r2 = 0
    4642:   4688        mov r8, r1              ; r8 = r1
    4644:   4604        mov r4, r0              ; r4 = r0
    4646:   f7fe ff81   bl 0x354c               ; call gpio_set_open_drain

    464a:   2201        movs r2, #1             ; r2 = 1
    464c:   4641        mov r1, r8              ; r1 = r8
    464e:   4620        mov r0, r4              ; r0 = r4 (GPIO C)
    4650:   f7fe ff6c   bl 0x352c               ; call gpio_set_output_current

    4654:   2201        movs r2, #1             ; r2 = 1
    4656:   4641        mov r1, r8              ; r1 = r8
    4658:   4620        mov r0, r4              ; r0 = r4
    465a:   f7fe ff5f   bl 0x351c               ; call gpio_set_input_output

    465e:   2201        movs r2, #1             ; r2 = 1
    4660:   4641        mov r1, r8              ; r1 = r8
    4662:   4620        mov r0, r4              ; r0 = r4
    4664:   f7fe ff90   bl 0x3588               ; call gpio_set_reset_pin

    4668:   2200        movs r2, #0             ; r2 = 0
    466a:   4629        mov r1, r5              ; r1 = r5 (0x10)
    466c:   4630        mov r0, r6              ; r0 = r6 (GPIO A)
    466e:   f7fe ff65   bl 0x353c               ; call gpio_set_input_enable

    4672:   2200        movs r2, #0             ; r2 = 0
    4674:   4639        mov r1, r7              ; r1 = r7 (0x8)
    4676:   4630        mov r0, r6              ; r0 = r6 (GPIO A)
    4678:   f7fe ff60   bl 0x353c               ; call gpio_set_input_enable

    467c:   2202        movs r2, #2             ; r2 = 2
    467e:   4629        mov r1, r5              ; r1 = r5 (0x10)
    4680:   4630        mov r0, r6              ; r0 = r6 (GPIO A)
    4682:   f7fe ff6b   bl 0x355c               ; call gpio_set_pin_pull_up_down

    4686:   2202        movs r2, #2             ; r2 = 2
    4688:   e012        b.n 0x46b0

  0x468a:   2201        movs r2, #1             ; r2 = 1
    468c:   f7fe ff5e   bl 0x354c               ; call gpio_set_open_drain

    4690:   2201        movs r2, #1             ; r2 = 1
    4692:   4629        mov r1, r5              ; r1 = r5
    4694:   4630        mov r0, r6              ; r0 = r6
    4696:   f7fe ff51   bl 0x353c               ; call gpio_set_input_enable

    469a:   2201        movs r2, #1             ; r2 = 1
    469c:   4639        mov r1, r7              ; r1 = r7
    469e:   4630        mov r0, r6              ; r0 = r6
    46a0:   f7fe ff4c   bl 0x353c               ; call gpio_set_input_enable

    46a4:   2200        movs r2, #0             ; r2 = 0
    46a6:   4629        mov r1, r5              ; r1 = r5
    46a8:   4630        mov r0, r6              ; r0 = r6
    46aa:   f7fe ff57   bl 0x355c               ; call gpio_set_pin_pull_up_down

    46ae:   2200        movs r2, #0
    46b0:   4639        mov r1, r7
    46b2:   4630        mov r0, r6
    46b4:   e8bd 41f0   ldmia.w sp!, {r4, r5, r6, r7, r8, lr}
    46b8:   f7fe bf50   b.w 0x355c              ; jump gpio_set_pin_pull_up_down

  0x46bc:   0x400b4000  ; GPIO C
  0x46c0:   0x400b0000  ; GPIO A

function_e_21:
    ; r0 =
  0x46c4:   b570        push {r4, r5, r6, lr}
    46c6:   4c33        ldr r4, [pc, #204]   ; (0x4794)
    46c8:   2500        movs r5, #0
    46ca:   f894 0030   ldrb.w r0, [r4, #48]   ; 0x30
    46ce:   b1d8        cbz r0, 0x4708
    46d0:   f894 0038   ldrb.w r0, [r4, #56]   ; 0x38
    46d4:   b118        cbz r0, 0x46de
    46d6:   f7ff fdc1   bl 0x425c                   ; call function_e_19
    46da:   f884 5038   strb.w r5, [r4, #56]   ; 0x38
    46de:   482d        ldr r0, [pc, #180]   ; (0x4794)
    46e0:   3080        adds r0, #128   ; 0x80
    46e2:   6881        ldr r1, [r0, #8]
    46e4:   f241 7270   movw r2, #6000   ; 0x1770
    46e8:   4291        cmp r1, r2
    46ea:   d909        bls.n 0x4700
    46ec:   f894 1030   ldrb.w r1, [r4, #48]   ; 0x30
    46f0:   2901        cmp r1, #1
    46f2:   d105        bne.n 0x4700
    46f4:   2102        movs r1, #2
    46f6:   f884 1030   strb.w r1, [r4, #48]   ; 0x30
    46fa:   6085        str r5, [r0, #8]
    46fc:   f004 f87e   bl 0x87fc                   ; call function_e_15
    4700:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    4704:   f001 bc08   b.w 0x5f18                  ; call function_e_46
    4708:   7aa0        ldrb r0, [r4, #10]
    470a:   2863        cmp r0, #99   ; 0x63
    470c:   d001        beq.n 0x4712
    470e:   f000 f923   bl 0x4958
    4712:   7aa0        ldrb r0, [r4, #10]
    4714:   2863        cmp r0, #99   ; 0x63
    4716:   d10b        bne.n 0x4730
    4718:   7c60        ldrb r0, [r4, #17]
    471a:   2863        cmp r0, #99   ; 0x63
    471c:   d108        bne.n 0x4730
    471e:   7b20        ldrb r0, [r4, #12]
    4720:   b940        cbnz r0, 0x4734
    4722:   7da0        ldrb r0, [r4, #22]
    4724:   b950        cbnz r0, 0x473c
    4726:   f894 0029   ldrb.w r0, [r4, #41]   ; 0x29
    472a:   b938        cbnz r0, 0x473c
    472c:   f001 fbf4   bl 0x5f18                   ; call function_e_46
    4730:   7b20        ldrb r0, [r4, #12]
    4732:   b118        cbz r0, 0x473c
    4734:   7da0        ldrb r0, [r4, #22]
    4736:   b908        cbnz r0, 0x473c
    4738:   f003 fcb4   bl 0x80a4                   ; call function_e_7
    473c:   f003 f94a   bl 0x79d4                   ; call function_e_87
    4740:   7da0        ldrb r0, [r4, #22]
    4742:   2801        cmp r0, #1
    4744:   d101        bne.n 0x474a
    4746:   f000 fe4d   bl 0x53e4                   ; call function_e_43
    474a:   7ee0        ldrb r0, [r4, #27]
    474c:   2801        cmp r0, #1
    474e:   d002        beq.n 0x4756
    4750:   7f20        ldrb r0, [r4, #28]
    4752:   2803        cmp r0, #3
    4754:   d101        bne.n 0x475a
    4756:   f003 f8df   bl 0x7918                   ; call function_e_86
    475a:   f894 0020   ldrb.w r0, [r4, #32]
    475e:   2801        cmp r0, #1
    4760:   d104        bne.n 0x476c
    4762:   7e20        ldrb r0, [r4, #24]
    4764:   b110        cbz r0, 0x476c
    4766:   f003 fe29   bl 0x83bc                   ; call function_e_14
    476a:   e009        b.n 0x4780
    476c:   f894 0029   ldrb.w r0, [r4, #41]   ; 0x29
    4770:   2814        cmp r0, #20
    4772:   d105        bne.n 0x4780
    4774:   f884 5029   strb.w r5, [r4, #41]   ; 0x29
    4778:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    477c:   f7ff fc08   bl 0x3f90                   ; call function_e_18
    4780:   f894 0038   ldrb.w r0, [r4, #56]   ; 0x38
    4784:   2800        cmp r0, #0
    4786:   d003        beq.n 0x4790
    4788:   f7ff fd68   bl 0x425c                   ; call function_e_19
    478c:   f884 5038   strb.w r5, [r4, #56]   ; 0x38
    4790:   bd70        pop {r4, r5, r6, pc}

    4792:   0000
  0x4794:   0x20000058  ; variable_sram_e_1

function_e_22:
  0x4798:   4907        ldr r1, [pc, #28]   ; (0x47b8)
    479a:   f64e 0278   movw r2, #59512   ; 0xe878
    479e:   b130        cbz r0, 0x47ae
    47a0:   6d48        ldr r0, [r1, #84]   ; 0x54
    47a2:   4310        orrs r0, r2
    47a4:   6548        str r0, [r1, #84]   ; 0x54
    47a6:   658a        str r2, [r1, #88]   ; 0x58
    47a8:   6d08        ldr r0, [r1, #80]   ; 0x50
    47aa:   4310        orrs r0, r2
    47ac:   e001        b.n 0x47b2
    47ae:   6d08        ldr r0, [r1, #80]   ; 0x50
    47b0:   4390        bics r0, r2
    47b2:   6508        str r0, [r1, #80]   ; 0x50
    47b4:   4770        bx lr

    47b6:   0000
  0x47b8:   0x40024000  ; EXTI registers

function_e_23:
  0x47bc:   b510        push {r4, lr}
    47be:   210e        movs r1, #14
    47c0:   2301        movs r3, #1
    47c2:   4a15        ldr r2, [pc, #84]   ; (0x4818)
    47c4:   ebb1 1f10   cmp.w r1, r0, lsr #4
    47c8:   d108        bne.n 0x47dc
    47ca:   f000 000f   and.w r0, r0, #15
    47ce:   2808        cmp r0, #8
    47d0:   d203        bcs.n 0x47da
    47d2:   7811        ldrb r1, [r2, #0]
    47d4:   4083        lsls r3, r0
    47d6:   4399        bics r1, r3
    47d8:   7011        strb r1, [r2, #0]
    47da:   bd10        pop {r4, pc}
    47dc:   2891        cmp r0, #145   ; 0x91
    47de:   d8fc        bhi.n 0x47da
    47e0:   2100        movs r1, #0
    47e2:   1854        adds r4, r2, r1
    47e4:   78a4        ldrb r4, [r4, #2]
    47e6:   4284        cmp r4, r0
    47e8:   d103        bne.n 0x47f2
    47ea:   440a        add r2, r1
    47ec:   2400        movs r4, #0
    47ee:   7094        strb r4, [r2, #2]
    47f0:   e003        b.n 0x47fa
    47f2:   1c49        adds r1, r1, #1
    47f4:   b2c9        uxtb r1, r1
    47f6:   2906        cmp r1, #6
    47f8:   d3f3        bcc.n 0x47e2
    47fa:   2906        cmp r1, #6
    47fc:   d1ed        bne.n 0x47da
    47fe:   08c2        lsrs r2, r0, #3
    4800:   f000 0107   and.w r1, r0, #7
    4804:   4805        ldr r0, [pc, #20]   ; (0x481c)
    4806:   461c        mov r4, r3
    4808:   4410        add r0, r2
    480a:   408b        lsls r3, r1
    480c:   7882        ldrb r2, [r0, #2]
    480e:   439a        bics r2, r3
    4810:   7082        strb r2, [r0, #2]
    4812:   4803        ldr r0, [pc, #12]   ; (0x4820)
    4814:   6144        str r4, [r0, #20]
    4816:   bd10        pop {r4, pc}

  0x4818:   0x2000003c  ; pointer_33
  0x481c:   0x2000032c  ; pointer_32
  0x4820:   0x200000d8  ; pointer_15

function_e_24:
  0x4824:   b510        push {r4, lr}
    4826:   2101        movs r1, #1
    4828:   0408        lsls r0, r1, #16
    482a:   f7fe fe13   bl 0x3454               ; call ckcu_apb1_clock_enable
    482e:   4c0a        ldr r4, [pc, #40]   ; (0x4858)
    4830:   f648 419f   movw r1, #35999   ; 0x8c9f
    4834:   4620        mov r0, r4
    4836:   f7fe fd30   bl 0x329a
    483a:   2101        movs r1, #1
    483c:   4620        mov r0, r4
    483e:   f7fe fd22   bl 0x3286
    4842:   4a06        ldr r2, [pc, #24]   ; (0x485c)
    4844:   1561        asrs r1, r4, #21
    4846:   6011        str r1, [r2, #0]
    4848:   4620        mov r0, r4
    484a:   e8bd 4010   ldmia.w sp!, {r4, lr}
    484e:   f04f 0101   mov.w r1, #1
    4852:   f7fe bd0e   b.w 0x3272
    4856:   0000        movs r0, r0

  0x4858:   40076000    ; BFTM0
  0x485c:   e000e104    ; Perphial Private Bus

function_e_25:
  0x4860:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    4864:   4d39        ldr r5, [pc, #228]   ; (0x494c)
    4866:   4e38        ldr r6, [pc, #224]   ; (0x4948)
    4868:   4c39        ldr r4, [pc, #228]   ; (0x4950)
    486a:   f815 1c08   ldrb.w r1, [r5, #-8]
    486e:   f856 2021   ldr.w r2, [r6, r1, lsl #2]
    4872:   f1a6 019c   sub.w r1, r6, #156   ; 0x9c
    4876:   f851 0020   ldr.w r0, [r1, r0, lsl #2]
    487a:   1811        adds r1, r2, r0
    487c:   1910        adds r0, r2, r4
    487e:   f44f 727c   mov.w r2, #1008   ; 0x3f0
    4882:   f000 fba1   bl 0x4fc8
    4886:   f815 0c08   ldrb.w r0, [r5, #-8]
    488a:   f8df c0c8   ldr.w ip, [pc, #200]   ; 0x4954
    488e:   f856 0020   ldr.w r0, [r6, r0, lsl #2]
    4892:   f50c 7e90   add.w lr, ip, #288   ; 0x120
    4896:   5c21        ldrb r1, [r4, r0]
    4898:   7669        strb r1, [r5, #25]
    489a:   1c61        adds r1, r4, #1
    489c:   5c42        ldrb r2, [r0, r1]
    489e:   1c49        adds r1, r1, #1
    48a0:   5c41        ldrb r1, [r0, r1]
    48a2:   eb02 2101   add.w r1, r2, r1, lsl #8
    48a6:   84e9        strh r1, [r5, #38]   ; 0x26
    48a8:   1ce1        adds r1, r4, #3
    48aa:   5c42        ldrb r2, [r0, r1]
    48ac:   1c49        adds r1, r1, #1
    48ae:   5c41        ldrb r1, [r0, r1]
    48b0:   eb02 2101   add.w r1, r2, r1, lsl #8
    48b4:   8529        strh r1, [r5, #40]   ; 0x28
    48b6:   1d61        adds r1, r4, #5
    48b8:   5c42        ldrb r2, [r0, r1]
    48ba:   1c49        adds r1, r1, #1
    48bc:   5c41        ldrb r1, [r0, r1]
    48be:   eb02 2101   add.w r1, r2, r1, lsl #8
    48c2:   8569        strh r1, [r5, #42]   ; 0x2a
    48c4:   1de1        adds r1, r4, #7
    48c6:   5c42        ldrb r2, [r0, r1]
    48c8:   1c49        adds r1, r1, #1
    48ca:   5c41        ldrb r1, [r0, r1]
    48cc:   eb02 2101   add.w r1, r2, r1, lsl #8
    48d0:   85a9        strh r1, [r5, #44]   ; 0x2c
    48d2:   f104 0109   add.w r1, r4, #9
    48d6:   2200        movs r2, #0
    48d8:   5c41        ldrb r1, [r0, r1]
    48da:   f805 1c1a   strb.w r1, [r5, #-26]
    48de:   f104 010a   add.w r1, r4, #10
    48e2:   1903        adds r3, r0, r4
    48e4:   5c41        ldrb r1, [r0, r1]
    48e6:   7769        strb r1, [r5, #29]
    48e8:   f104 010b   add.w r1, r4, #11
    48ec:   5c41        ldrb r1, [r0, r1]
    48ee:   77a9        strb r1, [r5, #30]
    48f0:   2000        movs r0, #0
    48f2:   eb0e 1442   add.w r4, lr, r2, lsl #5
    48f6:   eb0c 1542   add.w r5, ip, r2, lsl #5
    48fa:   eb00 01c2   add.w r1, r0, r2, lsl #3
    48fe:   0089        lsls r1, r1, #2
    4900:   f101 060c   add.w r6, r1, #12
    4904:   441e        add r6, r3
    4906:   eb05 0780   add.w r7, r5, r0, lsl #2
    490a:   8836        ldrh r6, [r6, #0]
    490c:   f825 6020   strh.w r6, [r5, r0, lsl #2]
    4910:   f101 060e   add.w r6, r1, #14
    4914:   441e        add r6, r3
    4916:   8836        ldrh r6, [r6, #0]
    4918:   807e        strh r6, [r7, #2]
    491a:   f201 162d   addw r6, r1, #301   ; 0x12d
    491e:   441e        add r6, r3
    4920:   f201 112f   addw r1, r1, #303   ; 0x12f
    4924:   8836        ldrh r6, [r6, #0]
    4926:   f824 6020   strh.w r6, [r4, r0, lsl #2]
    492a:   eb04 0680   add.w r6, r4, r0, lsl #2
    492e:   4419        add r1, r3
    4930:   1c40        adds r0, r0, #1
    4932:   8809        ldrh r1, [r1, #0]
    4934:   b2c0        uxtb r0, r0
    4936:   8071        strh r1, [r6, #2]
    4938:   2808        cmp r0, #8
    493a:   d3de        bcc.n 0x48fa
    493c:   1c52        adds r2, r2, #1
    493e:   b2d2        uxtb r2, r2
    4940:   2a09        cmp r2, #9
    4942:   d3d5        bcc.n 0x48f0
    4944:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

  0x4948:   0x8de0      ; data_12
  0x494c:   0x20000078
  0x4950:   0x20001cba
  0x4954:   0x2000091e

function_e_26:
    4958:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    495c:   4fb1        ldr r7, [pc, #708]   ; (0x4c24)
    495e:   7ab8        ldrb r0, [r7, #10]
    4960:   2805        cmp r0, #5
    4962:   d27c        bcs.n 0x4a5e
    4964:   e8df f000   tbb [pc, r0]
    4968:   0303        lsls r3, r0, #12
    496a:   0303        lsls r3, r0, #12
    496c:   00fe        lsls r6, r7, #3
    496e:   48ae        ldr r0, [pc, #696]   ; (0x4c28)
    4970:   2500        movs r5, #0
    4972:   7a01        ldrb r1, [r0, #8]
    4974:   f001 01bf   and.w r1, r1, #191   ; 0xbf
    4978:   7201        strb r1, [r0, #8]
    497a:   48ac        ldr r0, [pc, #688]   ; (0x4c2c)
    497c:   7f01        ldrb r1, [r0, #28]
    497e:   f001 01bf   and.w r1, r1, #191   ; 0xbf
    4982:   7701        strb r1, [r0, #28]
    4984:   e001        b.n 0x498a
    4986:   2d08        cmp r5, #8
    4988:   d02a        beq.n 0x49e0
    498a:   48a8        ldr r0, [pc, #672]   ; (0x4c2c)
    498c:   1941        adds r1, r0, r5
    498e:   788e        ldrb r6, [r1, #2]
    4990:   48a6        ldr r0, [pc, #664]   ; (0x4c2c)
    4992:   2400        movs r4, #0
    4994:   eb00 0b05   add.w fp, r0, r5
    4998:   f89b 0014   ldrb.w r0, [fp, #20]
    499c:   ea80 0906   eor.w r9, r0, r6
    49a0:   ea5f 70c9   movs.w r0, r9, lsl #31
    49a4:   d07e        beq.n 0x4aa4
    49a6:   2001        movs r0, #1
    49a8:   67f8        str r0, [r7, #124]   ; 0x7c
    49aa:   48a1        ldr r0, [pc, #644]   ; (0x4c30)
    49ac:   eb00 00c5   add.w r0, r0, r5, lsl #3
    49b0:   f810 a004   ldrb.w sl, [r0, r4]
    49b4:   07f0        lsls r0, r6, #31
    49b6:   d018        beq.n 0x49ea
    49b8:   f897 103d   ldrb.w r1, [r7, #61]   ; 0x3d
    49bc:   eb04 00c5   add.w r0, r4, r5, lsl #3
    49c0:   4288        cmp r0, r1
    49c2:   d103        bne.n 0x49cc
    49c4:   2000        movs r0, #0
    49c6:   70b8        strb r0, [r7, #2]
    49c8:   66b8        str r0, [r7, #104]   ; 0x68
    49ca:   66f8        str r0, [r7, #108]   ; 0x6c
    49cc:   f89b 1014   ldrb.w r1, [fp, #20]
    49d0:   2001        movs r0, #1
    49d2:   40a0        lsls r0, r4
    49d4:   4041        eors r1, r0
    49d6:   f88b 1014   strb.w r1, [fp, #20]
    49da:   7ab8        ldrb r0, [r7, #10]
    49dc:   b3f0        cbz r0, 0x4a5c
    49de:   e0e2        b.n 0x4ba6
    49e0:   4892        ldr r0, [pc, #584]   ; (0x4c2c)
    49e2:   7a80        ldrb r0, [r0, #10]
    49e4:   f000 06bf   and.w r6, r0, #191   ; 0xbf
    49e8:   e7d2        b.n 0x4990
    49ea:   7ab9        ldrb r1, [r7, #10]
    49ec:   2000        movs r0, #0
    49ee:   2902        cmp r1, #2
    49f0:   d177        bne.n 0x4ae2
    49f2:   f897 203d   ldrb.w r2, [r7, #61]   ; 0x3d
    49f6:   eb04 01c5   add.w r1, r4, r5, lsl #3
    49fa:   4291        cmp r1, r2
    49fc:   d102        bne.n 0x4a04
    49fe:   2001        movs r0, #1
    4a00:   70b8        strb r0, [r7, #2]
    4a02:   e002        b.n 0x4a0a
    4a04:   78b9        ldrb r1, [r7, #2]
    4a06:   2901        cmp r1, #1
    4a08:   d115        bne.n 0x4a36
    4a0a:   2d01        cmp r5, #1
    4a0c:   d113        bne.n 0x4a36
    4a0e:   2c01        cmp r4, #1
    4a10:   d004        beq.n 0x4a1c
    4a12:   2c02        cmp r4, #2
    4a14:   d007        beq.n 0x4a26
    4a16:   2c03        cmp r4, #3
    4a18:   d008        beq.n 0x4a2c
    4a1a:   e00c        b.n 0x4a36
    4a1c:   f001 fd80   bl 0x6520                   ; call function_e_52
    4a20:   2001        movs r0, #1
    4a22:   2103        movs r1, #3
    4a24:   e006        b.n 0x4a34
    4a26:   7a79        ldrb r1, [r7, #9]
    4a28:   b119        cbz r1, 0x4a32
    4a2a:   e004        b.n 0x4a36
    4a2c:   7a79        ldrb r1, [r7, #9]
    4a2e:   2901        cmp r1, #1
    4a30:   d101        bne.n 0x4a36
    4a32:   2104        movs r1, #4
    4a34:   72b9        strb r1, [r7, #10]
    4a36:   7a79        ldrb r1, [r7, #9]
    4a38:   bb29        cbnz r1, 0x4a86
    4a3a:   7ab9        ldrb r1, [r7, #10]
    4a3c:   2904        cmp r1, #4
    4a3e:   d022        beq.n 0x4a86
    4a40:   bb08        cbnz r0, 0x4a86
    4a42:   4979        ldr r1, [pc, #484]   ; (0x4c28)
    4a44:   f8b7 2052   ldrh.w r2, [r7, #82]   ; 0x52
    4a48:   3112        adds r1, #18
    4a4a:   eb01 1145   add.w r1, r1, r5, lsl #5
    4a4e:   f831 3024   ldrh.w r3, [r1, r4, lsl #2]
    4a52:   4293        cmp r3, r2
    4a54:   d110        bne.n 0x4a78
    4a56:   eb01 0884   add.w r8, r1, r4, lsl #2
    4a5a:   e001        b.n 0x4a60
    4a5c:   e089        b.n 0x4b72
    4a5e:   e0d5        b.n 0x4c0c
    4a60:   f8b8 3002   ldrh.w r3, [r8, #2]
    4a64:   f8b7 c054   ldrh.w ip, [r7, #84]   ; 0x54
    4a68:   4563        cmp r3, ip
    4a6a:   d105        bne.n 0x4a78
    4a6c:   2200        movs r2, #0
    4a6e:   f821 2024   strh.w r2, [r1, r4, lsl #2]
    4a72:   f8a8 2002   strh.w r2, [r8, #2]
    4a76:   e006        b.n 0x4a86
    4a78:   f821 2024   strh.w r2, [r1, r4, lsl #2]
    4a7c:   eb01 0184   add.w r1, r1, r4, lsl #2
    4a80:   f8b7 2054   ldrh.w r2, [r7, #84]   ; 0x54
    4a84:   804a        strh r2, [r1, #2]
    4a86:   7a79        ldrb r1, [r7, #9]
    4a88:   2901        cmp r1, #1
    4a8a:   d125        bne.n 0x4ad8
    4a8c:   7ab9        ldrb r1, [r7, #10]
    4a8e:   2904        cmp r1, #4
    4a90:   d022        beq.n 0x4ad8
    4a92:   bb00        cbnz r0, 0x4ad6
    4a94:   4867        ldr r0, [pc, #412]   ; (0x4c34)
    4a96:   f8b7 1052   ldrh.w r1, [r7, #82]   ; 0x52
    4a9a:   eb00 1045   add.w r0, r0, r5, lsl #5
    4a9e:   f830 2024   ldrh.w r2, [r0, r4, lsl #2]
    4aa2:   e000        b.n 0x4aa6
    4aa4:   e090        b.n 0x4bc8
    4aa6:   428a        cmp r2, r1
    4aa8:   d10d        bne.n 0x4ac6
    4aaa:   eb00 0c84   add.w ip, r0, r4, lsl #2
    4aae:   f8b7 3054   ldrh.w r3, [r7, #84]   ; 0x54
    4ab2:   f8bc 2002   ldrh.w r2, [ip, #2]
    4ab6:   429a        cmp r2, r3
    4ab8:   d105        bne.n 0x4ac6
    4aba:   2100        movs r1, #0
    4abc:   f820 1024   strh.w r1, [r0, r4, lsl #2]
    4ac0:   f8ac 1002   strh.w r1, [ip, #2]
    4ac4:   e009        b.n 0x4ada
    4ac6:   f820 1024   strh.w r1, [r0, r4, lsl #2]
    4aca:   eb00 0084   add.w r0, r0, r4, lsl #2
    4ace:   f8b7 1054   ldrh.w r1, [r7, #84]   ; 0x54
    4ad2:   8041        strh r1, [r0, #2]
    4ad4:   e001        b.n 0x4ada
    4ad6:   e004        b.n 0x4ae2
    4ad8:   b918        cbnz r0, 0x4ae2
    4ada:   f897 0039   ldrb.w r0, [r7, #57]   ; 0x39
    4ade:   f7ff fa57   bl 0x3f90                   ; call function_e_18
    4ae2:   7ab8        ldrb r0, [r7, #10]
    4ae4:   2803        cmp r0, #3
    4ae6:   f47f af71   bne.w 0x49cc
    4aea:   ea55 0004   orrs.w r0, r5, r4
    4aee:   d020        beq.n 0x4b32
    4af0:   2d04        cmp r5, #4
    4af2:   d002        beq.n 0x4afa
    4af4:   2d05        cmp r5, #5
    4af6:   d004        beq.n 0x4b02
    4af8:   e005        b.n 0x4b06
    4afa:   2c06        cmp r4, #6
    4afc:   d103        bne.n 0x4b06
    4afe:   200b        movs r0, #11
    4b00:   e017        b.n 0x4b32
    4b02:   2c02        cmp r4, #2
    4b04:   d00e        beq.n 0x4b24
    4b06:   f1aa 001e   sub.w r0, sl, #30
    4b0a:   280d        cmp r0, #13
    4b0c:   f4bf af5e   bcs.w 0x49cc
    4b10:   e8df f000   tbb [pc, r0]
    4b14:   0a0a        lsrs r2, r1, #8
    4b16:   0a0a        lsrs r2, r1, #8
    4b18:   0a0a        lsrs r2, r1, #8
    4b1a:   0a0a        lsrs r2, r1, #8
    4b1c:   0a0a        lsrs r2, r1, #8
    4b1e:   0707        lsls r7, r0, #28
    4b20:   000e        movs r6, r1
    4b22:   e753        b.n 0x49cc
    4b24:   200c        movs r0, #12
    4b26:   e004        b.n 0x4b32
  0x4b28:   f1aa 001d   sub.w r0, sl, #29
    4b2c:   b2c0        uxtb r0, r0
    4b2e:   e000        b.n 0x4b32
    4b30:   200d        movs r0, #13
    4b32:   4941        ldr r1, [pc, #260]   ; (0x4c38)
    4b34:   f831 0010   ldrh.w r0, [r1, r0, lsl #1]
    4b38:   f8a7 0052   strh.w r0, [r7, #82]   ; 0x52
    4b3c:   f897 0039   ldrb.w r0, [r7, #57]   ; 0x39
    4b40:   f7ff fa26   bl 0x3f90                   ; call function_e_18
    4b44:   f8b7 0052   ldrh.w r0, [r7, #82]   ; 0x52
    4b48:   f44f 717a   mov.w r1, #1000   ; 0x3e8
    4b4c:   ebc0 4000   rsb r0, r0, r0, lsl #16
    4b50:   fbb0 f0f1   udiv r0, r0, r1
    4b54:   f44f 71e1   mov.w r1, #450   ; 0x1c2
    4b58:   4348        muls r0, r1
    4b5a:   f64f 71ff   movw r1, #65535   ; 0xffff
    4b5e:   fbb0 f0f1   udiv r0, r0, r1
    4b62:   e000        b.n 0x4b66
    4b64:   e03e        b.n 0x4be4
    4b66:   4935        ldr r1, [pc, #212]   ; (0x4c3c)
    4b68:   f8a1 0052   strh.w r0, [r1, #82]   ; 0x52
    4b6c:   2002        movs r0, #2
    4b6e:   72b8        strb r0, [r7, #10]
    4b70:   e72c        b.n 0x49cc
    4b72:   f003 fe8f   bl 0x8894                   ; call function_e_16
    4b76:   2801        cmp r0, #1
    4b78:   d115        bne.n 0x4ba6
    4b7a:   7ab8        ldrb r0, [r7, #10]
    4b7c:   1c40        adds r0, r0, #1
    4b7e:   72b8        strb r0, [r7, #10]
    4b80:   2000        movs r0, #0
    4b82:   67f8        str r0, [r7, #124]   ; 0x7c
    4b84:   4927        ldr r1, [pc, #156]   ; (0x4c24)
    4b86:   3180        adds r1, #128   ; 0x80
    4b88:   6008        str r0, [r1, #0]
    4b8a:   70b8        strb r0, [r7, #2]
    4b8c:   7138        strb r0, [r7, #4]
    4b8e:   f8b7 0046   ldrh.w r0, [r7, #70]   ; 0x46
    4b92:   f8b7 1048   ldrh.w r1, [r7, #72]   ; 0x48
    4b96:   ea50 0201   orrs.w r2, r0, r1
    4b9a:   d100        bne.n 0x4b9e
    4b9c:   21c8        movs r1, #200   ; 0xc8
    4b9e:   f8a7 1052   strh.w r1, [r7, #82]   ; 0x52
    4ba2:   f8a7 0054   strh.w r0, [r7, #84]   ; 0x54
    4ba6:   7ab8        ldrb r0, [r7, #10]
    4ba8:   2801        cmp r0, #1
    4baa:   d105        bne.n 0x4bb8
    4bac:   7a78        ldrb r0, [r7, #9]
    4bae:   2802        cmp r0, #2
    4bb0:   d002        beq.n 0x4bb8
    4bb2:   7ab8        ldrb r0, [r7, #10]
    4bb4:   1c40        adds r0, r0, #1
    4bb6:   72b8        strb r0, [r7, #10]
    4bb8:   f003 fe6c   bl 0x8894                   ; call function_e_16
    4bbc:   2801        cmp r0, #1
    4bbe:   d103        bne.n 0x4bc8
    4bc0:   7ab8        ldrb r0, [r7, #10]
    4bc2:   2804        cmp r0, #4
    4bc4:   d100        bne.n 0x4bc8
    4bc6:   72b8        strb r0, [r7, #10]
    4bc8:   1c64        adds r4, r4, #1
    4bca:   0876        lsrs r6, r6, #1
    4bcc:   b2e4        uxtb r4, r4
    4bce:   ea4f 0959   mov.w r9, r9, lsr #1
    4bd2:   2c08        cmp r4, #8
    4bd4:   f4ff aee4   bcc.w 0x49a0
    4bd8:   1c6d        adds r5, r5, #1
    4bda:   b2ed        uxtb r5, r5
    4bdc:   2d09        cmp r5, #9
    4bde:   f4ff aed2   bcc.w 0x4986
    4be2:   e013        b.n 0x4c0c
    4be4:   7a78        ldrb r0, [r7, #9]
    4be6:   71b8        strb r0, [r7, #6]
    4be8:   f003 faba   bl 0x8160                   ; call function_e_5
    4bec:   2002        movs r0, #2
    4bee:   7278        strb r0, [r7, #9]
    4bf0:   2063        movs r0, #99   ; 0x63
    4bf2:   72b8        strb r0, [r7, #10]
    4bf4:   2000        movs r0, #0
    4bf6:   70b8        strb r0, [r7, #2]
    4bf8:   7138        strb r0, [r7, #4]
    4bfa:   66b8        str r0, [r7, #104]   ; 0x68
    4bfc:   66f8        str r0, [r7, #108]   ; 0x6c
    4bfe:   67f8        str r0, [r7, #124]   ; 0x7c
    4c00:   490e        ldr r1, [pc, #56]   ; (0x4c3c)
    4c02:   f8a1 0052   strh.w r0, [r1, #82]   ; 0x52
    4c06:   490e        ldr r1, [pc, #56]   ; (0x4c40)
    4c08:   f8a1 0052   strh.w r0, [r1, #82]   ; 0x52
    4c0c:   6ff9        ldr r1, [r7, #124]   ; 0x7c
    4c0e:   f644 6020   movw r0, #20000   ; 0x4e20
    4c12:   4281        cmp r1, r0
    4c14:   d304        bcc.n 0x4c20
    4c16:   7ab8        ldrb r0, [r7, #10]
    4c18:   2814        cmp r0, #20
    4c1a:   d801        bhi.n 0x4c20
    4c1c:   2004        movs r0, #4
    4c1e:   72b8        strb r0, [r7, #10]
    4c20:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x4c24:   0x20000058  ; variable_sram_e_1
  0x4c28:   0x2000090c
  0x4c2c:   0x20002de4  ; pointer_34
  0x4c30:   0x8ec8      ; data_7
  0x4c34:   0x20000a3e
  0x4c38:   0x20000160
  0x4c3c:   0x20002e2c
  0x4c40:   0x20002ebc

function_e_27:
    ; r0 = pointer (to struct at least 112 bytes long...)
    ; r1 = set or unset
  0x4c44:   2900        cmp r1, #0
    4c46:   6f01        ldr r1, [r0, #112]   ; 0x70
    4c48:   d002        beq.n 0x4c50
    4c4a:   f041 0110   orr.w r1, r1, #16
    4c4e:   e001        b.n 0x4c54
    4c50:   f021 0110   bic.w r1, r1, #16
    4c54:   6701        str r1, [r0, #112]   ; 0x70
    4c56:   4770        bx lr

function_e_28:
    ; r0 = pointer
    ; r1 = set or unset
  0x4c58:   2900        cmp r1, #0
    4c5a:   6901        ldr r1, [r0, #16]
    4c5c:   d002        beq.n 0x4c64
    4c5e:   f041 0101   orr.w r1, r1, #1
    4c62:   e001        b.n 0x4c68
    4c64:   f021 0101   bic.w r1, r1, #1
    4c68:   6101        str r1, [r0, #16]
    4c6a:   4770        bx lr

function_e_29:
    ; r0 = pointer
    ; r1 = pointer
    ; r2 = pointer
  0x4c6c:   b5f0        push {r4, r5, r6, r7, lr}
    4c6e:   780b        ldrb r3, [r1, #0]
    4c70:   2403        movs r4, #3
    4c72:   eb00 0e83   add.w lr, r0, r3, lsl #2
    4c76:   005b        lsls r3, r3, #1
    4c78:   409c        lsls r4, r3
    4c7a:   6d05        ldr r5, [r0, #80]   ; 0x50
    4c7c:   f10e 0240   add.w r2, lr, #64   ; 0x40
    4c80:   f10e 0c90   add.w ip, lr, #144   ; 0x90
    4c84:   43e4        mvns r4, r4
    4c86:   4025        ands r5, r4
    4c88:   6505        str r5, [r0, #80]   ; 0x50
    4c8a:   6d45        ldr r5, [r0, #84]   ; 0x54
    4c8c:   7a8e        ldrb r6, [r1, #10]
    4c8e:   7acf        ldrb r7, [r1, #11]
    4c90:   4025        ands r5, r4
    4c92:   ea46 0647   orr.w r6, r6, r7, lsl #1
    4c96:   409e        lsls r6, r3
    4c98:   432e        orrs r6, r5
    4c9a:   6546        str r6, [r0, #84]   ; 0x54
    4c9c:   6ec5        ldr r5, [r0, #108]   ; 0x6c
    4c9e:   7b4e        ldrb r6, [r1, #13]
    4ca0:   4025        ands r5, r4
    4ca2:   7b0c        ldrb r4, [r1, #12]
    4ca4:   ea44 0446   orr.w r4, r4, r6, lsl #1
    4ca8:   409c        lsls r4, r3
    4caa:   432c        orrs r4, r5
    4cac:   66c4        str r4, [r0, #108]   ; 0x6c
    4cae:   6814        ldr r4, [r2, #0]
    4cb0:   f240 1507   movw r5, #263   ; 0x107
    4cb4:   43ac        bics r4, r5
    4cb6:   6014        str r4, [r2, #0]
    4cb8:   6814        ldr r4, [r2, #0]
    4cba:   684d        ldr r5, [r1, #4]
    4cbc:   432c        orrs r4, r5
    4cbe:   6014        str r4, [r2, #0]
    4cc0:   89ca        ldrh r2, [r1, #14]
    4cc2:   f8cc 2000   str.w r2, [ip]
    4cc6:   8a0a        ldrh r2, [r1, #16]
    4cc8:   f8ce 20a0   str.w r2, [lr, #160]   ; 0xa0
    4ccc:   7a0a        ldrb r2, [r1, #8]
    4cce:   7a49        ldrb r1, [r1, #9]
    4cd0:   ea42 0141   orr.w r1, r2, r1, lsl #1
    4cd4:   6d02        ldr r2, [r0, #80]   ; 0x50
    4cd6:   4099        lsls r1, r3
    4cd8:   4311        orrs r1, r2
    4cda:   6501        str r1, [r0, #80]   ; 0x50
    4cdc:   bdf0        pop {r4, r5, r6, r7, pc}

clear_some_mem:
    ; r0 = pointer
    ; probably clearing parts of a struct.
    ; memory cleared marked with 0:
    ; r0   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17
    ;      0           0  0  0  0  0  0  0  0  0  0  0  0  0  0
    ; this is only every called with r0 = sp
  0x4cde:   2100        movs r1, #0
    4ce0:   7001        strb r1, [r0, #0]
    4ce2:   6041        str r1, [r0, #4]
    4ce4:   7201        strb r1, [r0, #8]
    4ce6:   7241        strb r1, [r0, #9]
    4ce8:   7281        strb r1, [r0, #10]
    4cea:   72c1        strb r1, [r0, #11]
    4cec:   7301        strb r1, [r0, #12]
    4cee:   7341        strb r1, [r0, #13]
    4cf0:   81c1        strh r1, [r0, #14]
    4cf2:   8201        strh r1, [r0, #16]
    4cf4:   4770        bx lr

function_e_30:
    ; used in conjunction with clear_some_mem
    ; r1 is always sp + 20
    ; r0 is pointer
  0x4cf6:   880a        ldrh r2, [r1, #0]
    4cf8:   f8c0 2088   str.w r2, [r0, #136]   ; 0x88
    4cfc:   884a        ldrh r2, [r1, #2]
    4cfe:   f8c0 2084   str.w r2, [r0, #132]   ; 0x84
    4d02:   6802        ldr r2, [r0, #0]
    4d04:   f422 3240   bic.w r2, r2, #196608   ; 0x30000
    4d08:   6002        str r2, [r0, #0]
    4d0a:   6802        ldr r2, [r0, #0]
    4d0c:   f022 7280   bic.w r2, r2, #16777216   ; 0x1000000
    4d10:   6002        str r2, [r0, #0]
    4d12:   6802        ldr r2, [r0, #0]
    4d14:   688b        ldr r3, [r1, #8]
    4d16:   431a        orrs r2, r3
    4d18:   6002        str r2, [r0, #0]
    4d1a:   790a        ldrb r2, [r1, #4]
    4d1c:   f8c0 208c   str.w r2, [r0, #140]   ; 0x8c
    4d20:   8989        ldrh r1, [r1, #12]
    4d22:   6781        str r1, [r0, #120]   ; 0x78
    4d24:   4770        bx lr

function_e_31:
    ; also used in conjunction with clear_some_mem and function_e_30
    ; r0 = sp + 20
  0x4d26:   2100        movs r1, #0
    4d28:   f64f 72ff   movw r2, #65535   ; 0xffff
    4d2c:   6081        str r1, [r0, #8]
    4d2e:   8002        strh r2, [r0, #0]
    4d30:   8041        strh r1, [r0, #2]
    4d32:   f44f 7280   mov.w r2, #256   ; 0x100
    4d36:   8182        strh r2, [r0, #12]
    4d38:   7101        strb r1, [r0, #4]
    4d3a:   4770        bx lr

spi_flash_read_status:
  0x4d3c:   b57c        push {r2, r3, r4, r5, r6, lr}
    4d3e:   4c08        ldr r4, [pc, #32]   ; (0x4d60)
    4d40:   2005        movs r0, #5
    4d42:   f8ad 0000   strh.w r0, [sp]
    4d46:   f44f 6580   mov.w r5, #1024   ; 0x400
    4d4a:   62a5        str r5, [r4, #40]       ; reset GPIO B pin 10 (chip sel low)
    4d4c:   2202        movs r2, #2
    4d4e:   a901        add r1, sp, #4
    4d50:   4668        mov r0, sp
    4d52:   f000 f959   bl 0x5008               ; call spi_write_read(sp, sp + 4, 2)
    4d56:   6265        str r5, [r4, #36]       ; set GPIO B pin 10 (chip sel high)
    4d58:   f89d 0005   ldrb.w r0, [sp, #5]
    4d5c:   bd7c        pop {r2, r3, r4, r5, r6, pc}
    4d5e:   0000        movs r0, r0

  0x4d60:   0x400b2000  ; GPIO B

spi_init:
  0x4d64:   b570        push {r4, r5, r6, lr}
    4d66:   b08c        sub sp, #48   ; 0x30
    4d68:   f000 f83c   bl 0x4de4               ; call spi_gpio_init
    4d6c:   4c17        ldr r4, [pc, #92]       ; (0x4dcc)
    4d6e:   7820        ldrb r0, [r4, #0]
    4d70:   2801        cmp r0, #1
    4d72:   d127        bne.n 0x4dc4
    ; Enable SPI1 clock
    4d74:   2101        movs r1, #1
    4d76:   2020        movs r0, #32
    4d78:   f7fe fb60   bl 0x343c               ; call ckcu_apb0_clock_enable(0x20, 1)
    4d7c:   f44f 4080   mov.w r0, #16384        ; 0x4000
    4d80:   1105        asrs r5, r0, #4
    4d82:   e9cd 0500   strd r0, r5, [sp]
    4d86:   2008        movs r0, #8
    4d88:   9002        str r0, [sp, #8]
    4d8a:   2000        movs r0, #0
    4d8c:   9003        str r0, [sp, #12]
    4d8e:   9004        str r0, [sp, #16]
    4d90:   9005        str r0, [sp, #20]
    4d92:   9006        str r0, [sp, #24]
    4d94:   9007        str r0, [sp, #28]
    4d96:   2004        movs r0, #4
    4d98:   4e0d        ldr r6, [pc, #52]       ; (0x4dd0)
    4d9a:   9008        str r0, [sp, #32]
    4d9c:   9009        str r0, [sp, #36]       ; 0x24
    4d9e:   900a        str r0, [sp, #40]       ; 0x28
    4da0:   4669        mov r1, sp
    4da2:   4630        mov r0, r6
    4da4:   f001 fbf2   bl 0x658c               ; call spi_config(SPI1, sp)
    4da8:   2101        movs r1, #1
    4daa:   4630        mov r0, r6
    4dac:   f001 fc20   bl 0x65f0               ; call spi_slave_select_output(SPI1, 1)
    4db0:   4808        ldr r0, [pc, #32]       ; (0x4dd4)
    4db2:   6245        str r5, [r0, #36]       ; 0x24
    4db4:   2101        movs r1, #1
    4db6:   4630        mov r0, r6
    4db8:   f001 fbde   bl 0x6578               ; call spi_enable(SPI1, 1)
    4dbc:   f000 f840   bl 0x4e40
    4dc0:   2002        movs r0, #2
    4dc2:   7020        strb r0, [r4, #0]
    4dc4:   b00c        add sp, #48   ; 0x30
    4dc6:   2001        movs r0, #1
    4dc8:   bd70        pop {r4, r5, r6, pc}
    4dca:   0000

  0x4dcc:   0x20000220
  0x4dd0:   0x40044000  ; SPI 1
  0x4dd4:   0x400b2000  ; GPIO B

spi_flash_read_wip:
  0x4dd8:   b510        push {r4, lr}
    4dda:   f7ff ffaf   bl 0x4d3c               ; call spi_flash_read_status
    4dde:   f3c0 0000   ubfx r0, r0, #0, #1
    4de2:   bd10        pop {r4, pc}

spi_gpio_init:
  0x4de4:   b570        push {r4, r5, r6, lr}
    4de6:   4c11        ldr r4, [pc, #68]       ; (0x4e2c)
    4de8:   7820        ldrb r0, [r4, #0]
    4dea:   b9e0        cbnz r0, 0x4e26
    ; Enable GPIO B clock
    4dec:   2101        movs r1, #1             ; r1 = 1
    4dee:   0448        lsls r0, r1, #17        ; r0 = 0x20000
    4df0:   f7fe fb18   bl 0x3424               ; call ckcu_ahb_clock_enable

    4df4:   4e0e        ldr r6, [pc, #56]       ; (0x4e30)
    4df6:   f44f 6580   mov.w r5, #1024         ; 0x400
    4dfa:   2200        movs r2, #0
    4dfc:   4629        mov r1, r5
    4dfe:   4630        mov r0, r6
    4e00:   f7fe fbac   bl 0x355c               ; call gpio_set_pin_pull_up_down(GPIO B, pin 10, up)
    4e04:   2201        movs r2, #1
    4e06:   4629        mov r1, r5
    4e08:   4630        mov r0, r6
    4e0a:   f7fe fb8f   bl 0x352c               ; call gpio_set_output_current(GPIO B, pin 10, 8mA)
    4e0e:   2201        movs r2, #1
    4e10:   2180        movs r1, #128           ; 0x80
    4e12:   4630        mov r0, r6
    4e14:   f7fe fb8a   bl 0x352c               ; call gpio_set_output_current(GPIO B, pin 7, 8mA)
    4e18:   2201        movs r2, #1
    4e1a:   0211        lsls r1, r2, #8
    4e1c:   4630        mov r0, r6
    4e1e:   f7fe fb85   bl 0x352c               ; call gpio_set_output_current(GPIO B, pin 8, 8mA)
    4e22:   2001        movs r0, #1
    4e24:   7020        strb r0, [r4, #0]
  0x4e26:   2001        movs r0, #1
    4e28:   bd70        pop {r4, r5, r6, pc}
    4e2a:   0000

  0x4e2c:   0x20000220
  0x4e30:   0x400b2000  ; GPIO B

pinmux_select_b789:
    ; r0 = 0/1 spi/gpio
  0x4e34:   b108        cbz r0, 0x4e3a
    4e36:   f000 b825   b.w 0x4e84      ; return pinmux_b789_gpio

  0x4e3a:   f000 b801   b.w 0x4e40      ; return pinmux_b789_spi
    4e3e:   0000

pinmux_b789_spi:
  0x4e40:   b570        push {r4, r5, r6, lr}
    4e42:   2201        movs r2, #1             ; r2 = 1
    4e44:   4d0e        ldr r5, [pc, #56]       ; r5 = (0x4e80)

    ; Set pin PB10 output mode, disable pull
    4e46:   0294        lsls r4, r2, #10        ; r4 = r2 << 10
    4e48:   4621        mov r1, r4
    4e4a:   4628        mov r0, r5
    4e4c:   f7fe fb66   bl 0x351c               ; call gpio_set_input_output(GPIO B, 1 << 10, 1)
    4e50:   2202        movs r2, #2
    4e52:   4621        mov r1, r4
    4e54:   4628        mov r0, r5
    4e56:   f7fe fb81   bl 0x355c               ; call gpio_set_pin_pull_up_down(GPIO B, 1 << 10, 2)

    ; Select AF5 (SPI) for GPIO B pins 7,8,9
    4e5a:   2205        movs r2, #5
    4e5c:   2107        movs r1, #7
    4e5e:   2001        movs r0, #1
    4e60:   f7fe fa20   bl 0x32a4               ; call afio_pin_config
    4e64:   2205        movs r2, #5
    4e66:   2108        movs r1, #8
    4e68:   2001        movs r0, #1
    4e6a:   f7fe fa1b   bl 0x32a4               ; call afio_pin_config
    4e6e:   2205        movs r2, #5
    4e70:   2109        movs r1, #9
    4e72:   2001        movs r0, #1
    4e74:   f7fe fa16   bl 0x32a4               ; call afio_pin_config

    4e78:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    4e7c:   f000 b924   b.w 0x50c8              ; spi_flash_release_sleep

  0x4e80:   0x400b2000  ; GPIO B

pinmux_b789_gpio:
  0x4e84:   b570        push {r4, r5, r6, lr}
    4e86:   f000 f88b   bl 0x4fa0               ; call spi_flash_deep_power_down
    4e8a:   4d0f        ldr r5, [pc, #60]       ; r5 = (0x4ec8)
    4e8c:   f44f 6480   mov.w r4, #1024         ; r4 = 0x400

    ; Set pin PB10 pull-up, input mode
    4e90:   2200        movs r2, #0
    4e92:   4621        mov r1, r4
    4e94:   4628        mov r0, r5
    4e96:   f7fe fb61   bl 0x355c               ; call gpio_set_pin_pull_up_down
    4e9a:   2200        movs r2, #0
    4e9c:   4621        mov r1, r4
    4e9e:   4628        mov r0, r5
    4ea0:   f7fe fb3c   bl 0x351c               ; call gpio_set_input_output

    4ea4:   2200        movs r2, #0
    4ea6:   2107        movs r1, #7
    4ea8:   2001        movs r0, #1
    4eaa:   f7fe f9fb   bl 0x32a4               ; call afio_pin_config
    4eae:   2200        movs r2, #0
    4eb0:   2108        movs r1, #8
    4eb2:   2001        movs r0, #1
    4eb4:   f7fe f9f6   bl 0x32a4               ; call afio_pin_config
    4eb8:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    4ebc:   2200        movs r2, #0
    4ebe:   2109        movs r1, #9
    4ec0:   2001        movs r0, #1
    4ec2:   f7fe b9ef   b.w 0x32a4              ; call afio_pin_config
    4ec6:   0000

  0x4ec8:   0x400b2000  ; GPIO B

spi_flash_page_program:
    ; r0 = src ptr
    ; r1 = addr
    ; r2 = len
  0x4ecc:   e92d 43f8   stmdb sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ed0:   4607        mov r7, r0
    4ed2:   460c        mov r4, r1
    4ed4:   4690        mov r8, r2
    4ed6:   f000 f947   bl 0x5168           ; call spi_flash_write_enable
    4eda:   4e0e        ldr r6, [pc, #56]   ; (0x4f14)
    4edc:   f44f 6580   mov.w r5, #1024   ; 0x400
    4ee0:   62b5        str r5, [r6, #40]   ; 0x28

    4ee2:   2002        movs r0, #2
    4ee4:   f88d 0000   strb.w r0, [sp]
    4ee8:   0c20        lsrs r0, r4, #16
    4eea:   f88d 0001   strb.w r0, [sp, #1]
    4eee:   0a20        lsrs r0, r4, #8
    4ef0:   f88d 0002   strb.w r0, [sp, #2]
    4ef4:   f88d 4003   strb.w r4, [sp, #3]
    4ef8:   2204        movs r2, #4
    4efa:   2100        movs r1, #0
    4efc:   4668        mov r0, sp
    4efe:   f000 f883   bl 0x5008               ; call spi_write_read(sp, 0, 4)
    4f02:   4642        mov r2, r8
    4f04:   2100        movs r1, #0
    4f06:   4638        mov r0, r7
    4f08:   f000 f87e   bl 0x5008               ; call spi_write_read(r7, 0, r8)
    4f0c:   6275        str r5, [r6, #36]   ; 0x24
    4f0e:   e8bd 83f8   ldmia.w sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f12:   0000

  0x4f14:   0x400b2000  ; GPIO B

spi_flash_sector_erase:
    ; r0 =
  0x4f18:   b5f8        push {r3, r4, r5, r6, r7, lr}
    4f1a:   4604        mov r4, r0
    4f1c:   f000 f924   bl 0x5168           ; call spi_flash_write_enable
    4f20:   4e0a        ldr r6, [pc, #40]   ; (0x4f4c)
    4f22:   f44f 6580   mov.w r5, #1024   ; 0x400
    4f26:   62b5        str r5, [r6, #40]   ; 0x28
    4f28:   2020        movs r0, #32
    4f2a:   f88d 0000   strb.w r0, [sp]     ; [sp + 0] = 0x20
    4f2e:   0c20        lsrs r0, r4, #16
    4f30:   f88d 0001   strb.w r0, [sp, #1] ; [sp + 1] = a0 >> 16
    4f34:   0a20        lsrs r0, r4, #8
    4f36:   f88d 0002   strb.w r0, [sp, #2] ; [sp + 2] = a0 >> 8
    4f3a:   f88d 4003   strb.w r4, [sp, #3] ; [sp + 3] = a0
    4f3e:   2204        movs r2, #4
    4f40:   2100        movs r1, #0
    4f42:   4668        mov r0, sp
    4f44:   f000 f860   bl 0x5008               ; call spi_write_read(sp, 0, 4)
    4f48:   6275        str r5, [r6, #36]   ; 0x24
    4f4a:   bdf8        pop {r3, r4, r5, r6, r7, pc}

  0x4f4c:   0x400b2000  ; GPIO B

spi_flash_write_status_register:
    ; r0 =
  0x4f50:   b5f8        push {r3, r4, r5, r6, r7, lr}
    4f52:   4606        mov r6, r0              ; r6 = r0
    4f54:   f000 f908   bl 0x5168               ; call spi_flash_write_enable
    4f58:   4c07        ldr r4, [pc, #28]       ; r4 = (0x4f78)
    4f5a:   f44f 6580   mov.w r5, #1024         ; r5 = 0x400
    4f5e:   62a5        str r5, [r4, #40]       ; [r4 + 0x28] = r5
    4f60:   2001        movs r0, #1
    4f62:   f88d 0000   strb.w r0, [sp]
    4f66:   f88d 6001   strb.w r6, [sp, #1]
    4f6a:   2202        movs r2, #2
    4f6c:   2100        movs r1, #0
    4f6e:   4668        mov r0, sp
    4f70:   f000 f84a   bl 0x5008               ; call spi_write_read(sp, 0, 2)
    4f74:   6265        str r5, [r4, #36]   ; 0x24
    4f76:   bdf8        pop {r3, r4, r5, r6, r7, pc}

  0x4f78:   0x400b2000  ; GPIO B

function_78:
  0x4f7c:   b510        push {r4, lr}
    4f7e:   243c        movs r4, #60            ; 0x3c
    4f80:   f7ff ffa4   bl 0x4ecc               ; call spi_flash_page_program(r0, r1, r2)
    4f84:   e005        b.n 0x4f92

  0x4f86:   2064        movs r0, #100           ; 0x64
    4f88:   f7fe f9a0   bl 0x32cc               ; call spin_wait_maybe(100)
    4f8c:   f7ff ff24   bl 0x4dd8               ; call spi_flash_read_wip
    4f90:   b118        cbz r0, 0x4f9a
    4f92:   1e64        subs r4, r4, #1
    4f94:   1c60        adds r0, r4, #1
    4f96:   d1f6        bne.n 0x4f86
    4f98:   bd10        pop {r4, pc}

  0x4f9a:   2001        movs r0, #1
    4f9c:   bd10        pop {r4, pc}
    4f9e:   0000

spi_flash_deep_power_down:
  0x4fa0:   b538        push {r3, r4, r5, lr}
    4fa2:   4c08        ldr r4, [pc, #32]       ; (0x4fc4)
    4fa4:   20b9        movs r0, #185           ; 0xb9
    4fa6:   f88d 0000   strb.w r0, [sp]
    4faa:   f44f 6580   mov.w r5, #1024         ; 0x400
    4fae:   62a5        str r5, [r4, #40]       ; 0x28
    4fb0:   2201        movs r2, #1
    4fb2:   2100        movs r1, #0
    4fb4:   4668        mov r0, sp
    4fb6:   f000 f827   bl 0x5008               ; call spi_write_read(sp, 0, 1)
    4fba:   6265        str r5, [r4, #36]       ; 0x24
    4fbc:   200a        movs r0, #10
    4fbe:   f7fe f985   bl 0x32cc               ; call spin_wait_maybe(10)
    4fc2:   bd38        pop {r3, r4, r5, pc}

  0x4fc4:   0x400b2000  ; GPIO B

spi_flash_read_data:
    ; r0 = dest ptr
    ; r1 = addr
    ; r2 = len
  0x4fc8:   b5f8        push {r3, r4, r5, r6, r7, lr}
    4fca:   4d0e        ldr r5, [pc, #56]       ; r5 = (0x5004)
    4fcc:   f44f 6480   mov.w r4, #1024         ; r4 = 0x400
    4fd0:   4607        mov r7, r0
    4fd2:   4616        mov r6, r2
    4fd4:   62ac        str r4, [r5, #40]       ; 0x28

    4fd6:   2003        movs r0, #3
    4fd8:   f88d 0000   strb.w r0, [sp]
    4fdc:   0c08        lsrs r0, r1, #16
    4fde:   f88d 0001   strb.w r0, [sp, #1]
    4fe2:   0a08        lsrs r0, r1, #8
    4fe4:   f88d 0002   strb.w r0, [sp, #2]
    4fe8:   f88d 1003   strb.w r1, [sp, #3]
    4fec:   2204        movs r2, #4
    4fee:   2100        movs r1, #0
    4ff0:   4668        mov r0, sp
    4ff2:   f000 f809   bl 0x5008               ; call spi_write_read(sp, 0, 4)
    4ff6:   4632        mov r2, r6
    4ff8:   4639        mov r1, r7
    4ffa:   2000        movs r0, #0
    4ffc:   f000 f804   bl 0x5008               ; call spi_write_read(0, r7 = r0, r6 = r2)
    5000:   626c        str r4, [r5, #36]       ; 0x24
    5002:   bdf8        pop {r3, r4, r5, r6, r7, pc}

  0x5004:   0x400b2000  ; GPIO B

spi_write_read:
    ; a0 = src pointer (0/sp)
    ; a1 = dest pointer
    ; a2 = data length

    ; Write a0 to SPI1
    ; Read a1 from SPI1
    ; Write a0 + a2 to SPI1
    ; Read a1 + a2 from SPI1
  0x5008:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    500c:   460e        mov r6, r1              ; r6 = r1
    500e:   4922        ldr r1, [pc, #136]      ; r1 = (0x5098) pointer_4
    5010:   4605        mov r5, r0              ; r5 = r0
    5012:   2400        movs r4, #0             ; r4 = 0
    5014:   6848        ldr r0, [r1, #4]        ; r0 = [r1 + 4]
    5016:   4617        mov r7, r2              ; r7 = r2
    5018:   2800        cmp r0, #0
    501a:   dd02        ble.n 0x5022            ; branch if r0 == 0
    501c:   1bc0        subs r0, r0, r7         ; r0 = r0 + r7
    501e:   6048        str r0, [r1, #4]        ; [r1 + 4] = r0
    5020:   e004        b.n 0x502c

  0x5022:   f44f 607a   mov.w r0, #4000         ; r0 = 0xfa0
    5026:   6048        str r0, [r1, #4]        ; [r1 + 4] = r0
    5028:   f002 f88c   bl 0x7144               ; call watchdog_reload_timer

                                                ; r0 = min(r7, 8)
  0x502c:   2f08        cmp r7, #8
    502e:   d901        bls.n 0x5034            ; branch if r7 < 8
    5030:   2008        movs r0, #8             ; r0 = 8
    5032:   e000        b.n 0x5036
  0x5034:   4638        mov r0, r7              ; r0 = r7

  0x5036:   2200        movs r2, #0             ; r2 = 0
    5038:   4613        mov r3, r2              ; r3 = r2
    503a:   4918        ldr r1, [pc, #96]       ; r1 = (0x509c) SPI1 registers

                                                ; Write a0 to SPI 1
    503c:   e005        b.n 0x504a
  0x503e:   b13d        cbz r5, 0x5050          ; branch if r5 == 0
    5040:   f815 c002   ldrb.w ip, [r5, r2]     ; ip = [r5 + r2]
    5044:   f8c1 c010   str.w ip, [r1, #16]     ; [r1 + 0x10] = ip Write into SPI1 Data Register
  0x5048:   1c52        adds r2, r2, #1         ; r2 = r2 + 1
  0x504a:   4282        cmp r2, r0
    504c:   d3f7        bcc.n 0x503e            ; branch if r2 < r0
    504e:   e010        b.n 0x5072
                                                ; If a0 pointer is 0, write 0 to SPI1
  0x5050:   610b        str r3, [r1, #16]       ; [r1 + 0x10] = r3 = 0 Write SPI1 Data Register
    5052:   e7f9        b.n 0x5048

                                                ; Loop until data available on SPI1
                                                ; Save data in a1
  0x5054:   69ca        ldr r2, [r1, #28]       ; r2 = [r1 + 0x1c]  Read SPI1 FIFO Status Register
    5056:   f012 0ff0   tst.w r2, #240          ; 0xf0
    505a:   d0fb        beq.n 0x5054            ; branch if r2 == 0
    505c:   690a        ldr r2, [r1, #16]       ; r2 = [r1 + 0x10] Read SPI1 Data Register
    505e:   b2d2        uxtb r2, r2             ; zero extend r2
                                                ; If a0 == 0 write 0 to SPI1
    5060:   b155        cbz r5, 0x5078          ; branch if r5 == 0
                                                ; Write a0 to SPI1
    5062:   f815 c000   ldrb.w ip, [r5, r0]     ; ip = [r5 + r0]
    5066:   f8c1 c010   str.w ip, [r1, #16]     ; [r1 + 0x10] = ip Write SPI1 Data Register
  0x506a:   1c40        adds r0, r0, #1         ; r0 = r0 + 1
                                                ; Save r2 back to a1
    506c:   b106        cbz r6, 0x5070          ; branch if r6 == 0
    506e:   5532        strb r2, [r6, r4]       ; [r6 + r4] = r2
  0x5070:   1c64        adds r4, r4, #1         ; r4 = r4 + 1
  0x5072:   42b8        cmp r0, r7
    5074:   d3ee        bcc.n 0x5054            ; branch if r0 < r7

    5076:   e00a        b.n 0x508e              ; jump to loop

  0x5078:   610b        str r3, [r1, #16]       ; [r1 + 0x10] = r3 = 0
    507a:   e7f6        b.n 0x506a

                                                ; Loop until data available on SPI1
  0x507c:   69c8        ldr r0, [r1, #28]       ; r0 = [r1 + 0x1c]
    507e:   f010 0ff0   tst.w r0, #240          ; 0xf0
    5082:   d0fb        beq.n 0x507c            ; branch if r2 == 0
    5084:   6908        ldr r0, [r1, #16]       ; r0 = [r1 + 0x10] Read SPI1 Data Register
    5086:   b2c0        uxtb r0, r0             ; zero extend r0
                                                ; Save r0 back to a1
    5088:   b106        cbz r6, 0x508c          ; branch if r6 == 0
    508a:   5530        strb r0, [r6, r4]       ; [r6 + r4] = r0
  0x508c:   1c64        adds r4, r4, #1         ; r4 = r4 + 1
  0x508e:   42bc        cmp r4, r7
    5090:   d3f4        bcc.n 0x507c            ; branch if r4 < r7

    5092:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    5096:   0000

  0x5098:   0x20000220  ; pointer_4
  0x509c:   0x40044000  ; SPI1 registers

function_e_40:
    ; r0 =
  0x50a0:   b570        push {r4, r5, r6, lr}
    50a2:   f240 142d   movw r4, #301   ; 0x12d
    50a6:   f7ff ff37   bl 0x4f18               ; call spi_flash_sector_erase(r0)
    50aa:   f44f 757a   mov.w r5, #1000   ; 0x3e8
    50ae:   e005        b.n 0x50bc
    50b0:   4628        mov r0, r5
    50b2:   f7fe f90b   bl 0x32cc               ; call spin_wait_maybe
    50b6:   f7ff fe8f   bl 0x4dd8               ; call spi_flash_read_wip
    50ba:   b118        cbz r0, 0x50c4
    50bc:   1e64        subs r4, r4, #1
    50be:   1c60        adds r0, r4, #1
    50c0:   d1f6        bne.n 0x50b0
    50c2:   bd70        pop {r4, r5, r6, pc}
    50c4:   2001        movs r0, #1
    50c6:   bd70        pop {r4, r5, r6, pc}

spi_flash_release_sleep:
  0x50c8:   b538        push {r3, r4, r5, lr}
    50ca:   4c08        ldr r4, [pc, #32]   ; (0x50ec)
    50cc:   20ab        movs r0, #171   ; 0xab
    50ce:   f88d 0000   strb.w r0, [sp]
    50d2:   f44f 6580   mov.w r5, #1024   ; 0x400
    50d6:   62a5        str r5, [r4, #40]   ; 0x28
    50d8:   2201        movs r2, #1
    50da:   2100        movs r1, #0
    50dc:   4668        mov r0, sp
    50de:   f7ff ff93   bl 0x5008               ; call spi_write_read(sp, 0, 1)
    50e2:   6265        str r5, [r4, #36]   ; 0x24
    50e4:   200a        movs r0, #10
    50e6:   f7fe f8f1   bl 0x32cc               ; spin_wait_maybe(10)
    50ea:   bd38        pop {r3, r4, r5, pc}

  0x50ec:   0x400b2000  ; GPIO B

function_27:
  0x50f0:   e92d 47f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50f4:   4606        mov r6, r0
    50f6:   4248        negs r0, r1
    50f8:   b2c4        uxtb r4, r0
    50fa:   460d        mov r5, r1
    50fc:   4294        cmp r4, r2
    50fe:   d204        bcs.n 0x510a
    5100:   1b10        subs r0, r2, r4
    5102:   f3c0 270f   ubfx r7, r0, #8, #16
    5106:   b2c0        uxtb r0, r0
    5108:   e002        b.n 0x5110
    510a:   2700        movs r7, #0
    510c:   b294        uxth r4, r2
    510e:   4638        mov r0, r7
    5110:   4680        mov r8, r0
    5112:   b144        cbz r4, 0x5126
    5114:   4622        mov r2, r4
    5116:   4629        mov r1, r5
    5118:   4630        mov r0, r6
    511a:   f7ff ff2f   bl 0x4f7c               ; call function_78
    511e:   2801        cmp r0, #1
    5120:   d11d        bne.n 0x515e
    5122:   4425        add r5, r4
    5124:   4426        add r6, r4
    5126:   2400        movs r4, #0
    5128:   f44f 7980   mov.w r9, #256   ; 0x100
    512c:   e00b        b.n 0x5146
    512e:   464a        mov r2, r9
    5130:   4629        mov r1, r5
    5132:   4630        mov r0, r6
    5134:   f7ff ff22   bl 0x4f7c               ; call function_78
    5138:   2801        cmp r0, #1
    513a:   d110        bne.n 0x515e
    513c:   f505 7580   add.w r5, r5, #256   ; 0x100
    5140:   f506 7680   add.w r6, r6, #256   ; 0x100
    5144:   1c64        adds r4, r4, #1
    5146:   42bc        cmp r4, r7
    5148:   dbf1        blt.n 0x512e
    514a:   ea5f 0008   movs.w r0, r8
    514e:   d009        beq.n 0x5164
    5150:   4602        mov r2, r0
    5152:   4629        mov r1, r5
    5154:   4630        mov r0, r6
    5156:   f7ff ff11   bl 0x4f7c               ; call function_78
    515a:   2801        cmp r0, #1
    515c:   d002        beq.n 0x5164
    515e:   2000        movs r0, #0
    5160:   e8bd 87f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5164:   2001        movs r0, #1
    5166:   e7fb        b.n 0x5160

spi_flash_write_enable:
  0x5168:   b538        push {r3, r4, r5, lr}
    516a:   4c07        ldr r4, [pc, #28]   ; (0x5188)
    516c:   2006        movs r0, #6
    516e:   f88d 0000   strb.w r0, [sp]
    5172:   f44f 6580   mov.w r5, #1024   ; 0x400
    5176:   62a5        str r5, [r4, #40]   ; 0x28
    5178:   2201        movs r2, #1
    517a:   2100        movs r1, #0
    517c:   4668        mov r0, sp
    517e:   f7ff ff43   bl 0x5008               ; call spi_write_read(sp, 0, 1)
    5182:   6265        str r5, [r4, #36]   ; 0x24
    5184:   bd38        pop {r3, r4, r5, pc}
    5186:   0000        movs r0, r0

  0x5188:   0x400b2000  ; GPIO B

spi_flash_set_status_reg:
  0x518c:   b510        push {r4, lr}
    518e:   f44f 74cd   mov.w r4, #410   ; 0x19a
    5192:   f7ff fedd   bl 0x4f50               ; call spi_flash_write_status_register(a0)
    5196:   e005        b.n 0x51a4

  0x5198:   2064        movs r0, #100   ; 0x64
    519a:   f7fe f897   bl 0x32cc               ; spin_wait_maybe(100)
    519e:   f7ff fe1b   bl 0x4dd8               ; call spi_flash_read_wip
    51a2:   b118        cbz r0, 0x51ac
  0x51a4:   1e64        subs r4, r4, #1
    51a6:   1c60        adds r0, r4, #1
    51a8:   d1f6        bne.n 0x5198
    51aa:   bd10        pop {r4, pc}

  0x51ac:   2001        movs r0, #1
    51ae:   bd10        pop {r4, pc}

setup_intr_priority:
  0x51b0:   b510        push {r4, lr}

    51b2:   f44f 5130   mov.w r1, #11264        ; r1 = 0x2c00
    51b6:   2000        movs r0, #0             ; r0 = 0
    51b8:   f000 f86c   bl 0x5294               ; call nvic_set_vtor(0, 0x2c00)

    51bc:   491e        ldr r1, [pc, #120]      ; r1 = (0x5238) AIRCR
    51be:   6808        ldr r0, [r1, #0]        ; r0 = [r1]
    51c0:   f64f 02ff   movw r2, #63743         ; r2 = 0xf8ff
    51c4:   ea00 0002   and.w r0, r0, r2        ; r0 = r0 & r2 Clear PRIGROUP interrupt priority grouping
    51c8:   4a1c        ldr r2, [pc, #112]      ; r2 = (0x523c)
    51ca:   f440 7040   orr.w r0, r0, #768      ; r0 = r0 | 0x300 SET PRIGROUP = 3
    51ce:   ea40 0002   orr.w r0, r0, r2        ; r0 = r0 | r2
    51d2:   6008        str r0, [r1, #0]        ; [r1] = r0

    51d4:   f04f 0200   mov.w r2, #0
    51d8:   4611        mov r1, r2
    51da:   f04f 0003   mov.w r0, #3
    51de:   f000 f82f   bl 0x5240               ; call calc_nvic_priority(3, 0, 0)
    51e2:   4601        mov r1, r0
    51e4:   202b        movs r0, #43            ; r0 = 0x2b
    51e6:   f000 f844   bl 0x5272               ; call ppb_set_nvic_priority(0x2b, r1)
    51ea:   2200        movs r2, #0
    51ec:   4611        mov r1, r2
    51ee:   2003        movs r0, #3
    51f0:   f000 f826   bl 0x5240               ; call calc_nvic_priority(3, 0, 0)
    51f4:   4601        mov r1, r0
    51f6:   202c        movs r0, #44            ; r0 = 0x2c
    51f8:   f000 f83b   bl 0x5272               ; call ppb_set_nvic_priority(0x2c, r1)
    51fc:   2200        movs r2, #0
    51fe:   2101        movs r1, #1
    5200:   2003        movs r0, #3
    5202:   f000 f81d   bl 0x5240               ; call calc_nvic_priority(3, 1, 0)
    5206:   4601        mov r1, r0
    5208:   202a        movs r0, #42            ; r0 = 0x2a
    520a:   f000 f832   bl 0x5272               ; call ppb_set_nvic_priority(0x2a, r1)
    520e:   2200        movs r2, #0
    5210:   2102        movs r1, #2
    5212:   2003        movs r0, #3
    5214:   f000 f814   bl 0x5240               ; call calc_nvic_priority(3, 2, 0)
    5218:   4601        mov r1, r0
    521a:   2029        movs r0, #41            ; r0 = 0x29
    521c:   f000 f829   bl 0x5272               ; call ppb_set_nvic_priority(0x29, r1)
    5220:   2200        movs r2, #0
    5222:   2102        movs r1, #2
    5224:   2003        movs r0, #3
    5226:   f000 f80b   bl 0x5240               ; call calc_nvic_priority(3, 2, 0)
    522a:   4601        mov r1, r0
    522c:   e8bd 4010   ldmia.w sp!, {r4, lr}
    5230:   2035        movs r0, #53            ; r0 = 0x35
    5232:   f000 b81e   b.w 0x5272              ; jump ppb_set_nvic_priority(0x35, r1)
    5236:   0000

  0x5238:   0xe000ed0c  ; NVIC AIRCR register
  0x523c:   0x05fa0000  ; VECTKEY (needed to write AIRCR)


calc_nvic_priority:
    ; r0 = 3
    ; r1 = 2
    ; r2 = 0
    ; return r0 = 2
    ; I still have no idea what this really does
    ; Best I can see, calculates interrupt priorities for ppb_set_nvic_priority
  0x5240:   b530        push {r4, r5, lr}
    5242:   f000 0307   and.w r3, r0, #7        ; r3 = r0 & 7       3
    5246:   2504        movs r5, #4             ; r5 = 4            4
    5248:   f1c3 0007   rsb r0, r3, #7          ; r0 = 7 - r3       4
    524c:   2804        cmp r0, #4
    524e:   d800        bhi.n 0x5252            ; branch if r0 > 4
    5250:   4605        mov r5, r0              ; r5 = r0           4
  0x5252:   2400        movs r4, #0             ; r4 = 0            0
    5254:   1d18        adds r0, r3, #4         ; r0 = r3 + 4       7
    5256:   2807        cmp r0, #7
    5258:   d300        bcc.n 0x525c            ; branch if r0 < 7
    525a:   1edc        subs r4, r3, #3         ; r4 = r3 - 3       0
  0x525c:   2301        movs r3, #1             ; r3 = 1            1
    525e:   fa03 f005   lsl.w r0, r3, r5        ; r0 = r3 << r5     0x10
    5262:   1e40        subs r0, r0, #1         ; r0 = r0 - 1       0xf
    5264:   4008        ands r0, r1             ; r0 = r0 & r1      2
    5266:   40a0        lsls r0, r4             ; r0 = r0 << r4     2
    5268:   40a3        lsls r3, r4             ; r3 = r3 << r4     1
    526a:   1e5b        subs r3, r3, #1         ; r3 = r3 - 1       0
    526c:   4013        ands r3, r2             ; r3 = r3 & r2      0
    526e:   4318        orrs r0, r3             ; r0 = r0 | r3      2
    5270:   bd30        pop {r4, r5, pc}

ppb_set_nvic_priority:
    ; r0 = 0x35
    ; r1 = 2
    ; Set some values in the PPB NVIC interrupt priority registers
  0x5272:   0709        lsls r1, r1, #28        ; r1 = r1 << 28
    5274:   0e09        lsrs r1, r1, #24        ; r1 = r1 >> 24
    5276:   f04f 22e0   mov.w r2, #3758153728   ; r2 = 0xe000e000
    527a:   2800        cmp r0, #0
    527c:   da05        bge.n 0x528a            ; branch if r0 >= 0
    527e:   f000 000f   and.w r0, r0, #15       ; r0 = r0 & 0xf
    5282:   4410        add r0, r2              ; r0 = r0 + r2
    5284:   f880 1d14   strb.w r1, [r0, #3348]  ; [r0 + 0xd14] = r1
    5288:   4770        bx lr
  0x528a:   4410        add r0, r2              ; r0 = r0 + r2
    528c:   f880 1400   strb.w r1, [r0, #1024]  ; [r0 + 0x400] = r1
    5290:   4770        bx lr
    5292:   0000

nvic_set_vtor:
    ; r0 = OR with VTOR offset
    ; r1 = VTOR offset
    ; Set vetor table offset register
  0x5294:   4a02        ldr r2, [pc, #8]        ; r2 = (0x52a0)
    5296:   4011        ands r1, r2             ; r1 = r1 & r2
    5298:   4301        orrs r1, r0             ; r1 = r1 | r0
    529a:   4802        ldr r0, [pc, #8]        ; r0 = (0x52a4)
    529c:   6001        str r1, [r0, #0]        ; [r0] = r1
    529e:   4770        bx lr

  0x52a0:   0x1fffff80  ; Address mask
  0x52a4:   0xe000ed08  ; NVIC VTOR register

spi_flash_init:
  0x52a8:   b510        push {r4, lr}
    52aa:   f000 f821   bl 0x52f0               ; call spi_gpio_setup
    52ae:   4c0f        ldr r4, [pc, #60]   ; (0x52ec)
    52b0:   7820        ldrb r0, [r4, #0]
    52b2:   2801        cmp r0, #1
    52b4:   d117        bne.n 0x52e6
    52b6:   f7ff fd55   bl 0x4d64               ; call spi_init
    52ba:   2801        cmp r0, #1
    52bc:   d10f        bne.n 0x52de
    52be:   f7ff fd3d   bl 0x4d3c               ; call spi_flash_read_status
    52c2:   b120        cbz r0, 0x52ce
    52c4:   2000        movs r0, #0
    52c6:   f7ff ff61   bl 0x518c               ; call spi_flash_set_status_reg(0)
    52ca:   2801        cmp r0, #1
    52cc:   d107        bne.n 0x52de
  0x52ce:   f7ff fd35   bl 0x4d3c               ; call spi_flash_read_status
    52d2:   b130        cbz r0, 0x52e2
    52d4:   2000        movs r0, #0
    52d6:   f7ff ff59   bl 0x518c               ; call spi_flash_set_status_reg(0)
    52da:   2801        cmp r0, #1
    52dc:   d001        beq.n 0x52e2
  0x52de:   2000        movs r0, #0
    52e0:   bd10        pop {r4, pc}

  0x52e2:   2002        movs r0, #2
    52e4:   7020        strb r0, [r4, #0]
    52e6:   2001        movs r0, #1
    52e8:   bd10        pop {r4, pc}
    52ea:   0000

  0x52ec:   0x20000228

spi_gpio_setup:
  0x52f0:   b510        push {r4, lr}
    52f2:   4c04        ldr r4, [pc, #16]   ; (0x5304)
    52f4:   7820        ldrb r0, [r4, #0]
    52f6:   b918        cbnz r0, 0x5300
    52f8:   f7ff fd74   bl 0x4de4           ; call spi_gpio_init
    52fc:   2001        movs r0, #1
    52fe:   7020        strb r0, [r4, #0]
    5300:   2001        movs r0, #1
    5302:   bd10        pop {r4, pc}

  0x5304:   0x20000228

jump_2:
  0x5308:   f7ff bd94   b.w 0x4e34

function_e_41:
  0x530c:   e92d 43f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, lr}
    5310:   f8df c064   ldr.w ip, [pc, #100]   ; 0x5378
    5314:   2100        movs r1, #0
    5316:   f8df 8058   ldr.w r8, [pc, #88]   ; 0x5370
    531a:   f8df 9058   ldr.w r9, [pc, #88]   ; 0x5374
    531e:   460a        mov r2, r1
    5320:   f10c 0790   add.w r7, ip, #144   ; 0x90
    5324:   2000        movs r0, #0
    5326:   eb08 1301   add.w r3, r8, r1, lsl #4
    532a:   eb09 1501   add.w r5, r9, r1, lsl #4
    532e:   eb0c 1401   add.w r4, ip, r1, lsl #4
    5332:   eb07 1601   add.w r6, r7, r1, lsl #4
    5336:   f823 2010   strh.w r2, [r3, r0, lsl #1]
    533a:   f825 2010   strh.w r2, [r5, r0, lsl #1]
    533e:   f824 2010   strh.w r2, [r4, r0, lsl #1]
    5342:   f826 2010   strh.w r2, [r6, r0, lsl #1]
    5346:   1c40        adds r0, r0, #1
    5348:   b2c0        uxtb r0, r0
    534a:   2808        cmp r0, #8
    534c:   d3f3        bcc.n 0x5336
    534e:   1c49        adds r1, r1, #1
    5350:   b2c9        uxtb r1, r1
    5352:   2909        cmp r1, #9
    5354:   d3e6        bcc.n 0x5324
    5356:   4809        ldr r0, [pc, #36]   ; (0x537c)
    5358:   62c2        str r2, [r0, #44]   ; 0x2c
    535a:   3848        subs r0, #72   ; 0x48
    535c:   7002        strb r2, [r0, #0]
    535e:   7082        strb r2, [r0, #2]
    5360:   82c2        strh r2, [r0, #22]
    5362:   8302        strh r2, [r0, #24]
    5364:   f800 2c31   strb.w r2, [r0, #-49]
    5368:   f800 2c30   strb.w r2, [r0, #-48]
    536c:   e8bd 83f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, pc}

    5370:   0x20002e2c
    5374:   0x20002ebc
    5378:   0x20000b9a
    537c:   0x200000d8  ; pointer_15

function_e_42:
  0x5380:   b5f0        push {r4, r5, r6, r7, lr}
    5382:   ebc0 4000   rsb r0, r0, r0, lsl #16
    5386:   f44f 757a   mov.w r5, #1000   ; 0x3e8
    538a:   fbb0 f0f5   udiv r0, r0, r5
    538e:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    5392:   4358        muls r0, r3
    5394:   f64f 74ff   movw r4, #65535   ; 0xffff
    5398:   fbb0 f0f4   udiv r0, r0, r4
    539c:   b283        uxth r3, r0
    539e:   ebc1 4001   rsb r0, r1, r1, lsl #16
    53a2:   fbb0 f0f5   udiv r0, r0, r5
    53a6:   2200        movs r2, #0
    53a8:   f44f 71e1   mov.w r1, #450   ; 0x1c2
    53ac:   4348        muls r0, r1
    53ae:   fbb0 f0f4   udiv r0, r0, r4
    53b2:   4f0a        ldr r7, [pc, #40]   ; (0x53dc)
    53b4:   4e0a        ldr r6, [pc, #40]   ; (0x53e0)
    53b6:   b285        uxth r5, r0
    53b8:   2000        movs r0, #0
    53ba:   eb07 1102   add.w r1, r7, r2, lsl #4
    53be:   eb06 1402   add.w r4, r6, r2, lsl #4
    53c2:   f821 3010   strh.w r3, [r1, r0, lsl #1]
    53c6:   f824 5010   strh.w r5, [r4, r0, lsl #1]
    53ca:   1c40        adds r0, r0, #1
    53cc:   b2c0        uxtb r0, r0
    53ce:   2808        cmp r0, #8
    53d0:   d3f7        bcc.n 0x53c2
    53d2:   1c52        adds r2, r2, #1
    53d4:   b2d2        uxtb r2, r2
    53d6:   2a09        cmp r2, #9
    53d8:   d3ee        bcc.n 0x53b8
    53da:   bdf0        pop {r4, r5, r6, r7, pc}

    53dc:   0x20002e2c
    53e0:   0x20002ebc

function_e_43:
  0x53e4:   e92d 5ffc   stmdb sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    53e8:   f8df 842c   ldr.w r8, [pc, #1068]   ; 0x5818
    53ec:   2000        movs r0, #0
    53ee:   9000        str r0, [sp, #0]
    53f0:   f8d8 005c   ldr.w r0, [r8, #92]   ; 0x5c
    53f4:   f247 5130   movw r1, #30000   ; 0x7530
    53f8:   4288        cmp r0, r1
    53fa:   d808        bhi.n 0x540e
    53fc:   f898 1000   ldrb.w r1, [r8]
    5400:   4640        mov r0, r8
    5402:   290a        cmp r1, #10
    5404:   d110        bne.n 0x5428
    5406:   6dc0        ldr r0, [r0, #92]   ; 0x5c
    5408:   f5b0 6f7a   cmp.w r0, #4000   ; 0xfa0
    540c:   d90c        bls.n 0x5428
    540e:   2114        movs r1, #20
    5410:   f888 1000   strb.w r1, [r8]
    5414:   2100        movs r1, #0
    5416:   f888 1002   strb.w r1, [r8, #2]
    541a:   f888 1003   strb.w r1, [r8, #3]
    541e:   48ff        ldr r0, [pc, #1020]   ; (0x581c)
    5420:   f8a0 1084   strh.w r1, [r0, #132]   ; 0x84
    5424:   f002 f9ac   bl 0x7780                   ; call function_e_83
    5428:   4cfd        ldr r4, [pc, #1012]   ; (0x5820)
    542a:   8820        ldrh r0, [r4, #0]
    542c:   f04f 0901   mov.w r9, #1
    5430:   bbf0        cbnz r0, 0x54b0
    5432:   f005 0001   and.w r0, r5, #1
    5436:   43c0        mvns r0, r0
    5438:   b2c1        uxtb r1, r0
    543a:   2600        movs r6, #0
    543c:   4638        mov r0, r7
    543e:   f002 fa03   bl 0x7848                   ; call function_e_85
    5442:   49f8        ldr r1, [pc, #992]   ; (0x5824)
    5444:   2000        movs r0, #0
    5446:   1822        adds r2, r4, r0
    5448:   7892        ldrb r2, [r2, #2]
    544a:   540a        strb r2, [r1, r0]
    544c:   1c40        adds r0, r0, #1
    544e:   b2c0        uxtb r0, r0
    5450:   2809        cmp r0, #9
    5452:   d3f8        bcc.n 0x5446
    5454:   7a08        ldrb r0, [r1, #8]
    5456:   2500        movs r5, #0
    5458:   f000 00bf   and.w r0, r0, #191   ; 0xbf
    545c:   7208        strb r0, [r1, #8]
    545e:   7f20        ldrb r0, [r4, #28]
    5460:   f000 00bf   and.w r0, r0, #191   ; 0xbf
    5464:   7720        strb r0, [r4, #28]
    5466:   48ef        ldr r0, [pc, #956]   ; (0x5824)
    5468:   2400        movs r4, #0
    546a:   f810 a005   ldrb.w sl, [r0, r5]
    546e:   48ec        ldr r0, [pc, #944]   ; (0x5820)
    5470:   4428        add r0, r5
    5472:   9001        str r0, [sp, #4]
    5474:   7d01        ldrb r1, [r0, #20]
    5476:   ea81 0b0a   eor.w fp, r1, sl
    547a:   f898 0026   ldrb.w r0, [r8, #38]   ; 0x26
    547e:   4642        mov r2, r8
    5480:   2801        cmp r0, #1
    5482:   d061        beq.n 0x5548
    5484:   2802        cmp r0, #2
    5486:   d061        beq.n 0x554c
    5488:   48e7        ldr r0, [pc, #924]   ; (0x5828)
    548a:   ea5f 71cb   movs.w r1, fp, lsl #31
    548e:   eb00 00c5   add.w r0, r0, r5, lsl #3
    5492:   5d00        ldrb r0, [r0, r4]
    5494:   d07d        beq.n 0x5592
    5496:   f892 303d   ldrb.w r3, [r2, #61]   ; 0x3d
    549a:   eb04 01c5   add.w r1, r4, r5, lsl #3
    549e:   4299        cmp r1, r3
    54a0:   d102        bne.n 0x54a8
    54a2:   20e8        movs r0, #232   ; 0xe8
    54a4:   2301        movs r3, #1
    54a6:   9300        str r3, [sp, #0]
    54a8:   f892 303e   ldrb.w r3, [r2, #62]   ; 0x3e
    54ac:   4299        cmp r1, r3
    54ae:   e000        b.n 0x54b2
    54b0:   e1df        b.n 0x5872
    54b2:   d102        bne.n 0x54ba
    54b4:   20ca        movs r0, #202   ; 0xca
    54b6:   2101        movs r1, #1
    54b8:   9100        str r1, [sp, #0]
    54ba:   7811        ldrb r1, [r2, #0]
    54bc:   290a        cmp r1, #10
    54be:   d001        beq.n 0x54c4
    54c0:   f8c2 905c   str.w r9, [r2, #92]   ; 0x5c
    54c4:   2300        movs r3, #0
    54c6:   75d3        strb r3, [r2, #23]
    54c8:   f892 1032   ldrb.w r1, [r2, #50]   ; 0x32
    54cc:   293f        cmp r1, #63   ; 0x3f
    54ce:   d30f        bcc.n 0x54f0
    54d0:   f898 2000   ldrb.w r2, [r8]
    54d4:   4641        mov r1, r8
    54d6:   2a0a        cmp r2, #10
    54d8:   d00a        beq.n 0x54f0
    54da:   220a        movs r2, #10
    54dc:   700a        strb r2, [r1, #0]
    54de:   4bce        ldr r3, [pc, #824]   ; (0x5818)
    54e0:   3380        adds r3, #128   ; 0x80
    54e2:   f8c3 9024   str.w r9, [r3, #36]   ; 0x24
    54e6:   f8c1 905c   str.w r9, [r1, #92]   ; 0x5c
    54ea:   2200        movs r2, #0
    54ec:   f888 2032   strb.w r2, [r8, #50]   ; 0x32
    54f0:   ea5f 71ca   movs.w r1, sl, lsl #31
    54f4:   d02c        beq.n 0x5550
    54f6:   f898 1032   ldrb.w r1, [r8, #50]   ; 0x32
    54fa:   293f        cmp r1, #63   ; 0x3f
    54fc:   d30c        bcc.n 0x5518
    54fe:   f898 2000   ldrb.w r2, [r8]
    5502:   4641        mov r1, r8
    5504:   2a0a        cmp r2, #10
    5506:   d007        beq.n 0x5518
    5508:   220a        movs r2, #10
    550a:   700a        strb r2, [r1, #0]
    550c:   4bc2        ldr r3, [pc, #776]   ; (0x5818)
    550e:   3380        adds r3, #128   ; 0x80
    5510:   f8c3 9024   str.w r9, [r3, #36]   ; 0x24
    5514:   f8c1 905c   str.w r9, [r1, #92]   ; 0x5c
    5518:   4622        mov r2, r4
    551a:   4629        mov r1, r5
    551c:   f003 f8fc   bl 0x8718                   ; call function_e_12
    5520:   4607        mov r7, r0
    5522:   28e8        cmp r0, #232   ; 0xe8
    5524:   d079        beq.n 0x561a
    5526:   2fca        cmp r7, #202   ; 0xca
    5528:   d00d        beq.n 0x5546
    552a:   49c0        ldr r1, [pc, #768]   ; (0x582c)
    552c:   2000        movs r0, #0
    552e:   f101 022a   add.w r2, r1, #42   ; 0x2a
    5532:   5c0b        ldrb r3, [r1, r0]
    5534:   42ab        cmp r3, r5
    5536:   d102        bne.n 0x553e
    5538:   5c13        ldrb r3, [r2, r0]
    553a:   42a3        cmp r3, r4
    553c:   d06e        beq.n 0x561c
    553e:   1c40        adds r0, r0, #1
    5540:   b2c0        uxtb r0, r0
    5542:   282a        cmp r0, #42   ; 0x2a
    5544:   d3f5        bcc.n 0x5532
    5546:   e12c        b.n 0x57a2
    5548:   48b9        ldr r0, [pc, #740]   ; (0x5830)
    554a:   e79e        b.n 0x548a
    554c:   48b9        ldr r0, [pc, #740]   ; (0x5834)
    554e:   e79c        b.n 0x548a
    5550:   4622        mov r2, r4
    5552:   4629        mov r1, r5
    5554:   f003 f91a   bl 0x878c                   ; call function_e_13
    5558:   4607        mov r7, r0
    555a:   28e8        cmp r0, #232   ; 0xe8
    555c:   d004        beq.n 0x5568
    555e:   f898 0002   ldrb.w r0, [r8, #2]
    5562:   2801        cmp r0, #1
    5564:   d002        beq.n 0x556c
    5566:   e008        b.n 0x557a
    5568:   f888 9002   strb.w r9, [r8, #2]
    556c:   2d08        cmp r5, #8
    556e:   d104        bne.n 0x557a
    5570:   2c07        cmp r4, #7
    5572:   d102        bne.n 0x557a
    5574:   2014        movs r0, #20
    5576:   f888 0000   strb.w r0, [r8]
    557a:   f898 1020   ldrb.w r1, [r8, #32]
    557e:   4640        mov r0, r8
    5580:   2901        cmp r1, #1
    5582:   d109        bne.n 0x5598
    5584:   210a        movs r1, #10
    5586:   7001        strb r1, [r0, #0]
    5588:   4aa3        ldr r2, [pc, #652]   ; (0x5818)
    558a:   3280        adds r2, #128   ; 0x80
    558c:   f8c2 9024   str.w r9, [r2, #36]   ; 0x24
    5590:   e000        b.n 0x5594
    5592:   e160        b.n 0x5856
    5594:   f8c0 905c   str.w r9, [r0, #92]   ; 0x5c
    5598:   7800        ldrb r0, [r0, #0]
    559a:   2802        cmp r0, #2
    559c:   d002        beq.n 0x55a4
    559e:   2804        cmp r0, #4
    55a0:   d124        bne.n 0x55ec
    55a2:   e024        b.n 0x55ee
    55a4:   2fe8        cmp r7, #232   ; 0xe8
    55a6:   d021        beq.n 0x55ec
    55a8:   2fca        cmp r7, #202   ; 0xca
    55aa:   d01f        beq.n 0x55ec
    55ac:   2f10        cmp r7, #16
    55ae:   d005        beq.n 0x55bc
    55b0:   2f37        cmp r7, #55   ; 0x37
    55b2:   d003        beq.n 0x55bc
    55b4:   2f36        cmp r7, #54   ; 0x36
    55b6:   d001        beq.n 0x55bc
    55b8:   2f38        cmp r7, #56   ; 0x38
    55ba:   d103        bne.n 0x55c4
    55bc:   f898 0002   ldrb.w r0, [r8, #2]
    55c0:   2801        cmp r0, #1
    55c2:   d013        beq.n 0x55ec
    55c4:   f898 1002   ldrb.w r1, [r8, #2]
    55c8:   f888 1035   strb.w r1, [r8, #53]   ; 0x35
    55cc:   f888 5033   strb.w r5, [r8, #51]   ; 0x33
    55d0:   f888 4034   strb.w r4, [r8, #52]   ; 0x34
    55d4:   2103        movs r1, #3
    55d6:   f888 1000   strb.w r1, [r8]
    55da:   2100        movs r1, #0
    55dc:   4a96        ldr r2, [pc, #600]   ; (0x5838)
    55de:   f888 1032   strb.w r1, [r8, #50]   ; 0x32
    55e2:   4608        mov r0, r1
    55e4:   5411        strb r1, [r2, r0]
    55e6:   1c40        adds r0, r0, #1
    55e8:   28ff        cmp r0, #255   ; 0xff
    55ea:   d9fb        bls.n 0x55e4
    55ec:   e0a1        b.n 0x5732
    55ee:   2fe8        cmp r7, #232   ; 0xe8
    55f0:   d059        beq.n 0x56a6
    55f2:   f898 0032   ldrb.w r0, [r8, #50]   ; 0x32
    55f6:   283f        cmp r0, #63   ; 0x3f
    55f8:   d201        bcs.n 0x55fe
    55fa:   2fca        cmp r7, #202   ; 0xca
    55fc:   d119        bne.n 0x5632
    55fe:   4641        mov r1, r8
    5600:   b1a8        cbz r0, 0x562e
    5602:   283f        cmp r0, #63   ; 0x3f
    5604:   d30b        bcc.n 0x561e
    5606:   200a        movs r0, #10
    5608:   460a        mov r2, r1
    560a:   7008        strb r0, [r1, #0]
    560c:   4982        ldr r1, [pc, #520]   ; (0x5818)
    560e:   3180        adds r1, #128   ; 0x80
    5610:   f8c1 9024   str.w r9, [r1, #36]   ; 0x24
    5614:   f8c2 905c   str.w r9, [r2, #92]   ; 0x5c
    5618:   e00b        b.n 0x5632
    561a:   e0a8        b.n 0x576e
    561c:   e0ab        b.n 0x5776
    561e:   f003 f965   bl 0x88ec
    5622:   2801        cmp r0, #1
    5624:   d105        bne.n 0x5632
    5626:   2105        movs r1, #5
    5628:   f888 1000   strb.w r1, [r8]
    562c:   e001        b.n 0x5632
    562e:   f881 9000   strb.w r9, [r1]
    5632:   f898 0002   ldrb.w r0, [r8, #2]
    5636:   2801        cmp r0, #1
    5638:   d177        bne.n 0x572a
    563a:   9800        ldr r0, [sp, #0]
    563c:   2801        cmp r0, #1
    563e:   d074        beq.n 0x572a
    5640:   2fca        cmp r7, #202   ; 0xca
    5642:   d01f        beq.n 0x5684
    5644:   4979        ldr r1, [pc, #484]   ; (0x582c)
    5646:   2000        movs r0, #0
    5648:   f101 022a   add.w r2, r1, #42   ; 0x2a
    564c:   5c0b        ldrb r3, [r1, r0]
    564e:   42ab        cmp r3, r5
    5650:   d102        bne.n 0x5658
    5652:   5c13        ldrb r3, [r2, r0]
    5654:   42a3        cmp r3, r4
    5656:   d004        beq.n 0x5662
    5658:   1c40        adds r0, r0, #1
    565a:   b2c0        uxtb r0, r0
    565c:   282a        cmp r0, #42   ; 0x2a
    565e:   d3f5        bcc.n 0x564c
    5660:   e010        b.n 0x5684
    5662:   282a        cmp r0, #42   ; 0x2a
    5664:   d20e        bcs.n 0x5684
    5666:   2201        movs r2, #1
    5668:   f000 011f   and.w r1, r0, #31
    566c:   408a        lsls r2, r1
    566e:   4f6a        ldr r7, [pc, #424]   ; (0x5818)
    5670:   0941        lsrs r1, r0, #5
    5672:   37f8        adds r7, #248   ; 0xf8
    5674:   f857 3021   ldr.w r3, [r7, r1, lsl #2]
    5678:   4313        orrs r3, r2
    567a:   f847 3021   str.w r3, [r7, r1, lsl #2]
    567e:   496b        ldr r1, [pc, #428]   ; (0x582c)
    5680:   3154        adds r1, #84   ; 0x54
    5682:   5c0f        ldrb r7, [r1, r0]
    5684:   2fc4        cmp r7, #196   ; 0xc4
    5686:   d00f        beq.n 0x56a8
    5688:   dc06        bgt.n 0x5698
    568a:   2f05        cmp r7, #5
    568c:   d025        beq.n 0x56da
    568e:   2f0a        cmp r7, #10
    5690:   d01e        beq.n 0x56d0
    5692:   2f17        cmp r7, #23
    5694:   d104        bne.n 0x56a0
    5696:   e016        b.n 0x56c6
    5698:   2fc5        cmp r7, #197   ; 0xc5
    569a:   d00b        beq.n 0x56b4
    569c:   2fc6        cmp r7, #198   ; 0xc6
    569e:   d006        beq.n 0x56ae
    56a0:   f898 0001   ldrb.w r0, [r8, #1]
    56a4:   b140        cbz r0, 0x56b8
    56a6:   e044        b.n 0x5732
    56a8:   f002 f9f6   bl 0x7a98               ; call function_e_90
    56ac:   e004        b.n 0x56b8
    56ae:   f002 f9cf   bl 0x7a50               ; call function_e_88
    56b2:   e001        b.n 0x56b8
    56b4:   f002 fa06   bl 0x7ac4               ; call function_e_91
    56b8:   2601        movs r6, #1
    56ba:   2006        movs r0, #6
    56bc:   f8c8 0060   str.w r0, [r8, #96]   ; 0x60
    56c0:   f8c8 0064   str.w r0, [r8, #100]   ; 0x64
    56c4:   e03c        b.n 0x5740
    56c6:   f8d8 1064   ldr.w r1, [r8, #100]   ; 0x64
    56ca:   4640        mov r0, r8
    56cc:   311e        adds r1, #30
    56ce:   e009        b.n 0x56e4
    56d0:   f8d8 1064   ldr.w r1, [r8, #100]   ; 0x64
    56d4:   4640        mov r0, r8
    56d6:   31c8        adds r1, #200   ; 0xc8
    56d8:   e004        b.n 0x56e4
    56da:   f8d8 1064   ldr.w r1, [r8, #100]   ; 0x64
    56de:   4640        mov r0, r8
    56e0:   f501 717a   add.w r1, r1, #1000   ; 0x3e8
    56e4:   6641        str r1, [r0, #100]   ; 0x64
    56e6:   f8d8 0064   ldr.w r0, [r8, #100]   ; 0x64
    56ea:   f64f 0130   movw r1, #63536   ; 0xf830
    56ee:   4288        cmp r0, r1
    56f0:   d21f        bcs.n 0x5732
    56f2:   f898 0032   ldrb.w r0, [r8, #50]   ; 0x32
    56f6:   b158        cbz r0, 0x5710
    56f8:   f8d8 1064   ldr.w r1, [r8, #100]   ; 0x64
    56fc:   0a0a        lsrs r2, r1, #8
    56fe:   494e        ldr r1, [pc, #312]   ; (0x5838)
    5700:   eb01 0080   add.w r0, r1, r0, lsl #2
    5704:   f800 2d02   strb.w r2, [r0, #-2]!
    5708:   f8d8 1064   ldr.w r1, [r8, #100]   ; 0x64
    570c:   7041        strb r1, [r0, #1]
    570e:   e007        b.n 0x5720
    5710:   f8d8 0064   ldr.w r0, [r8, #100]   ; 0x64
    5714:   f8c8 0060   str.w r0, [r8, #96]   ; 0x60
    5718:   2100        movs r1, #0
    571a:   4608        mov r0, r1
    571c:   f002 fdf8   bl 0x8310                   ; call function_e_11
    5720:   2602        movs r6, #2
    5722:   f888 9001   strb.w r9, [r8, #1]
    5726:   e08f        b.n 0x5848
    5728:   e7ff        b.n 0x572a
    572a:   f898 1001   ldrb.w r1, [r8, #1]
    572e:   4640        mov r0, r8
    5730:   b111        cbz r1, 0x5738
    5732:   2e01        cmp r6, #1
    5734:   d004        beq.n 0x5740
    5736:   e087        b.n 0x5848
    5738:   2601        movs r6, #1
    573a:   2106        movs r1, #6
    573c:   6601        str r1, [r0, #96]   ; 0x60
    573e:   6641        str r1, [r0, #100]   ; 0x64
    5740:   f898 0000   ldrb.w r0, [r8]
    5744:   2804        cmp r0, #4
    5746:   d17f        bne.n 0x5848
    5748:   2101        movs r1, #1
    574a:   4638        mov r0, r7
    574c:   f7fd fb86   bl 0x2e5c                   ; call function_e_32
    5750:   4638        mov r0, r7
    5752:   f7fe f845   bl 0x37e0               ; function_13
    5756:   2801        cmp r0, #1
    5758:   d103        bne.n 0x5762
    575a:   492f        ldr r1, [pc, #188]   ; (0x5818)
    575c:   3180        adds r1, #128   ; 0x80
    575e:   f8c1 9010   str.w r9, [r1, #16]
    5762:   2101        movs r1, #1
    5764:   4638        mov r0, r7
    5766:   f002 fdd3   bl 0x8310                   ; call function_e_11
    576a:   2600        movs r6, #0
    576c:   e06c        b.n 0x5848
    576e:   2000        movs r0, #0
    5770:   f888 0002   strb.w r0, [r8, #2]
    5774:   e6d9        b.n 0x552a
    5776:   282a        cmp r0, #42   ; 0x2a
    5778:   d213        bcs.n 0x57a2
    577a:   f8df c09c   ldr.w ip, [pc, #156]   ; 0x5818
    577e:   ea4f 1e50   mov.w lr, r0, lsr #5
    5782:   f10c 0cf8   add.w ip, ip, #248   ; 0xf8
    5786:   f000 031f   and.w r3, r0, #31
    578a:   f85c 102e   ldr.w r1, [ip, lr, lsl #2]
    578e:   fa09 f203   lsl.w r2, r9, r3
    5792:   4211        tst r1, r2
    5794:   d005        beq.n 0x57a2
    5796:   4b25        ldr r3, [pc, #148]   ; (0x582c)
    5798:   337e        adds r3, #126   ; 0x7e
    579a:   4391        bics r1, r2
    579c:   5c1f        ldrb r7, [r3, r0]
    579e:   f84c 102e   str.w r1, [ip, lr, lsl #2]
    57a2:   f898 0001   ldrb.w r0, [r8, #1]
    57a6:   bb10        cbnz r0, 0x57ee
    57a8:   4638        mov r0, r7
    57aa:   f7ff f807   bl 0x47bc               ; call function_e_23
    57ae:   491a        ldr r1, [pc, #104]   ; (0x5818)
    57b0:   4638        mov r0, r7
    57b2:   3180        adds r1, #128   ; 0x80
    57b4:   f8c1 9010   str.w r9, [r1, #16]
    57b8:   2100        movs r1, #0
    57ba:   f7fd fb4f   bl 0x2e5c               ; call function_e_32
    57be:   f898 0000   ldrb.w r0, [r8]
    57c2:   2801        cmp r0, #1
    57c4:   d004        beq.n 0x57d0
    57c6:   2803        cmp r0, #3
    57c8:   d00a        beq.n 0x57e0
    57ca:   2804        cmp r0, #4
    57cc:   d11e        bne.n 0x580c
    57ce:   e00f        b.n 0x57f0
    57d0:   f003 f874   bl 0x88bc
    57d4:   2801        cmp r0, #1
    57d6:   d119        bne.n 0x580c
    57d8:   2002        movs r0, #2
    57da:   f888 0000   strb.w r0, [r8]
    57de:   e015        b.n 0x580c
    57e0:   f003 f86c   bl 0x88bc
    57e4:   2801        cmp r0, #1
    57e6:   d111        bne.n 0x580c
    57e8:   2104        movs r1, #4
    57ea:   f888 1000   strb.w r1, [r8]
    57ee:   e00d        b.n 0x580c
    57f0:   2fe8        cmp r7, #232   ; 0xe8
    57f2:   d00b        beq.n 0x580c
    57f4:   2fca        cmp r7, #202   ; 0xca
    57f6:   d009        beq.n 0x580c
    57f8:   f898 1032   ldrb.w r1, [r8, #50]   ; 0x32
    57fc:   b131        cbz r1, 0x580c
    57fe:   f898 0001   ldrb.w r0, [r8, #1]
    5802:   b918        cbnz r0, 0x580c
    5804:   2100        movs r1, #0
    5806:   4638        mov r0, r7
    5808:   f002 fd82   bl 0x8310                   ; call function_e_11
    580c:   f898 0001   ldrb.w r0, [r8, #1]
    5810:   4647        mov r7, r8
    5812:   2801        cmp r0, #1
    5814:   d118        bne.n 0x5848
    5816:   e011        b.n 0x583c

    5818:   0x20000058  ; variable_sram_e_1
    581c:   0x20002e2c
    5820:   0x20002de4  ; pointer_34
    5824:   0x2000090c
    5828:   0x8ec8      ; data_7
    582c:   0x8c36      ; data_13
    5830:   0x8f10      ; data_5
    5834:   0x8f58      ; data_6
    5838:   0x2000080c

    ; contiuation of function_e_43
    583c:   f003 f83e   bl 0x88bc
    5840:   2801        cmp r0, #1
    5842:   d101        bne.n 0x5848
    5844:   2000        movs r0, #0
    5846:   7078        strb r0, [r7, #1]
    5848:   9801        ldr r0, [sp, #4]
    584a:   7d01        ldrb r1, [r0, #20]
    584c:   fa09 f004   lsl.w r0, r9, r4
    5850:   4041        eors r1, r0
    5852:   9801        ldr r0, [sp, #4]
    5854:   7501        strb r1, [r0, #20]
    5856:   1c64        adds r4, r4, #1
    5858:   b2e4        uxtb r4, r4
    585a:   ea4f 0b5b   mov.w fp, fp, lsr #1
    585e:   ea4f 0a5a   mov.w sl, sl, lsr #1
    5862:   2c08        cmp r4, #8
    5864:   f4ff ae09   bcc.w 0x547a
    5868:   1c6d        adds r5, r5, #1
    586a:   b2ed        uxtb r5, r5
    586c:   2d09        cmp r5, #9
    586e:   f4ff adfa   bcc.w 0x5466
    5872:   f898 0000   ldrb.w r0, [r8]
    5876:   4644        mov r4, r8
    5878:   2805        cmp r0, #5
    587a:   d159        bne.n 0x5930
    587c:   f003 f81e   bl 0x88bc
    5880:   2801        cmp r0, #1
    5882:   d155        bne.n 0x5930
    5884:   f894 2035   ldrb.w r2, [r4, #53]   ; 0x35
    5888:   4935        ldr r1, [pc, #212]   ; (0x5960)
    588a:   b112        cbz r2, 0x5892
    588c:   2a01        cmp r2, #1
    588e:   d00e        beq.n 0x58ae
    5890:   e01b        b.n 0x58ca
    5892:   2002        movs r0, #2
    5894:   7008        strb r0, [r1, #0]
    5896:   f894 0032   ldrb.w r0, [r4, #50]   ; 0x32
    589a:   2802        cmp r0, #2
    589c:   d115        bne.n 0x58ca
    589e:   4831        ldr r0, [pc, #196]   ; (0x5964)
    58a0:   7983        ldrb r3, [r0, #6]
    58a2:   b993        cbnz r3, 0x58ca
    58a4:   79c0        ldrb r0, [r0, #7]
    58a6:   2806        cmp r0, #6
    58a8:   d10f        bne.n 0x58ca
    58aa:   2012        movs r0, #18
    58ac:   e00c        b.n 0x58c8
    58ae:   2003        movs r0, #3
    58b0:   7008        strb r0, [r1, #0]
    58b2:   f894 0032   ldrb.w r0, [r4, #50]   ; 0x32
    58b6:   2802        cmp r0, #2
    58b8:   d107        bne.n 0x58ca
    58ba:   482a        ldr r0, [pc, #168]   ; (0x5964)
    58bc:   7983        ldrb r3, [r0, #6]
    58be:   b923        cbnz r3, 0x58ca
    58c0:   79c0        ldrb r0, [r0, #7]
    58c2:   2806        cmp r0, #6
    58c4:   d101        bne.n 0x58ca
    58c6:   2013        movs r0, #19
    58c8:   7008        strb r0, [r1, #0]
    58ca:   4b26        ldr r3, [pc, #152]   ; (0x5964)
    58cc:   2000        movs r0, #0
    58ce:   180e        adds r6, r1, r0
    58d0:   5c1d        ldrb r5, [r3, r0]
    58d2:   1c40        adds r0, r0, #1
    58d4:   7075        strb r5, [r6, #1]
    58d6:   28ff        cmp r0, #255   ; 0xff
    58d8:   d9f9        bls.n 0x58ce
    58da:   f104 0418   add.w r4, r4, #24
    58de:   4922        ldr r1, [pc, #136]   ; (0x5968)
    58e0:   7ba0        ldrb r0, [r4, #14]
    58e2:   eb00 0040   add.w r0, r0, r0, lsl #1
    58e6:   eb01 1000   add.w r0, r1, r0, lsl #4
    58ea:   7821        ldrb r1, [r4, #0]
    58ec:   eb00 1001   add.w r0, r0, r1, lsl #4
    58f0:   b392        cbz r2, 0x5958
    58f2:   f1a0 000c   sub.w r0, r0, #12
    58f6:   7f22        ldrb r2, [r4, #28]
    58f8:   7ee3        ldrb r3, [r4, #27]
    58fa:   6881        ldr r1, [r0, #8]
    58fc:   eb02 02c3   add.w r2, r2, r3, lsl #3
    5900:   6800        ldr r0, [r0, #0]
    5902:   eb01 2502   add.w r5, r1, r2, lsl #8
    5906:   4410        add r0, r2
    5908:   f1a4 0418   sub.w r4, r4, #24
    590c:   f04f 0200   mov.w r2, #0
    5910:   4601        mov r1, r0
    5912:   f003 f80f   bl 0x8934                   ; call function_e_97
    5916:   2201        movs r2, #1
    5918:   f105 01ff   add.w r1, r5, #255   ; 0xff
    591c:   4628        mov r0, r5
    591e:   f003 f809   bl 0x8934                   ; call function_e_97
    5922:   f001 ff2d   bl 0x7780                   ; call function_e_83
    5926:   f884 9000   strb.w r9, [r4]
    592a:   2000        movs r0, #0
    592c:   f884 0032   strb.w r0, [r4, #50]   ; 0x32
    5930:   f002 ffc4   bl 0x88bc
    5934:   2801        cmp r0, #1
    5936:   d10d        bne.n 0x5954
    5938:   7820        ldrb r0, [r4, #0]
    593a:   2814        cmp r0, #20
    593c:   d10a        bne.n 0x5954
    593e:   2500        movs r5, #0
    5940:   75a5        strb r5, [r4, #22]
    5942:   f001 ff1d   bl 0x7780                   ; call function_e_83
    5946:   65e5        str r5, [r4, #92]   ; 0x5c
    5948:   7025        strb r5, [r4, #0]
    594a:   4808        ldr r0, [pc, #32]   ; (0x596c)
    594c:   6245        str r5, [r0, #36]   ; 0x24
    594e:   3078        adds r0, #120   ; 0x78
    5950:   6005        str r5, [r0, #0]
    5952:   6045        str r5, [r0, #4]
    5954:   e8bd 9ffc   ldmia.w sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
  0x5958:   e7ff        b.n 0x595a
    595a:   f1a0 0010   sub.w r0, r0, #16
    595e:   e7ca        b.n 0x58f6

  0x5960:   0x20001cba
  0x5964:   0x2000080c
  0x5968:   0x8d50      ; data_16
  0x596c:   0x200000d8  ; pointer_15

debug_cmd:
    ; r0 = subcmd
    ; r1 unused
    ; r2 unused
    ; Not precisely sure what any of these subcommands do, but they look like debugging features
  0x5970:   b508        push {r3, lr}
    5972:   490e        ldr r1, [pc, #56]       ; r1 = (0x59ac)
    5974:   4a0e        ldr r2, [pc, #56]       ; r2 = (0x59b0)
    5976:   2806        cmp r0, #6
    5978:   d216        bcs.n 0x59a8            ; default case if r0 >= 6

    ; table branch
    597a:   e8df f000   tbb [pc, r0]
    597e:   03          ; 0x5984
            03          ; 0x5984
    5980:   03          ; 0x5984
            07          ; 0x598e
    5982:   0a          ; 0x5992
            12          ; 0x59a2

    ; 0,1,2
  0x5984:   4a0b        ldr r2, [pc, #44]       ; r2 = (0x59b4)
    5986:   7010        strb r0, [r2, #0]       ; [r2] = r0
    5988:   2000        movs r0, #0             ; r0 = 0
    598a:   e000        b.n 0x598e              ; branch

    ; 3
  0x598c:   2001        movs r0, #1             ; r0 = 1
  0x598e:   7008        strb r0, [r1, #0]       ; [r1] = r0
    5990:   e00a        b.n 0x59a8              ; return

    ; 4
  0x5992:   7810        ldrb r0, [r2, #0]       ; r0 = [r2]
    5994:   9000        str r0, [sp, #0]        ; [sp] = r0
    5996:   2240        movs r2, #64
    5998:   4669        mov r1, sp
    599a:   2003        movs r0, #3
    599c:   f001 fad2   bl 0x6f44               ; call usb_copy_send(3, sp, 64)
    59a0:   e002        b.n 0x59a8              ; return

    ; 5
  0x59a2:   4805        ldr r0, [pc, #20]       ; r0 = (0x59b8)
    59a4:   7b00        ldrb r0, [r0, #12]      ; r0 = [r0 + 0xc]
    59a6:   7010        strb r0, [r2, #0]       ; [r2] = r0

  0x59a8:   204f        movs r0, #79
    59aa:   bd08        pop {r3, pc}            ; return 0x4f

  0x59ac:   0x200001ce  ; pointer_42
  0x59b0:   0x200001d4  ; pointer_40
  0x59b4:   0x200001cd  ; pointer_41
  0x59b8:   0x200007cc

function_63:
  0x59bc:   e92d 4ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59c0:   b089        sub sp, #36   ; 0x24
    59c2:   f000 f8fd   bl 0x5bc0               ; call function_64
    59c6:   4879        ldr r0, [pc, #484]   ; (0x5bac)
    59c8:   7800        ldrb r0, [r0, #0]
    59ca:   2801        cmp r0, #1
    59cc:   d17d        bne.n 0x5aca
    59ce:   2101        movs r1, #1
    59d0:   f240 3003   movw r0, #771   ; 0x303
    59d4:   f7fd fd3e   bl 0x3454               ; call ckcu_apb1_clock_enable
    59d8:   a804        add r0, sp, #16
    59da:   f7fd fe2c   bl 0x3636
    59de:   f240 19c1   movw r9, #449   ; 0x1c1
    59e2:   f8ad 9010   strh.w r9, [sp, #16]
    59e6:   a904        add r1, sp, #16
    59e8:   4871        ldr r0, [pc, #452]   ; (0x5bb0)
    59ea:   f7fd fe0f   bl 0x360c
    59ee:   4668        mov r0, sp
    59f0:   f7fd fe04   bl 0x35fc               ; call function_e_36
    59f4:   2501        movs r5, #1
    59f6:   2400        movs r4, #0
    59f8:   f88d 5008   strb.w r5, [sp, #8]
    59fc:   2606        movs r6, #6
    59fe:   f8ad 400a   strh.w r4, [sp, #10]
    5a02:   f88d 4000   strb.w r4, [sp]
    5a06:   4669        mov r1, sp              ; r1 = sp
    5a08:   4869        ldr r0, [pc, #420]      ; r0 = (0x5bb0) GPTM0
    5a0a:   9601        str r6, [sp, #4]
    5a0c:   f7fd fdcb   bl 0x35a6               ; call function_62
    5a10:   f88d 5000   strb.w r5, [sp]
    5a14:   4669        mov r1, sp              ; r1 = sp
    5a16:   4866        ldr r0, [pc, #408]      ; r0 = (0x5bb0) GPTM0
    5a18:   9601        str r6, [sp, #4]
    5a1a:   f7fd fdc4   bl 0x35a6               ; call function_62
    5a1e:   f04f 0802   mov.w r8, #2
    5a22:   f88d 8000   strb.w r8, [sp]
    5a26:   4669        mov r1, sp
    5a28:   4861        ldr r0, [pc, #388]      ; r0 = (0x5bb0)
    5a2a:   9601        str r6, [sp, #4]
    5a2c:   f7fd fdbb   bl 0x35a6               ; call function_62
    5a30:   f04f 0a03   mov.w sl, #3
    5a34:   f88d a000   strb.w sl, [sp]
    5a38:   4669        mov r1, sp
    5a3a:   485d        ldr r0, [pc, #372]      ; r0 = (0x5bb0)
    5a3c:   9601        str r6, [sp, #4]
    5a3e:   f7fd fdb2   bl 0x35a6               ; call function_62
    5a42:   485b        ldr r0, [pc, #364]      ; r0 = (0x5bb0)
    5a44:   67c4        str r4, [r0, #124]      ; 0x7c
    5a46:   a804        add r0, sp, #16
    5a48:   f7fd fdf5   bl 0x3636
    5a4c:   f8ad 9010   strh.w r9, [sp, #16]
    5a50:   a904        add r1, sp, #16
    5a52:   4858        ldr r0, [pc, #352]      ; (0x5bb4)
    5a54:   f7fd fdda   bl 0x360c
    5a58:   4668        mov r0, sp
    5a5a:   f7fd fdcf   bl 0x35fc               ; call function_e_36
    5a5e:   f88d 5008   strb.w r5, [sp, #8]
    5a62:   f8ad 400a   strh.w r4, [sp, #10]
    5a66:   f88d 4000   strb.w r4, [sp]
    5a6a:   4669        mov r1, sp
    5a6c:   4851        ldr r0, [pc, #324]      ; (0x5bb4)
    5a6e:   9601        str r6, [sp, #4]
    5a70:   f7fd fd99   bl 0x35a6               ; call function_62
    5a74:   f88d 5000   strb.w r5, [sp]
    5a78:   4669        mov r1, sp
    5a7a:   484e        ldr r0, [pc, #312]      ; (0x5bb4)
    5a7c:   9601        str r6, [sp, #4]
    5a7e:   f7fd fd92   bl 0x35a6               ; call function_62
    5a82:   f88d 8000   strb.w r8, [sp]
    5a86:   4669        mov r1, sp
    5a88:   484a        ldr r0, [pc, #296]      ; (0x5bb4)
    5a8a:   9601        str r6, [sp, #4]
    5a8c:   f7fd fd8b   bl 0x35a6               ; call function_62
    5a90:   2707        movs r7, #7
    5a92:   f88d a000   strb.w sl, [sp]
    5a96:   4669        mov r1, sp
    5a98:   4846        ldr r0, [pc, #280]      ; (0x5bb4)
    5a9a:   9701        str r7, [sp, #4]
    5a9c:   f7fd fd83   bl 0x35a6               ; call function_62
    5aa0:   4844        ldr r0, [pc, #272]      ; (0x5bb4)
    5aa2:   67c4        str r4, [r0, #124]      ; 0x7c
    5aa4:   a805        add r0, sp, #20
    5aa6:   f7ff f93e   bl 0x4d26                   ; call function_e_31
    5aaa:   f8df b10c   ldr.w fp, [pc, #268]    ; 0x5bb8
    5aae:   f8ad 9014   strh.w r9, [sp, #20]
    5ab2:   a905        add r1, sp, #20
    5ab4:   4658        mov r0, fp
    5ab6:   f7ff f91e   bl 0x4cf6                   ; call function_e_30
    5aba:   4668        mov r0, sp
    5abc:   f7ff f90f   bl 0x4cde                   ; call clear_some_mem
    5ac0:   f88d 5008   strb.w r5, [sp, #8]
    5ac4:   f8ad 400e   strh.w r4, [sp, #14]
    5ac8:   e000        b.n 0x5acc
    5aca:   e06a        b.n 0x5ba2
    5acc:   f88d 4000   strb.w r4, [sp]
    5ad0:   4669        mov r1, sp
    5ad2:   4658        mov r0, fp
    5ad4:   9701        str r7, [sp, #4]
    5ad6:   f7ff f8c9   bl 0x4c6c                   ; call function_e_29
    5ada:   f88d 5000   strb.w r5, [sp]
    5ade:   4669        mov r1, sp
    5ae0:   4658        mov r0, fp
    5ae2:   9701        str r7, [sp, #4]
    5ae4:   f7ff f8c2   bl 0x4c6c                   ; call function_e_29
    5ae8:   f88d 8000   strb.w r8, [sp]
    5aec:   4669        mov r1, sp
    5aee:   4658        mov r0, fp
    5af0:   9701        str r7, [sp, #4]
    5af2:   f7ff f8bb   bl 0x4c6c                   ; call function_e_29
    5af6:   f88d a000   strb.w sl, [sp]
    5afa:   4669        mov r1, sp
    5afc:   4658        mov r0, fp
    5afe:   9701        str r7, [sp, #4]
    5b00:   f7ff f8b4   bl 0x4c6c                   ; call function_e_29
    5b04:   4658        mov r0, fp
    5b06:   f8cb 407c   str.w r4, [fp, #124]   ; 0x7c
    5b0a:   2101        movs r1, #1
    5b0c:   f7ff f89a   bl 0x4c44                   ; call function_e_27
    5b10:   a805        add r0, sp, #20
    5b12:   f7ff f908   bl 0x4d26                   ; call function_e_31
    5b16:   f8ad 9014   strh.w r9, [sp, #20]
    5b1a:   f8df 90a0   ldr.w r9, [pc, #160]   ; 0x5bbc
    5b1e:   a905        add r1, sp, #20
    5b20:   4648        mov r0, r9
    5b22:   f7ff f8e8   bl 0x4cf6                   ; call function_e_30
    5b26:   4668        mov r0, sp
    5b28:   f7ff f8d9   bl 0x4cde                   ; call clear_some_mem
    5b2c:   f88d 5008   strb.w r5, [sp, #8]
    5b30:   f8ad 400e   strh.w r4, [sp, #14]
    5b34:   f88d 4000   strb.w r4, [sp]
    5b38:   4669        mov r1, sp
    5b3a:   4648        mov r0, r9
    5b3c:   9601        str r6, [sp, #4]
    5b3e:   f7ff f895   bl 0x4c6c                   ; call function_e_29
    5b42:   f88d 5000   strb.w r5, [sp]
    5b46:   4669        mov r1, sp
    5b48:   4648        mov r0, r9
    5b4a:   9701        str r7, [sp, #4]
    5b4c:   f7ff f88e   bl 0x4c6c                   ; call function_e_29
    5b50:   f88d 8000   strb.w r8, [sp]
    5b54:   4669        mov r1, sp
    5b56:   4648        mov r0, r9
    5b58:   9701        str r7, [sp, #4]
    5b5a:   f7ff f887   bl 0x4c6c                   ; call function_e_29
    5b5e:   f88d a000   strb.w sl, [sp]
    5b62:   4669        mov r1, sp
    5b64:   4648        mov r0, r9
    5b66:   9701        str r7, [sp, #4]
    5b68:   f7ff f880   bl 0x4c6c                   ; call function_e_29
    5b6c:   4648        mov r0, r9
    5b6e:   f8c9 407c   str.w r4, [r9, #124]   ; 0x7c
    5b72:   2101        movs r1, #1
    5b74:   f7ff f866   bl 0x4c44                   ; call function_e_27
    5b78:   2101        movs r1, #1
    5b7a:   480d        ldr r0, [pc, #52]   ; (0x5bb0)
    5b7c:   f7fd fd09   bl 0x3592
    5b80:   2101        movs r1, #1
    5b82:   480c        ldr r0, [pc, #48]   ; (0x5bb4)
    5b84:   f7fd fd05   bl 0x3592
    5b88:   2101        movs r1, #1
    5b8a:   4658        mov r0, fp
    5b8c:   f7ff f864   bl 0x4c58                   ; call function_e_28
    5b90:   2101        movs r1, #1
    5b92:   4648        mov r0, r9
    5b94:   f7ff f860   bl 0x4c58                   ; call function_e_28
    5b98:   f000 f886   bl 0x5ca8
    5b9c:   4903        ldr r1, [pc, #12]   ; (0x5bac)
    5b9e:   f881 8000   strb.w r8, [r1]
    5ba2:   b009        add sp, #36   ; 0x24
    5ba4:   2001        movs r0, #1
    5ba6:   e8bd 8ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    5baa:   0000
  0x5bac:   0x2000021d
  0x5bb0:   0x4006e000  ; GPTM0
  0x5bb4:   0x4006f000  ; GPTM1
  0x5bb8:   0x4002c000  ; MCTM0
  0x5bbc:   0x4002d000  ; MCTM1

function_64:
  0x5bc0:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    5bc4:   4c31        ldr r4, [pc, #196]      ; r4 = (0x5c8c)
    5bc6:   7820        ldrb r0, [r4, #0]       ; r0 = [r4]
    5bc8:   bbf0        cbnz r0, 0x5c48         ; branch if r0 == 0
                                                ; // Enable GPIO A,B,C clock
    5bca:   2101        movs r1, #1             ; r1 = 1
    5bcc:   f44f 20e0   mov.w r0, #458752       ; r0 = 0x70000
    5bd0:   f7fd fc28   bl 0x3424               ; call ckcu_ahb_clock_enable(0x70000, 1)
    5bd4:   4d2e        ldr r5, [pc, #184]      ; r5 = (0x5c90) GPIO C
    5bd6:   2201        movs r2, #1             ; r2 = 1
    5bd8:   0251        lsls r1, r2, #9         ; r1 = r2 << 9 = 0x200
    5bda:   4628        mov r0, r5              ; r0 = GPIO C
    5bdc:   f7fd fca6   bl 0x352c               ; call gpio_set_output_current(GPIO C, 0x200, 1)
    5be0:   2201        movs r2, #1             ; r2 = 1
    5be2:   0296        lsls r6, r2, #10        ; r6 = r2 << 10 = 0x400
    5be4:   4631        mov r1, r6              ; r1 = r6
    5be6:   4628        mov r0, r5              ; r0 = GPIO C
    5be8:   f7fd fca0   bl 0x352c               ; call gpio_set_output_current(GPIO C, 0x400, 1)
    5bec:   2201        movs r2, #1             ; r2 = 1
    5bee:   02d1        lsls r1, r2, #11        ; r1 = r2 << 11 = 0x800
    5bf0:   4628        mov r0, r5              ; r0 = GPIO C
    5bf2:   f7fd fc9b   bl 0x352c               ; call gpio_set_output_current(GPIO C, 0x800, 1)
    5bf6:   4f27        ldr r7, [pc, #156]      ; r7 = (0x5c94) GPIO A
    5bf8:   2201        movs r2, #1
    5bfa:   2180        movs r1, #128   ; 0x80
    5bfc:   4638        mov r0, r7
    5bfe:   f7fd fc95   bl 0x352c               ; call gpio_set_output_current(GPIO A, 0x80, 1)
    5c02:   2201        movs r2, #1
    5c04:   4611        mov r1, r2
    5c06:   4638        mov r0, r7
    5c08:   f7fd fc90   bl 0x352c               ; call gpio_set_output_current(GPIO A, 1, 1)
    5c0c:   2201        movs r2, #1
    5c0e:   2102        movs r1, #2
    5c10:   4638        mov r0, r7
    5c12:   f7fd fc8b   bl 0x352c               ; call gpio_set_output_current(GPIO A, 2, 1)
    5c16:   2201        movs r2, #1
    5c18:   2104        movs r1, #4
    5c1a:   4638        mov r0, r7
    5c1c:   f7fd fc86   bl 0x352c               ; call gpio_set_output_current(GPIO A, 4, 1)
    5c20:   2201        movs r2, #1
    5c22:   2108        movs r1, #8
    5c24:   4628        mov r0, r5
    5c26:   f7fd fc91   bl 0x354c               ; call gpio_set_open_drain(GPIO C, 8, 1)
    5c2a:   2201        movs r2, #1
    5c2c:   0391        lsls r1, r2, #14
    5c2e:   4638        mov r0, r7
    5c30:   f7fd fc8c   bl 0x354c               ; call gpio_set_open_drain(GPIO A, 0x4000, 1)
    5c34:   f8df 8060   ldr.w r8, [pc, #96]     ; r8 = (0x5c98) GPIO B
    5c38:   2201        movs r2, #1
    5c3a:   4611        mov r1, r2
    5c3c:   4640        mov r0, r8
    5c3e:   f7fd fc85   bl 0x354c               ; call gpio_set_open_drain(GPIO B, 1, 1)
    5c42:   2201        movs r2, #1
    5c44:   2104        movs r1, #4
    5c46:   e000        b.n 0x5c4a
  0x5c48:   e01d        b.n 0x5c86
  0x5c4a:   4640        mov r0, r8
    5c4c:   f7fd fc7e   bl 0x354c               ; call gpio_set_open_drain(GPIO B, 4, 1)
    5c50:   2201        movs r2, #1
    5c52:   2180        movs r1, #128           ; 0x80
    5c54:   4628        mov r0, r5
    5c56:   f7fd fc79   bl 0x354c               ; call gpio_set_open_drain(GPIO C, 0x80, 1)
    5c5a:   2201        movs r2, #1
    5c5c:   2140        movs r1, #64            ; 0x40
    5c5e:   4640        mov r0, r8
    5c60:   f7fd fc64   bl 0x352c               ; call gpio_set_output_current(GPIO B, 0x40, 1)
    5c64:   2201        movs r2, #1
    5c66:   4631        mov r1, r6
    5c68:   4638        mov r0, r7
    5c6a:   f7fd fc6f   bl 0x354c               ; call gpio_set_open_drain(GPIO A, 0x400, 1)
    5c6e:   2201        movs r2, #1
    5c70:   2110        movs r1, #16
    5c72:   4628        mov r0, r5
    5c74:   f7fd fc6a   bl 0x354c               ; call gpio_set_open_drain(GPIO C, 0x10, 1)
    5c78:   2201        movs r2, #1
    5c7a:   2140        movs r1, #64            ; 0x40
    5c7c:   4628        mov r0, r5
    5c7e:   f7fd fc65   bl 0x354c               ; call gpio_set_open_drain(GPIO C, 0x40, 1)
    5c82:   2001        movs r0, #1             ; r0 = 1
    5c84:   7020        strb r0, [r4, #0]       ; [r4] = r0
  0x5c86:   2001        movs r0, #1             ; r0 = 1
    5c88:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

  0x5c8c:   0x2000021d
  0x5c90:   0x400b4000  ; GPIO C
  0x5c94:   0x400b0000  ; GPIO A
  0x5c98:   0x400b2000  ; GPIO B

function_36:
  0x5c9c:   b108        cbz r0, 0x5ca2          ; branch if r0 == 0
    5c9e:   f000 b887   b.w 0x5db0              ; jump function_50
    5ca2:   f000 b801   b.w 0x5ca8
    5ca6:   0000        movs r0, r0
    5ca8:   b510        push {r4, lr}
    5caa:   4c3e        ldr r4, [pc, #248]      ; r4 = (0x5da4) GPIO C
    5cac:   2202        movs r2, #2             ; r2 = 2
    5cae:   0211        lsls r1, r2, #8         ; r1 = r2 << 8 = 0x200
    5cb0:   4620        mov r0, r4              ; r0 = GPIO C
    5cb2:   f7fd fc53   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5cb6:   2204        movs r2, #4
    5cb8:   2109        movs r1, #9
    5cba:   2002        movs r0, #2
    5cbc:   f7fd faf2   bl 0x32a4               ; call afio_pin_config
    5cc0:   2202        movs r2, #2
    5cc2:   0251        lsls r1, r2, #9
    5cc4:   4620        mov r0, r4
    5cc6:   f7fd fc49   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5cca:   2204        movs r2, #4
    5ccc:   210a        movs r1, #10
    5cce:   2002        movs r0, #2
    5cd0:   f7fd fae8   bl 0x32a4               ; call afio_pin_config
    5cd4:   2202        movs r2, #2
    5cd6:   0291        lsls r1, r2, #10
    5cd8:   4620        mov r0, r4
    5cda:   f7fd fc3f   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5cde:   2204        movs r2, #4
    5ce0:   210b        movs r1, #11
    5ce2:   2002        movs r0, #2
    5ce4:   f7fd fade   bl 0x32a4               ; call afio_pin_config
    5ce8:   4c2f        ldr r4, [pc, #188]      ; r4 = (0x5da8) GPIO A
    5cea:   2202        movs r2, #2
    5cec:   2180        movs r1, #128           ; 0x80
    5cee:   4620        mov r0, r4
    5cf0:   f7fd fc34   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5cf4:   2204        movs r2, #4
    5cf6:   2107        movs r1, #7
    5cf8:   2000        movs r0, #0
    5cfa:   f7fd fad3   bl 0x32a4               ; call afio_pin_config
    5cfe:   2202        movs r2, #2
    5d00:   2101        movs r1, #1
    5d02:   4620        mov r0, r4
    5d04:   f7fd fc2a   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5d08:   2100        movs r1, #0
    5d0a:   2204        movs r2, #4
    5d0c:   4608        mov r0, r1
    5d0e:   f7fd fac9   bl 0x32a4               ; call afio_pin_config
    5d12:   2202        movs r2, #2
    5d14:   4611        mov r1, r2
    5d16:   4620        mov r0, r4
    5d18:   f7fd fc20   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5d1c:   2204        movs r2, #4
    5d1e:   2101        movs r1, #1
    5d20:   2000        movs r0, #0
    5d22:   f7fd fabf   bl 0x32a4               ; call afio_pin_config
    5d26:   2202        movs r2, #2
    5d28:   2104        movs r1, #4
    5d2a:   4620        mov r0, r4
    5d2c:   f7fd fc16   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5d30:   2204        movs r2, #4
    5d32:   2102        movs r1, #2
    5d34:   2000        movs r0, #0
    5d36:   f7fd fab5   bl 0x32a4               ; call afio_pin_config
    5d3a:   2204        movs r2, #4
    5d3c:   2103        movs r1, #3
    5d3e:   2002        movs r0, #2
    5d40:   f7fd fab0   bl 0x32a4               ; call afio_pin_config
    5d44:   2204        movs r2, #4
    5d46:   210e        movs r1, #14
    5d48:   2000        movs r0, #0
    5d4a:   f7fd faab   bl 0x32a4               ; call afio_pin_config
    5d4e:   2204        movs r2, #4
    5d50:   2100        movs r1, #0
    5d52:   2001        movs r0, #1
    5d54:   f7fd faa6   bl 0x32a4               ; call afio_pin_config
    5d58:   2204        movs r2, #4
    5d5a:   2102        movs r1, #2
    5d5c:   2001        movs r0, #1
    5d5e:   f7fd faa1   bl 0x32a4               ; call afio_pin_config
    5d62:   2204        movs r2, #4
    5d64:   2107        movs r1, #7
    5d66:   2002        movs r0, #2
    5d68:   f7fd fa9c   bl 0x32a4               ; call afio_pin_config
    5d6c:   2202        movs r2, #2
    5d6e:   2140        movs r1, #64            ; 0x40
    5d70:   480e        ldr r0, [pc, #56]       ; r0 = (0x5dac) GPIO B
    5d72:   f7fd fbf3   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5d76:   2204        movs r2, #4
    5d78:   2106        movs r1, #6
    5d7a:   2001        movs r0, #1
    5d7c:   f7fd fa92   bl 0x32a4               ; call afio_pin_config
    5d80:   2204        movs r2, #4
    5d82:   210a        movs r1, #10
    5d84:   2000        movs r0, #0
    5d86:   f7fd fa8d   bl 0x32a4               ; call afio_pin_config
    5d8a:   2204        movs r2, #4
    5d8c:   4611        mov r1, r2
    5d8e:   2002        movs r0, #2
    5d90:   f7fd fa88   bl 0x32a4               ; call afio_pin_config
    5d94:   2204        movs r2, #4
    5d96:   2106        movs r1, #6
    5d98:   e8bd 4010   ldmia.w sp!, {r4, lr}
    5d9c:   2002        movs r0, #2
    5d9e:   f7fd ba81   b.w 0x32a4              ; jump afio_pin_config
    5da2:   0000

  0x5da4:   0x400b4000  ; GPIO C
  0x5da8:   0x400b0000  ; GPIO A
  0x5dac:   0x400b2000  ; GPIO B

function_50:
  0x5db0:   b510        push {r4, lr}
    5db2:   4c3e        ldr r4, [pc, #248]      ; r4 = (0x5eac) GPIO C
    5db4:   2201        movs r2, #1
    5db6:   0251        lsls r1, r2, #9
    5db8:   4620        mov r0, r4
    5dba:   f7fd fbcf   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5dbe:   2200        movs r2, #0
    5dc0:   2109        movs r1, #9
    5dc2:   2002        movs r0, #2
    5dc4:   f7fd fa6e   bl 0x32a4               ; call afio_pin_config
    5dc8:   2201        movs r2, #1
    5dca:   0291        lsls r1, r2, #10
    5dcc:   4620        mov r0, r4
    5dce:   f7fd fbc5   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5dd2:   2200        movs r2, #0
    5dd4:   210a        movs r1, #10
    5dd6:   2002        movs r0, #2
    5dd8:   f7fd fa64   bl 0x32a4               ; call afio_pin_config
    5ddc:   2201        movs r2, #1
    5dde:   02d1        lsls r1, r2, #11
    5de0:   4620        mov r0, r4
    5de2:   f7fd fbbb   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5de6:   2200        movs r2, #0
    5de8:   210b        movs r1, #11
    5dea:   2002        movs r0, #2
    5dec:   f7fd fa5a   bl 0x32a4               ; call afio_pin_config
    5df0:   4c2f        ldr r4, [pc, #188]      ; r4 = (0x5eb0) GPIO A
    5df2:   2201        movs r2, #1
    5df4:   2180        movs r1, #128           ; 0x80
    5df6:   4620        mov r0, r4
    5df8:   f7fd fbb0   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5dfc:   2200        movs r2, #0
    5dfe:   2107        movs r1, #7
    5e00:   4610        mov r0, r2
    5e02:   f7fd fa4f   bl 0x32a4               ; call afio_pin_config
    5e06:   2201        movs r2, #1
    5e08:   4611        mov r1, r2
    5e0a:   4620        mov r0, r4
    5e0c:   f7fd fba6   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5e10:   2200        movs r2, #0
    5e12:   4611        mov r1, r2
    5e14:   4610        mov r0, r2
    5e16:   f7fd fa45   bl 0x32a4               ; call afio_pin_config
    5e1a:   2201        movs r2, #1
    5e1c:   2102        movs r1, #2
    5e1e:   4620        mov r0, r4
    5e20:   f7fd fb9c   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5e24:   2200        movs r2, #0
    5e26:   2101        movs r1, #1
    5e28:   4610        mov r0, r2
    5e2a:   f7fd fa3b   bl 0x32a4               ; call afio_pin_config
    5e2e:   2201        movs r2, #1
    5e30:   2104        movs r1, #4
    5e32:   4620        mov r0, r4
    5e34:   f7fd fb92   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5e38:   2200        movs r2, #0
    5e3a:   2102        movs r1, #2
    5e3c:   4610        mov r0, r2
    5e3e:   f7fd fa31   bl 0x32a4               ; call afio_pin_config
    5e42:   2200        movs r2, #0
    5e44:   2103        movs r1, #3
    5e46:   2002        movs r0, #2
    5e48:   f7fd fa2c   bl 0x32a4               ; call afio_pin_config
    5e4c:   2200        movs r2, #0
    5e4e:   210e        movs r1, #14
    5e50:   4610        mov r0, r2
    5e52:   f7fd fa27   bl 0x32a4               ; call afio_pin_config
    5e56:   2200        movs r2, #0
    5e58:   4611        mov r1, r2
    5e5a:   2001        movs r0, #1
    5e5c:   f7fd fa22   bl 0x32a4               ; call afio_pin_config
    5e60:   2200        movs r2, #0
    5e62:   2102        movs r1, #2
    5e64:   2001        movs r0, #1
    5e66:   f7fd fa1d   bl 0x32a4               ; call afio_pin_config
    5e6a:   2200        movs r2, #0
    5e6c:   2107        movs r1, #7
    5e6e:   2002        movs r0, #2
    5e70:   f7fd fa18   bl 0x32a4               ; call afio_pin_config
    5e74:   2201        movs r2, #1
    5e76:   2140        movs r1, #64            ; 0x40
    5e78:   480e        ldr r0, [pc, #56]       ; r0 = (0x5eb4) GPIO B
    5e7a:   f7fd fb6f   bl 0x355c               ; call gpio_set_pin_pull_up_down
    5e7e:   2200        movs r2, #0
    5e80:   2106        movs r1, #6
    5e82:   2001        movs r0, #1
    5e84:   f7fd fa0e   bl 0x32a4               ; call afio_pin_config
    5e88:   2200        movs r2, #0
    5e8a:   210a        movs r1, #10
    5e8c:   4610        mov r0, r2
    5e8e:   f7fd fa09   bl 0x32a4               ; call afio_pin_config
    5e92:   2200        movs r2, #0
    5e94:   2104        movs r1, #4
    5e96:   2002        movs r0, #2
    5e98:   f7fd fa04   bl 0x32a4               ; call afio_pin_config
    5e9c:   2200        movs r2, #0
    5e9e:   2106        movs r1, #6
    5ea0:   e8bd 4010   ldmia.w sp!, {r4, lr}
    5ea4:   2002        movs r0, #2
    5ea6:   f7fd b9fd   b.w 0x32a4              ; jump afio_pin_config
    5eaa:   0000

  0x5eac:   0x400b4000  ; GPIO C
  0x5eb0:   0x400b0000  ; GPIO A
  0x5eb4:   0x400b2000  ; GPIO B

function_3:
  0x5eb8:   b530        push {r4, r5, lr}
    5eba:   490d        ldr r1, [pc, #52]       ; r1 = (0x5ef0)
    5ebc:   680c        ldr r4, [r1, #0]        ; r4 = [r1]
    5ebe:   6c8b        ldr r3, [r1, #72]       ; r3 = [r1 + 0x48]
    5ec0:   f04f 0201   mov.w r2, #1            ; r2 = 1
    5ec4:   600a        str r2, [r1, #0]        ; [r1] = r2
    5ec6:   f04f 0200   mov.w r2, #0            ; r2 = 0
    5eca:   648a        str r2, [r1, #72]       ; [r1 + 0x48] = r2
    5ecc:   4d09        ldr r5, [pc, #36]       ; r5 = (0x5ef4)
    5ece:   612a        str r2, [r5, #16]       ; [r5 + 0x10] = r2
    5ed0:   602a        str r2, [r5, #0]        ; [r5] = r2
    5ed2:   600c        str r4, [r1, #0]        ; [r1] = r4
    5ed4:   4a08        ldr r2, [pc, #32]       ; r2 = (0x5ef8)
    5ed6:   f5a1 61c3   sub.w r1, r1, #1560     ; r1 = r1 - 0x618
    5eda:   6814        ldr r4, [r2, #0]
    5edc:   f044 0404   orr.w r4, r4, #4
    5ee0:   6014        str r4, [r2, #0]
    5ee2:   b118        cbz r0, 0x5eec
    5ee4:   bf30        wfi
    5ee6:   f8c1 3660   str.w r3, [r1, #1632]   ; 0x660
    5eea:   bd30        pop {r4, r5, pc}
    5eec:   bf20        wfe
    5eee:   e7fa        b.n 0x5ee6

  0x5ef0:   0x43100618
  0x5ef4:   0x42d4208c
  0x5ef8:   0xe000ed10

reset_peripheral:
    ; r0 = ??
    ; r1 = 0/1
    ; Reset a peripheral in AHBPRSTR
  0x5efc:   4a05        ldr r2, [pc, #20]   ; (0x5f14)
    5efe:   2901        cmp r1, #1
    5f00:   f8d2 1104   ldr.w r1, [r2, #260]   ; 0x104
    5f04:   d003        beq.n 0x5f0e
    5f06:   4381        bics r1, r0
  0x5f08:   f8c2 1104   str.w r1, [r2, #260]   ; 0x104
    5f0c:   4770        bx lr
  0x5f0e:   4301        orrs r1, r0
    5f10:   e7fa        b.n 0x5f08
    5f12:   0000

  0x5f14:   0x40088000  ; CKCU registers

function_e_46:
  0x5f18:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f1c:   4819        ldr r0, [pc, #100]   ; (0x5f84)
    5f1e:   8800        ldrh r0, [r0, #0]
    5f20:   2800        cmp r0, #0
    5f22:   d12d        bne.n 0x5f80
    5f24:   f8df 905c   ldr.w r9, [pc, #92]   ; 0x5f84
    5f28:   2700        movs r7, #0
    5f2a:   f109 0928   add.w r9, r9, #40   ; 0x28
    5f2e:   f899 b01c   ldrb.w fp, [r9, #28]
    5f32:   e023        b.n 0x5f7c
    5f34:   4813        ldr r0, [pc, #76]   ; (0x5f84)
    5f36:   f04f 0a01   mov.w sl, #1
    5f3a:   4438        add r0, r7
    5f3c:   4680        mov r8, r0
    5f3e:   7885        ldrb r5, [r0, #2]
    5f40:   7d06        ldrb r6, [r0, #20]
    5f42:   406e        eors r6, r5
    5f44:   2400        movs r4, #0
    5f46:   07f0        lsls r0, r6, #31
    5f48:   d010        beq.n 0x5f6c
    5f4a:   f345 0200   sbfx r2, r5, #0, #1
    5f4e:   f8d9 300c   ldr.w r3, [r9, #12]
    5f52:   1c52        adds r2, r2, #1
    5f54:   4621        mov r1, r4
    5f56:   4638        mov r0, r7
    5f58:   4798        blx r3
    5f5a:   2801        cmp r0, #1
    5f5c:   d106        bne.n 0x5f6c
    5f5e:   f898 1014   ldrb.w r1, [r8, #20]
    5f62:   fa0a f004   lsl.w r0, sl, r4
    5f66:   4041        eors r1, r0
    5f68:   f888 1014   strb.w r1, [r8, #20]
    5f6c:   1c64        adds r4, r4, #1
    5f6e:   0876        lsrs r6, r6, #1
    5f70:   086d        lsrs r5, r5, #1
    5f72:   b2e4        uxtb r4, r4
    5f74:   2c08        cmp r4, #8
    5f76:   d3e6        bcc.n 0x5f46
    5f78:   1c7f        adds r7, r7, #1
    5f7a:   b2ff        uxtb r7, r7
    5f7c:   455f        cmp r7, fp
    5f7e:   d3d9        bcc.n 0x5f34
    5f80:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x5f84:   0x20002de4  ; pointer_34

function_e_47:
  0x5f88:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f8c:   f8df a108   ldr.w sl, [pc, #264]        ; sl = (0x6098)
    5f90:   4842        ldr r0, [pc, #264]          ; r0 = (0x609c) data_9
    5f92:   f1aa 0928   sub.w r9, sl, #40           ; r9 = sl - 0x28
    5f96:   f89a 501b   ldrb.w r5, [sl, #27]        ; r5 = [sl + 0x1b]
    5f9a:   086c        lsrs r4, r5, #1             ; r4 = r5 >> 1
    5f9c:   eb00 00c4   add.w r0, r0, r4, lsl #3    ; r0 = r0  + r4 << 3
    5fa0:   f8d0 8000   ldr.w r8, [r0]              ; r8 = [r0]
    5fa4:   6847        ldr r7, [r0, #4]            ; r7 = [r0 + 4]
    5fa6:   f8b9 0000   ldrh.w r0, [r9]
    5faa:   b120        cbz r0, 0x5fb6
    5fac:   f8b9 1000   ldrh.w r1, [r9]
    5fb0:   1e49        subs r1, r1, #1
    5fb2:   f8a9 1000   strh.w r1, [r9]
    5fb6:   07e8        lsls r0, r5, #31
    5fb8:   f44f 7b80   mov.w fp, #256   ; 0x100
    5fbc:   f04f 0300   mov.w r3, #0
    5fc0:   d005        beq.n 0x5fce
    5fc2:   f000 fa27   bl 0x6414               ; call function_e_50
    5fc6:   4606        mov r6, r0
    5fc8:   4835        ldr r0, [pc, #212]   ; (0x60a0)
    5fca:   2108        movs r1, #8
    5fcc:   e02b        b.n 0x6026
    5fce:   4834        ldr r0, [pc, #208]   ; (0x60a0)
    5fd0:   3020        adds r0, #32
    5fd2:   2108        movs r1, #8
    5fd4:   e001        b.n 0x5fda
    5fd6:   c804        ldmia r0!, {r2}
    5fd8:   6013        str r3, [r2, #0]
    5fda:   1e49        subs r1, r1, #1
    5fdc:   d2fb        bcs.n 0x5fd6
    5fde:   4831        ldr r0, [pc, #196]   ; (0x60a4)
    5fe0:   2104        movs r1, #4
    5fe2:   6281        str r1, [r0, #40]   ; 0x28
    5fe4:   4a30        ldr r2, [pc, #192]   ; (0x60a8)
    5fe6:   465e        mov r6, fp
    5fe8:   f8c2 b028   str.w fp, [r2, #40]   ; 0x28
    5fec:   6241        str r1, [r0, #36]   ; 0x24

    5fee:   200a        movs r0, #10
    5ff0:   f7fd f96c   bl 0x32cc               ; call spin_wait_maybe(10)

    5ff4:   f8c8 7028   str.w r7, [r8, #40]     ; [r8 + 0x28] = r7
    5ff8:   482c        ldr r0, [pc, #176]   ; (0x60ac)
    5ffa:   4b2d        ldr r3, [pc, #180]   ; (0x60b0)
    5ffc:   eb00 1104   add.w r1, r0, r4, lsl #4
    6000:   4827        ldr r0, [pc, #156]   ; (0x60a0)
    6002:   2208        movs r2, #8
    6004:   679e        str r6, [r3, #120]   ; 0x78
    6006:   4b2b        ldr r3, [pc, #172]   ; (0x60b4)
    6008:   679e        str r6, [r3, #120]   ; 0x78
    600a:   4b2b        ldr r3, [pc, #172]   ; (0x60b8)
    600c:   679e        str r6, [r3, #120]   ; 0x78
    600e:   4b2b        ldr r3, [pc, #172]   ; (0x60bc)
    6010:   679e        str r6, [r3, #120]   ; 0x78
    6012:   e003        b.n 0x601c
    6014:   c810        ldmia r0!, {r4}
    6016:   f831 3b02   ldrh.w r3, [r1], #2
    601a:   6023        str r3, [r4, #0]
    601c:   1e52        subs r2, r2, #1
    601e:   d2f9        bcs.n 0x6014
    6020:   e02f        b.n 0x6082
    6022:   c804        ldmia r0!, {r2}
    6024:   6013        str r3, [r2, #0]
    6026:   1e49        subs r1, r1, #1
    6028:   d2fb        bcs.n 0x6022
    602a:   f8c8 7024   str.w r7, [r8, #36]   ; 0x24

    602e:   200a        movs r0, #10
    6030:   f7fd f94c   bl 0x32cc              ; call spin_wait_maybe(10)

    6034:   4620        mov r0, r4
    6036:   f000 fa1f   bl 0x6478               ; call function_e_51(r4)

    603a:   481c        ldr r0, [pc, #112]   ; (0x60ac)
    603c:   4f1c        ldr r7, [pc, #112]   ; (0x60b0)
    603e:   3090        adds r0, #144   ; 0x90
    6040:   eb00 1104   add.w r1, r0, r4, lsl #4
    6044:   4816        ldr r0, [pc, #88]   ; (0x60a0)
    6046:   f8c7 b078   str.w fp, [r7, #120]   ; 0x78
    604a:   3020        adds r0, #32
    604c:   2208        movs r2, #8
    604e:   4f19        ldr r7, [pc, #100]   ; (0x60b4)
    6050:   f8c7 b078   str.w fp, [r7, #120]   ; 0x78
    6054:   4f18        ldr r7, [pc, #96]   ; (0x60b8)
    6056:   f8c7 b078   str.w fp, [r7, #120]   ; 0x78
    605a:   4f18        ldr r7, [pc, #96]   ; (0x60bc)
    605c:   f8c7 b078   str.w fp, [r7, #120]   ; 0x78
    6060:   e003        b.n 0x606a
    6062:   c880        ldmia r0!, {r7}
    6064:   f831 3b02   ldrh.w r3, [r1], #2
    6068:   603b        str r3, [r7, #0]
    606a:   1e52        subs r2, r2, #1
    606c:   d2f9        bcs.n 0x6062
    606e:   eb09 0004   add.w r0, r9, r4
    6072:   4649        mov r1, r9
    6074:   7882        ldrb r2, [r0, #2]
    6076:   42b2        cmp r2, r6
    6078:   d003        beq.n 0x6082
    607a:   f8ba 2018   ldrh.w r2, [sl, #24]
    607e:   800a        strh r2, [r1, #0]
    6080:   7086        strb r6, [r0, #2]
    6082:   f89a 001a   ldrb.w r0, [sl, #26]
    6086:   1c6d        adds r5, r5, #1
    6088:   fbb5 f2f0   udiv r2, r5, r0
    608c:   fb00 5012   mls r0, r0, r2, r5
    6090:   f88a 001b   strb.w r0, [sl, #27]
    6094:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x6098:   0x20002e0c
  0x609c:   0x8fa8      ; data_9
  0x60a0:   0x200001dc
  0x60a4:   0x400b4000
  0x60a8:   0x400b0000
  0x60ac:   0x20002cc4
  0x60b0:   0x4006e000
  0x60b4:   0x4006f000
  0x60b8:   0x4002c000
  0x60bc:   0x4002d000

function_e_48:
    ; r0 = struct on stack?
  0x60c0:   e92d 47f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60c4:   4604        mov r4, r0
    60c6:   f000 f853   bl 0x6170               ; call function_51
    60ca:   f8df 9098   ldr.w r9, [pc, #152]    ; 0x6164
    60ce:   f899 0000   ldrb.w r0, [r9]
    60d2:   2801        cmp r0, #1
    60d4:   d143        bne.n 0x615e
    60d6:   4f24        ldr r7, [pc, #144]      ; r7 = (0x6168)
    60d8:   8a20        ldrh r0, [r4, #16]
    60da:   f04f 08ff   mov.w r8, #255   ; 0xff
    60de:   8338        strh r0, [r7, #24]

    60e0:   68e0        ldr r0, [r4, #12]       ; r0 [r4 + 0xc] = data_9
    60e2:   6038        str r0, [r7, #0]        ; [r7] = r0

    60e4:   7ce0        ldrb r0, [r4, #19]
    60e6:   f1a7 0a28   sub.w sl, r7, #40       ; sl = r7 - 0x28
    60ea:   0040        lsls r0, r0, #1
    60ec:   76b8        strb r0, [r7, #26]
    60ee:   2000        movs r0, #0
    60f0:   76f8        strb r0, [r7, #27]
    60f2:   4602        mov r2, r0
    60f4:   f5a7 7ca4   sub.w ip, r7, #328   ; 0x148
    60f8:   f1a7 06b8   sub.w r6, r7, #184   ; 0xb8
    60fc:   e013        b.n 0x6126
    60fe:   eb0a 0102   add.w r1, sl, r2
    6102:   eb0c 1502   add.w r5, ip, r2, lsl #4
    6106:   f881 8002   strb.w r8, [r1, #2]
    610a:   f881 8014   strb.w r8, [r1, #20]
    610e:   2100        movs r1, #0
    6110:   eb06 1302   add.w r3, r6, r2, lsl #4
    6114:   f825 0011   strh.w r0, [r5, r1, lsl #1]
    6118:   f823 0011   strh.w r0, [r3, r1, lsl #1]
    611c:   1c49        adds r1, r1, #1
    611e:   2908        cmp r1, #8
    6120:   dbf8        blt.n 0x6114
    6122:   1c52        adds r2, r2, #1
    6124:   b2d2        uxtb r2, r2
    6126:   7ce1        ldrb r1, [r4, #19]
    6128:   4291        cmp r1, r2
    612a:   d8e8        bhi.n 0x60fe
    612c:   6820        ldr r0, [r4, #0]
    612e:   60f8        str r0, [r7, #12]
    6130:   6860        ldr r0, [r4, #4]
    6132:   6138        str r0, [r7, #16]
    6134:   68a0        ldr r0, [r4, #8]
    6136:   6178        str r0, [r7, #20]
    6138:   7ce0        ldrb r0, [r4, #19]
    613a:   7738        strb r0, [r7, #28]
    613c:   2101        movs r1, #1
    613e:   0448        lsls r0, r1, #17
    6140:   f7fd f988   bl 0x3454               ; call ckcu_apb1_clock_enable
    6144:   f44f 61e1   mov.w r1, #1800   ; 0x708
    6148:   4808        ldr r0, [pc, #32]   ; (0x616c)
    614a:   f7fd f8a6   bl 0x329a
    614e:   f7ff fc35   bl 0x59bc
    6152:   2001        movs r0, #1
    6154:   f000 f8fc   bl 0x6350               ; call function_e_49
    6158:   2102        movs r1, #2
    615a:   f889 1000   strb.w r1, [r9]
    615e:   2001        movs r0, #1
    6160:   e8bd 87f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  0x6164:   0x200001d8
  0x6168:   0x20002e0c
  0x616c:   0x40077000

function_51:
  0x6170:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6174:   f8df 91c4   ldr.w r9, [pc, #452]   ; 0x633c
    6178:   f899 0000   ldrb.w r0, [r9]
    617c:   bbf0        cbnz r0, 0x61fc
    617e:   2101        movs r1, #1
    6180:   03cc        lsls r4, r1, #15
    6182:   4620        mov r0, r4
    6184:   f7fd f95a   bl 0x343c               ; call ckcu_apb0_clock_enable
                                                ; Enable GPIO A,B,C,D clock
    6188:   2101        movs r1, #1
    618a:   f44f 2070   mov.w r0, #983040       ; 0xf0000
    618e:   f7fd f949   bl 0x3424               ; call ckcu_ahb_clock_enable(0xf0000, 1)
    6192:   4f6b        ldr r7, [pc, #428]   ; (0x6340)
    6194:   2200        movs r2, #0
    6196:   2108        movs r1, #8
    6198:   4638        mov r0, r7
    619a:   f7fd f9df   bl 0x355c               ; call gpio_set_pin_pull_up_down
    619e:   2200        movs r2, #0
    61a0:   2110        movs r1, #16
    61a2:   4638        mov r0, r7
    61a4:   f7fd f9da   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61a8:   2200        movs r2, #0
    61aa:   2120        movs r1, #32
    61ac:   4638        mov r0, r7
    61ae:   f7fd f9d5   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61b2:   2200        movs r2, #0
    61b4:   2140        movs r1, #64   ; 0x40
    61b6:   4638        mov r0, r7
    61b8:   f7fd f9d0   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61bc:   f8df a184   ldr.w sl, [pc, #388]   ; 0x6344
    61c0:   1126        asrs r6, r4, #4
    61c2:   2200        movs r2, #0
    61c4:   4631        mov r1, r6
    61c6:   4650        mov r0, sl
    61c8:   f7fd f9c8   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61cc:   f8df 8178   ldr.w r8, [pc, #376]   ; 0x6348
    61d0:   f44f 5b00   mov.w fp, #8192   ; 0x2000
    61d4:   2200        movs r2, #0
    61d6:   4659        mov r1, fp
    61d8:   4645        mov r5, r8
    61da:   4640        mov r0, r8
    61dc:   f7fd f9be   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61e0:   2200        movs r2, #0
    61e2:   1061        asrs r1, r4, #1
    61e4:   4628        mov r0, r5
    61e6:   f7fd f9b9   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61ea:   2200        movs r2, #0
    61ec:   4621        mov r1, r4
    61ee:   4628        mov r0, r5
    61f0:   f7fd f9b4   bl 0x355c               ; call gpio_set_pin_pull_up_down
    61f4:   2201        movs r2, #1
    61f6:   2108        movs r1, #8
    61f8:   4638        mov r0, r7
    61fa:   e000        b.n 0x61fe
    61fc:   e09b        b.n 0x6336
    61fe:   f7fd f99d   bl 0x353c               ; call gpio_set_input_enable
    6202:   2201        movs r2, #1
    6204:   2110        movs r1, #16
    6206:   4638        mov r0, r7
    6208:   f7fd f998   bl 0x353c               ; call gpio_set_input_enable
    620c:   2201        movs r2, #1
    620e:   2120        movs r1, #32
    6210:   4638        mov r0, r7
    6212:   f7fd f993   bl 0x353c               ; call gpio_set_input_enable
    6216:   2201        movs r2, #1
    6218:   2140        movs r1, #64   ; 0x40
    621a:   4638        mov r0, r7
    621c:   f7fd f98e   bl 0x353c               ; call gpio_set_input_enable
    6220:   2201        movs r2, #1
    6222:   4631        mov r1, r6
    6224:   4650        mov r0, sl
    6226:   f7fd f989   bl 0x353c               ; call gpio_set_input_enable
    622a:   2201        movs r2, #1
    622c:   4659        mov r1, fp
    622e:   4628        mov r0, r5
    6230:   f7fd f984   bl 0x353c               ; call gpio_set_input_enable
    6234:   2201        movs r2, #1
    6236:   0391        lsls r1, r2, #14
    6238:   4628        mov r0, r5
    623a:   f7fd f97f   bl 0x353c               ; call gpio_set_input_enable
    623e:   2201        movs r2, #1
    6240:   4621        mov r1, r4
    6242:   4628        mov r0, r5
    6244:   f7fd f97a   bl 0x353c               ; call gpio_set_input_enable
    6248:   2100        movs r1, #0
    624a:   200c        movs r0, #12
    624c:   f7fc fe80   bl 0x2f50               ; call afio_exti_ssr_write
    6250:   2100        movs r1, #0
    6252:   2010        movs r0, #16
    6254:   f7fc fe7c   bl 0x2f50               ; call afio_exti_ssr_write
    6258:   2100        movs r1, #0
    625a:   2014        movs r0, #20
    625c:   f7fc fe78   bl 0x2f50               ; call afio_exti_ssr_write
    6260:   2100        movs r1, #0
    6262:   2018        movs r0, #24
    6264:   f7fc fe74   bl 0x2f50               ; call afio_exti_ssr_write
    6268:   2101        movs r1, #1
    626a:   202c        movs r0, #44   ; 0x2c
    626c:   f7fc fe70   bl 0x2f50               ; call afio_exti_ssr_write
    6270:   2102        movs r1, #2
    6272:   2034        movs r0, #52   ; 0x34
    6274:   f7fc fe6c   bl 0x2f50               ; call afio_exti_ssr_write
    6278:   2102        movs r1, #2
    627a:   2038        movs r0, #56   ; 0x38
    627c:   f7fc fe68   bl 0x2f50               ; call afio_exti_ssr_write
    6280:   2102        movs r1, #2
    6282:   203c        movs r0, #60   ; 0x3c
    6284:   f7fc fe64   bl 0x2f50               ; call afio_exti_ssr_write
    6288:   f8df a0c0   ldr.w sl, [pc, #192]    ; 0x634c
    628c:   2400        movs r4, #0
    628e:   eb0a 00c4   add.w r0, sl, r4, lsl #3
    6292:   6805        ldr r5, [r0, #0]
    6294:   6846        ldr r6, [r0, #4]
    6296:   4628        mov r0, r5
    6298:   b2b1        uxth r1, r6
    629a:   f7fd f973   bl 0x3584
    629e:   b2b1        uxth r1, r6
    62a0:   2201        movs r2, #1
    62a2:   4628        mov r0, r5
    62a4:   f7fd f952   bl 0x354c               ; call gpio_set_open_drain
    62a8:   b2b1        uxth r1, r6
    62aa:   2201        movs r2, #1
    62ac:   4628        mov r0, r5
    62ae:   f7fd f935   bl 0x351c               ; call gpio_set_input_output
    62b2:   1c64        adds r4, r4, #1
    62b4:   b2e4        uxtb r4, r4
    62b6:   2c09        cmp r4, #9
    62b8:   d3e9        bcc.n 0x628e
    62ba:   2202        movs r2, #2
    62bc:   01d5        lsls r5, r2, #7
    62be:   4629        mov r1, r5
    62c0:   4638        mov r0, r7
    62c2:   f7fd f94b   bl 0x355c               ; call gpio_set_pin_pull_up_down
    62c6:   2200        movs r2, #0
    62c8:   4629        mov r1, r5
    62ca:   4638        mov r0, r7
    62cc:   f7fd f936   bl 0x353c               ; call gpio_set_input_enable
    62d0:   2201        movs r2, #1
    62d2:   4611        mov r1, r2
    62d4:   4644        mov r4, r8
    62d6:   4640        mov r0, r8
    62d8:   f7fd f920   bl 0x351c               ; call gpio_set_input_output
    62dc:   2201        movs r2, #1
    62de:   2102        movs r1, #2
    62e0:   4620        mov r0, r4
    62e2:   f7fd f91b   bl 0x351c               ; call gpio_set_input_output
    62e6:   2201        movs r2, #1
    62e8:   4629        mov r1, r5
    62ea:   4638        mov r0, r7
    62ec:   f7fd f916   bl 0x351c               ; call gpio_set_input_output
    62f0:   f7ff fc66   bl 0x5bc0               ; call function_64
    62f4:   2201        movs r2, #1
    62f6:   2104        movs r1, #4
    62f8:   4620        mov r0, r4
    62fa:   f7fd f90f   bl 0x351c               ; call gpio_set_input_output
    62fe:   2202        movs r2, #2
    6300:   0214        lsls r4, r2, #8
    6302:   4621        mov r1, r4
    6304:   4638        mov r0, r7
    6306:   f7fd f929   bl 0x355c               ; call gpio_set_pin_pull_up_down
    630a:   2200        movs r2, #0
    630c:   4621        mov r1, r4
    630e:   4638        mov r0, r7
    6310:   f7fd f914   bl 0x353c               ; call gpio_set_input_enable
    6314:   4621        mov r1, r4
    6316:   4638        mov r0, r7
    6318:   f7fd f934   bl 0x3584
    631c:   2201        movs r2, #1
    631e:   4621        mov r1, r4
    6320:   4638        mov r0, r7
    6322:   f7fd f913   bl 0x354c               ; call gpio_set_open_drain
    6326:   2201        movs r2, #1
    6328:   4621        mov r1, r4
    632a:   4638        mov r0, r7
    632c:   f7fd f8f6   bl 0x351c               ; call gpio_set_input_output
    6330:   2101        movs r1, #1
    6332:   f889 1000   strb.w r1, [r9]
    6336:   2001        movs r0, #1
    6338:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x633c:   0x200001d8  ; Stack location
  0x6340:   0x400b0000  ; GPIO A
  0x6344:   0x400b2000  ; GPIO B
  0x6348:   0x400b4000  ; GPIO C
  0x634c:   0x8fa8      ; data_9

function_e_49:
  0x6350:   e92d 47f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6354:   4c2a        ldr r4, [pc, #168]      ; r4 = (0x6400)
    6356:   4e2b        ldr r6, [pc, #172]      ; r6 = (0x6404)
    6358:   f8df 80ac   ldr.w r8, [pc, #172]    ; r8 = (0x6408)
    635c:   ea5f 0900   movs.w r9, r0
    6360:   f44f 7500   mov.w r5, #512   ; 0x200
    6364:   f44f 6780   mov.w r7, #1024   ; 0x400
    6368:   d029        beq.n 0x63be
    636a:   2100        movs r1, #0
    636c:   4630        mov r0, r6
    636e:   f7fc ff8a   bl 0x3286
    6372:   2100        movs r1, #0
    6374:   4630        mov r0, r6
    6376:   f7fc ff7c   bl 0x3272
    637a:   4630        mov r0, r6
    637c:   f7fc ff72   bl 0x3264               ; call bftm_clear(BFTM1)
    6380:   f8c8 7180   str.w r7, [r8, #384]   ; 0x180
    6384:   2000        movs r0, #0
    6386:   4a21        ldr r2, [pc, #132]   ; (0x640c)
    6388:   4601        mov r1, r0
    638a:   f852 3020   ldr.w r3, [r2, r0, lsl #2]
    638e:   6019        str r1, [r3, #0]
    6390:   1c40        adds r0, r0, #1
    6392:   2807        cmp r0, #7
    6394:   dbf9        blt.n 0x638a
    6396:   4a1d        ldr r2, [pc, #116]   ; (0x640c)
    6398:   2000        movs r0, #0
    639a:   3a20        subs r2, #32
    639c:   f852 3020   ldr.w r3, [r2, r0, lsl #2]
    63a0:   6019        str r1, [r3, #0]
    63a2:   1c40        adds r0, r0, #1
    63a4:   2807        cmp r0, #7
    63a6:   dbf9        blt.n 0x639c
    63a8:   f44f 7080   mov.w r0, #256   ; 0x100
    63ac:   62a0        str r0, [r4, #40]   ; 0x28
    63ae:   4918        ldr r1, [pc, #96]   ; (0x6410)
    63b0:   2004        movs r0, #4
    63b2:   6288        str r0, [r1, #40]   ; 0x28
    63b4:   6265        str r5, [r4, #36]   ; 0x24
    63b6:   2000        movs r0, #0
    63b8:   f000 f888   bl 0x64cc               ; call function_e_6
    63bc:   e01a        b.n 0x63f4
    63be:   2001        movs r0, #1
    63c0:   f000 f884   bl 0x64cc               ; call function_e_6
    63c4:   200a        movs r0, #10
    63c6:   f7fc ff81   bl 0x32cc              ; call spin_wait_maybe(10)
    63ca:   62a5        str r5, [r4, #40]   ; 0x28
    63cc:   200a        movs r0, #10
    63ce:   f7fc ff7d   bl 0x32cc              ; call spin_wait_maybe(10)
    63d2:   2100        movs r1, #0
    63d4:   4630        mov r0, r6
    63d6:   f7fc ff62   bl 0x329e
    63da:   4630        mov r0, r6
    63dc:   f7fc ff42   bl 0x3264               ; call bftm_clear(BFTM1)
    63e0:   2101        movs r1, #1
    63e2:   4630        mov r0, r6
    63e4:   f7fc ff45   bl 0x3272
    63e8:   2101        movs r1, #1
    63ea:   4630        mov r0, r6
    63ec:   f7fc ff4b   bl 0x3286
    63f0:   f8c8 7100   str.w r7, [r8, #256]   ; 0x100
    63f4:   4648        mov r0, r9
    63f6:   e8bd 47f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63fa:   f7ff bc4f   b.w 0x5c9c
    63fe:   0000

  0x6400:   0x400b0000  ; GPIO A
  0x6404:   0x40077000  ; BFTM 1
  0x6408:   0xe000e004
  0x640c:   0x200001fc
  0x6410:   0x400b4000  ; GPIO C

function_e_50:
  0x6414:   4915        ldr r1, [pc, #84]   ; (0x646c)
    6416:   2000        movs r0, #0
    6418:   69ca        ldr r2, [r1, #28]
    641a:   0712        lsls r2, r2, #28
    641c:   d500        bpl.n 0x6420
    641e:   2001        movs r0, #1
    6420:   69ca        ldr r2, [r1, #28]
    6422:   06d2        lsls r2, r2, #27
    6424:   d501        bpl.n 0x642a
    6426:   f040 0002   orr.w r0, r0, #2
    642a:   69ca        ldr r2, [r1, #28]
    642c:   0692        lsls r2, r2, #26
    642e:   d501        bpl.n 0x6434
    6430:   f040 0004   orr.w r0, r0, #4
    6434:   69c9        ldr r1, [r1, #28]
    6436:   0649        lsls r1, r1, #25
    6438:   d501        bpl.n 0x643e
    643a:   f040 0008   orr.w r0, r0, #8
    643e:   490c        ldr r1, [pc, #48]   ; (0x6470)
    6440:   69c9        ldr r1, [r1, #28]
    6442:   0509        lsls r1, r1, #20
    6444:   d501        bpl.n 0x644a
    6446:   f040 0010   orr.w r0, r0, #16
    644a:   490a        ldr r1, [pc, #40]   ; (0x6474)
    644c:   69ca        ldr r2, [r1, #28]
    644e:   0492        lsls r2, r2, #18
    6450:   d501        bpl.n 0x6456
    6452:   f040 0020   orr.w r0, r0, #32
    6456:   69ca        ldr r2, [r1, #28]
    6458:   0452        lsls r2, r2, #17
    645a:   d501        bpl.n 0x6460
    645c:   f040 0040   orr.w r0, r0, #64   ; 0x40
    6460:   69c9        ldr r1, [r1, #28]
    6462:   0409        lsls r1, r1, #16
    6464:   d501        bpl.n 0x646a
    6466:   f040 0080   orr.w r0, r0, #128   ; 0x80
    646a:   4770        bx lr

  0x646c:   0x400b0000
  0x6470:   0x400b2000
  0x6474:   0x400b4000

function_e_51:
    ; r0 =
  0x6478:   b530        push {r4, r5, lr}
    647a:   4a11        ldr r2, [pc, #68]   ; (0x64c0)
    647c:   2104        movs r1, #4
    647e:   6291        str r1, [r2, #40]   ; 0x28
    6480:   4b10        ldr r3, [pc, #64]   ; (0x64c4)
    6482:   018c        lsls r4, r1, #6
    6484:   629c        str r4, [r3, #40]   ; 0x28
    6486:   6251        str r1, [r2, #36]   ; 0x24
    6488:   2808        cmp r0, #8
    648a:   d009        beq.n 0x64a0
    648c:   d209        bcs.n 0x64a2
    648e:   4b0e        ldr r3, [pc, #56]       ; r3 = (0x64c8)
    6490:   f04f 0108   mov.w r1, #8
    6494:   f04f 0401   mov.w r4, #1
    6498:   5c18        ldrb r0, [r3, r0]       ; r0 = [r3 + r0]
    649a:   f04f 0302   mov.w r3, #2
    649e:   e00a        b.n 0x64b6
    64a0:   625c        str r4, [r3, #36]   ; 0x24
    64a2:   bd30        pop {r4, r5, pc}
    64a4:   0605        lsls r5, r0, #24
    64a6:   d501        bpl.n 0x64ac
    64a8:   6254        str r4, [r2, #36]   ; 0x24
    64aa:   e000        b.n 0x64ae
    64ac:   6294        str r4, [r2, #40]   ; 0x28
    64ae:   6253        str r3, [r2, #36]   ; 0x24
    64b0:   0640        lsls r0, r0, #25
    64b2:   0e00        lsrs r0, r0, #24
    64b4:   6293        str r3, [r2, #40]   ; 0x28
    64b6:   1e49        subs r1, r1, #1
    64b8:   d2f4        bcs.n 0x64a4
    64ba:   6294        str r4, [r2, #40]   ; 0x28
    64bc:   bd30        pop {r4, r5, pc}
    64be:   0000        movs r0, r0

  0x64c0:   0x400b4000
  0x64c4:   0x400b0000
  0x64c8:   0x8fa0      ; data_14

function_e_6:
    ; this is called a lot near spin_wait_maybe
  0x64cc:   b510        push {r4, lr}
    64ce:   2209        movs r2, #9             ; r2 = 9
    64d0:   4c12        ldr r4, [pc, #72]       ; r4 = (0x651c)
    64d2:   2100        movs r1, #0             ; r1 = 0
    64d4:   b938        cbnz r0, 0x64e6
    64d6:   e01b        b.n 0x6510
    64d8:   eb04 00c1   add.w r0, r4, r1, lsl #3
    64dc:   1c49        adds r1, r1, #1
    64de:   6803        ldr r3, [r0, #0]
    64e0:   6840        ldr r0, [r0, #4]
    64e2:   b2c9        uxtb r1, r1
    64e4:   6258        str r0, [r3, #36]   ; 0x24
    64e6:   0010        movs r0, r2
    64e8:   f1a2 0201   sub.w r2, r2, #1
    64ec:   b2d2        uxtb r2, r2
    64ee:   d1f3        bne.n 0x64d8
    64f0:   bd10        pop {r4, pc}
    64f2:   2908        cmp r1, #8
    64f4:   d007        beq.n 0x6506
    64f6:   eb04 00c1   add.w r0, r4, r1, lsl #3
    64fa:   1c49        adds r1, r1, #1
    64fc:   6803        ldr r3, [r0, #0]
    64fe:   6840        ldr r0, [r0, #4]
    6500:   b2c9        uxtb r1, r1
    6502:   6298        str r0, [r3, #40]   ; 0x28
    6504:   e004        b.n 0x6510
    6506:   4805        ldr r0, [pc, #20]   ; (0x651c)
    6508:   2109        movs r1, #9
    650a:   6c03        ldr r3, [r0, #64]   ; 0x40
    650c:   6c40        ldr r0, [r0, #68]   ; 0x44
    650e:   6258        str r0, [r3, #36]   ; 0x24
  0x6510:   0010        movs r0, r2
    6512:   f1a2 0201   sub.w r2, r2, #1
    6516:   b2d2        uxtb r2, r2
    6518:   d1eb        bne.n 0x64f2
    651a:   bd10        pop {r4, pc}

  0x651c:   0x8fa8      ; data_9

function_e_52:
  0x6520:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6524:   4e12        ldr r6, [pc, #72]   ; (0x6570)
    6526:   4c11        ldr r4, [pc, #68]   ; (0x656c)
    6528:   4f12        ldr r7, [pc, #72]   ; (0x6574)
    652a:   2000        movs r0, #0
    652c:   f44f 757a   mov.w r5, #1000   ; 0x3e8
    6530:   f64f 7eff   movw lr, #65535   ; 0xffff
    6534:   f1a6 020e   sub.w r2, r6, #14
    6538:   f834 1010   ldrh.w r1, [r4, r0, lsl #1]
    653c:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    6540:   ebc1 4101   rsb r1, r1, r1, lsl #16
    6544:   fbb1 f1f5   udiv r1, r1, r5
    6548:   4359        muls r1, r3
    654a:   fbb1 f1fe   udiv r1, r1, lr
    654e:   5c33        ldrb r3, [r6, r0]
    6550:   f812 c000   ldrb.w ip, [r2, r0]
    6554:   eb07 1303   add.w r3, r7, r3, lsl #4
    6558:   1c40        adds r0, r0, #1
    655a:   b2c0        uxtb r0, r0
    655c:   f823 101c   strh.w r1, [r3, ip, lsl #1]
    6560:   280e        cmp r0, #14
    6562:   d3e9        bcc.n 0x6538
    6564:   e8bd 41f0   ldmia.w sp!, {r4, r5, r6, r7, r8, lr}
    6568:   f002 b80a   b.w 0x8580                  ; call function_e_1

  0x656c:   0x20000160
  0x6570:   0x8d34      ; data_15
  0x6574:   0x20002e2c

spi_enable:
    ; r0 = SPI registers
    ; r1 = 1
  0x6578:   2900        cmp r1, #0
    657a:   6801        ldr r1, [r0, #0]
    657c:   d002        beq.n 0x6584
    657e:   f041 0101   orr.w r1, r1, #1
    6582:   e001        b.n 0x6588
    6584:   f021 0101   bic.w r1, r1, #1
    6588:   6001        str r1, [r0, #0]
    658a:   4770        bx lr

spi_config:
    ; r0 = SPI registers
    ; r1 = ptr
  0x658c:   b530        push {r4, r5, lr}
    658e:   694a        ldr r2, [r1, #20]
    6590:   f5b2 6f80   cmp.w r2, #1024   ; 0x400
    6594:   d001        beq.n 0x659a
    6596:   b15a        cbz r2, 0x65b0
    6598:   e00c        b.n 0x65b4

    ; if r1[20] == 0x400
  0x659a:   698a        ldr r2, [r1, #24]
    659c:   b112        cbz r2, 0x65a4
    659e:   2a01        cmp r2, #1
    65a0:   d003        beq.n 0x65aa
    65a2:   e007        b.n 0x65b4
        ; if r1[24] == 0
  0x65a4:   f44f 62c0   mov.w r2, #1536   ; 0x600
    65a8:   e006        b.n 0x65b8
        ; if r1[24] == 1
  0x65aa:   f44f 62a0   mov.w r2, #1280   ; 0x500
    65ae:   e003        b.n 0x65b8

    ; if r1[20] == 0
  0x65b0:   698a        ldr r2, [r1, #24]
    65b2:   b1d2        cbz r2, 0x65ea
    ; else
  0x65b4:   f44f 7200   mov.w r2, #512   ; 0x200

  0x65b8:   688c        ldr r4, [r1, #8]
    65ba:   680b        ldr r3, [r1, #0]
    65bc:   4323        orrs r3, r4
    65be:   e9d1 4503   ldrd r4, r5, [r1, #12]
    65c2:   432c        orrs r4, r5
    65c4:   4323        orrs r3, r4
    65c6:   69cc        ldr r4, [r1, #28]
    65c8:   4323        orrs r3, r4
    65ca:   4313        orrs r3, r2
    65cc:   6043        str r3, [r0, #4]    ; set SPICR1
    65ce:   6a4b        ldr r3, [r1, #36]   ; 0x24
    65d0:   684a        ldr r2, [r1, #4]
    65d2:   431a        orrs r2, r3
    65d4:   6a0b        ldr r3, [r1, #32]
    65d6:   ea42 1203   orr.w r2, r2, r3, lsl #4
    65da:   6182        str r2, [r0, #24]   ; set SPIFCR
    65dc:   6a89        ldr r1, [r1, #40]   ; 0x28
    65de:   f04f 32ff   mov.w r2, #4294967295   ; 0xffffffff
    65e2:   eb02 0151   add.w r1, r2, r1, lsr #1
    65e6:   60c1        str r1, [r0, #12]   ; set SPICPR
    65e8:   bd30        pop {r4, r5, pc}

  0x65ea:   f44f 7280   mov.w r2, #256   ; 0x100
    65ee:   e7e3        b.n 0x65b8

spi_slave_select_output:
    ; r0 = SPI registers
    ; r1 = 1
  0x65f0:   2900        cmp r1, #0
    65f2:   6801        ldr r1, [r0, #0]
    65f4:   d002        beq.n 0x65fc
    65f6:   f041 0108   orr.w r1, r1, #8
    65fa:   e001        b.n 0x6600
    65fc:   f021 0108   bic.w r1, r1, #8
    6600:   6001        str r1, [r0, #0]
    6602:   4770        bx lr

function_e_4:
    ; this is in the private periphial bus, the base of the system control space registers
  0x6604:   f04f 21e0   mov.w r1, #3758153728   ; 0xe000e000
    6608:   b130        cbz r0, 0x6618
    660a:   2801        cmp r0, #1
    660c:   6908        ldr r0, [r1, #16]
    660e:   d006        beq.n 0x661e
    6610:   f020 0001   bic.w r0, r0, #1
    6614:   6108        str r0, [r1, #16]
    6616:   4770        bx lr
    6618:   2000        movs r0, #0
    661a:   6188        str r0, [r1, #24]
    661c:   4770        bx lr
    661e:   f040 0001   orr.w r0, r0, #1
    6622:   e7f7        b.n 0x6614

function_17:
  0x6624:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6628:   4d20        ldr r5, [pc, #128]      ; r5 = (0x66ac) Stack limit
    662a:   6868        ldr r0, [r5, #4]        ; r0 = [r5 + 4]
    662c:   2800        cmp r0, #0
    662e:   d03a        beq.n 0x66a6            ; branch if r0 == 0
    6630:   481f        ldr r0, [pc, #124]      ; r0 = (0x66b0) pointer_3
    6632:   f000 fa59   bl 0x6ae8               ; call function_6(pointer_3)

    6636:   4604        mov r4, r0              ; r4 = r0
    6638:   2801        cmp r0, #1              ; r0 = 1
    663a:   d101        bne.n 0x6640
    663c:   f7fe f8ac   bl 0x4798               ; call function_e_21
  0x6640:   4f1b        ldr r7, [pc, #108]      ; (0x66b0)
    6642:   f897 0032   ldrb.w r0, [r7, #50]    ; 0x32
    6646:   2803        cmp r0, #3
    6648:   d116        bne.n 0x6678
    664a:   4e1a        ldr r6, [pc, #104]      ; r6 = (0x66b4) USB registers
    664c:   6830        ldr r0, [r6, #0]        ; r0 = [r6]
    664e:   f010 0fc0   tst.w r0, #192          ; 0xc0
    6652:   d011        beq.n 0x6678
    6654:   2001        movs r0, #1
    6656:   f7fd ffe1   bl 0x461c               ; call function_37(1)
    665a:   2000        movs r0, #0             ; r0 = 0
    665c:   60e8        str r0, [r5, #12]       ; [r5 + 0xc] = r0
    665e:   f897 0032   ldrb.w r0, [r7, #50]    ; 0x32
    6662:   2803        cmp r0, #3
    6664:   d108        bne.n 0x6678
    6666:   6830        ldr r0, [r6, #0]
    6668:   f010 0fc0   tst.w r0, #192          ; 0xc0
    666c:   d004        beq.n 0x6678
    666e:   f000 fd69   bl 0x7144               ; call watchdog_reload_timer
    6672:   2000        movs r0, #0
    6674:   f7ff fc20   bl 0x5eb8               ; call function_3
  0x6678:   f7fd f8fa   bl 0x3870               ; call exti_check_wakup
    667c:   2801        cmp r0, #1
    667e:   d008        beq.n 0x6692
    6680:   2c01        cmp r4, #1
    6682:   d110        bne.n 0x66a6            ; branch if r0 == 0
  0x6684:   2000        movs r0, #0
    6686:   f7fe f887   bl 0x4798               ; call function_e_21
    668a:   e8bd 41f0   ldmia.w sp!, {r4, r5, r6, r7, r8, lr}
    668e:   f7fd b8e7   b.w 0x3860              ; branch
    6692:   2c01        cmp r4, #1
    6694:   d107        bne.n 0x66a6            ; branch if r0 == 0
    6696:   4806        ldr r0, [pc, #24]       ; r0 = (0x66b0) Stack position
    6698:   f000 fb0d   bl 0x6cb6               ; call
    669c:   2801        cmp r0, #1
    669e:   d1f1        bne.n 0x6684            ; branch if r0 != 1
    66a0:   f000 fb31   bl 0x6d06               ; call gen_remote_wakeup
    66a4:   e7ee        b.n 0x6684              ; branch
  0x66a6:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    66aa:   0000

  0x66ac:   0x20000000  ; main_state
  0x66b0:   0x20000234  ; pointer_3
  0x66b4:   0x400a8000  ; USB registers

clock_init:
    ; Write 1 to CKCU.LPCR.BKISO
    ; Enable backup domain accessible by other power domain
  0x66b8:   4814        ldr r0, [pc, #80]       ; r0 = (0x670c) [0x40088000]
    66ba:   2101        movs r1, #1             ; r1 = 1
    66bc:   f8c0 1300   str.w r1, [r0, #768]    ; [0x40088300] = r1

    66c0:   4a13        ldr r2, [pc, #76]       ; r2 = (0x6710) [0x43100000]
    66c2:   f8c2 10a8   str.w r1, [r2, #168]    ; [0x431000a8] = r1

    66c6:   f8d2 3108   ldr.w r3, [r2, #264]    ; r3 = [0x43100108]
    66ca:   2b00        cmp r3, #0
    66cc:   d0fb        beq.n 0x66c6            ; loop if r3 == 0

    66ce:   2300        movs r3, #0             ; r3 = 0
    66d0:   6213        str r3, [r2, #32]       ; [r2 + 0x20] = r3

    ; Set CKCU.PLLCFGR.PFBD = 9
    ; Set PLL VCO output clock feddback divider to 9
    66d2:   f04f 6310   mov.w r3, #150994944    ; r3 = 0x9000000
    66d6:   6183        str r3, [r0, #24]       ; [r0 + 0x18] = r3

    66d8:   f8c2 10a4   str.w r1, [r2, #164]    ; [r2 + 0xa4] = r1
  0x66dc:   f8d2 3104   ldr.w r3, [r2, #260]    ; r3 = [r2 + 0x104]
    66e0:   2b00        cmp r3, #0
    66e2:   d0fb        beq.n 0x66dc            ; loop if r3 == 0

    ; Set FMC.CFCR.WAIT = 3
    ; Sets the flash wait clock
    66e4:   4a0b        ldr r2, [pc, #44]       ; r2 = (0x6714) [0x40080200] FMC.CFCR
    66e6:   6813        ldr r3, [r2, #0]        ; r3 = [r2]
    66e8:   f023 0307   bic.w r3, r3, #7        ; r3 = r3 & ~7
    66ec:   f103 0303   add.w r3, r3, #3        ; r3 = r3 + 3
    66f0:   6013        str r3, [r2, #0]        ; [r2] = r3

    ; Set CKCU.AHBCFGR = 1
    ; Sets the system clock frequency to CK_AHB = CK_SYS / 2
    66f2:   6201        str r1, [r0, #32]       ; [r0 + 0x20] = r1

    ; Set clock source to PLL
    66f4:   6842        ldr r2, [r0, #4]        ; r2 = [r0 + 4]
    66f6:   f022 0203   bic.w r2, r2, #3        ; r2 = r2 & ~3
    66fa:   f102 0201   add.w r2, r2, #1        ; r2 = r2 + 1
    66fe:   6042        str r2, [r0, #4]        ; [r0 + 4] = r2

    6700:   6b42        ldr r2, [r0, #52]       ; r2 = [r0 + 0x34]
    6702:   ebb1 7f92   cmp.w r1, r2, lsr #30
    6706:   d1fb        bne.n 0x6700            ; branch if r1 != r2 >> 30
    6708:   4770        bx lr
    670a:   0000

  0x670c:   0x40088000  ; CKCU Registers
  0x6710:   0x43100000  ; In APB/AHB bit band alias block
  0x6714:   0x40080200  ; FMC.CFCR

function_e_56:
  0x6718:   b570        push {r4, r5, r6, lr}
    671a:   4d16        ldr r5, [pc, #88]   ; (0x6774)
    671c:   4816        ldr r0, [pc, #88]   ; (0x6778)
    671e:   2400        movs r4, #0
    6720:   6829        ldr r1, [r5, #0]
    6722:   b159        cbz r1, 0x673c
    6724:   68c1        ldr r1, [r0, #12]
    6726:   2901        cmp r1, #1
    6728:   d107        bne.n 0x673a
    672a:   60c4        str r4, [r0, #12]
    672c:   f100 0128   add.w r1, r0, #40   ; 0x28
    6730:   2208        movs r2, #8
    6732:   2001        movs r0, #1
    6734:   f000 fc06   bl 0x6f44               ; call usb_copy_send
    6738:   602c        str r4, [r5, #0]
    673a:   bd70        pop {r4, r5, r6, pc}
    673c:   4d0f        ldr r5, [pc, #60]   ; (0x677c)
    673e:   6829        ldr r1, [r5, #0]
    6740:   2900        cmp r1, #0
    6742:   d1fa        bne.n 0x673a
    6744:   f105 060c   add.w r6, r5, #12
    6748:   6831        ldr r1, [r6, #0]
    674a:   2900        cmp r1, #0
    674c:   d0f5        beq.n 0x673a
    674e:   68c1        ldr r1, [r0, #12]
    6750:   2901        cmp r1, #1
    6752:   d1f2        bne.n 0x673a
    6754:   60c4        str r4, [r0, #12]
    6756:   4908        ldr r1, [pc, #32]   ; (0x6778)
    6758:   2208        movs r2, #8
    675a:   3128        adds r1, #40   ; 0x28
    675c:   2001        movs r0, #1
    675e:   f000 fbf1   bl 0x6f44               ; call usb_copy_send
    6762:   6830        ldr r0, [r6, #0]
    6764:   f44f 617a   mov.w r1, #4000   ; 0xfa0
    6768:   4348        muls r0, r1
    676a:   10c9        asrs r1, r1, #3
    676c:   fbb0 f0f1   udiv r0, r0, r1
    6770:   6028        str r0, [r5, #0]
    6772:   bd70        pop {r4, r5, r6, pc}

  0x6774:   0x200000e8
  0x6778:   0x20000014
  0x677c:   0x20000308  ; pointer_12

function_e_57:
  0x6780:   b570        push {r4, r5, r6, lr}
    6782:   4d1b        ldr r5, [pc, #108]   ; (0x67f0)
    6784:   481b        ldr r0, [pc, #108]   ; (0x67f4)
    6786:   2400        movs r4, #0
    6788:   6829        ldr r1, [r5, #0]
    678a:   b139        cbz r1, 0x679c
    678c:   6901        ldr r1, [r0, #16]
    678e:   2901        cmp r1, #1
    6790:   d112        bne.n 0x67b8
    6792:   6104        str r4, [r0, #16]
    6794:   2205        movs r2, #5
    6796:   f100 0118   add.w r1, r0, #24
    679a:   e009        b.n 0x67b0
    679c:   4d16        ldr r5, [pc, #88]   ; (0x67f8)
    679e:   6829        ldr r1, [r5, #0]
    67a0:   b159        cbz r1, 0x67ba
    67a2:   6901        ldr r1, [r0, #16]
    67a4:   2901        cmp r1, #1
    67a6:   d107        bne.n 0x67b8
    67a8:   6104        str r4, [r0, #16]
    67aa:   4912        ldr r1, [pc, #72]   ; (0x67f4)
    67ac:   2202        movs r2, #2
    67ae:   1d09        adds r1, r1, #4
    67b0:   2002        movs r0, #2
    67b2:   f000 fbc7   bl 0x6f44               ; call usb_copy_send
    67b6:   602c        str r4, [r5, #0]
    67b8:   bd70        pop {r4, r5, r6, pc}
    67ba:   4d10        ldr r5, [pc, #64]   ; (0x67fc)
    67bc:   6829        ldr r1, [r5, #0]
    67be:   b139        cbz r1, 0x67d0
    67c0:   6901        ldr r1, [r0, #16]
    67c2:   2901        cmp r1, #1
    67c4:   d1f8        bne.n 0x67b8
    67c6:   6104        str r4, [r0, #16]
    67c8:   490a        ldr r1, [pc, #40]   ; (0x67f4)
    67ca:   2205        movs r2, #5
    67cc:   3120        adds r1, #32
    67ce:   e7ef        b.n 0x67b0
    67d0:   4d0b        ldr r5, [pc, #44]   ; (0x6800)
    67d2:   7829        ldrb r1, [r5, #0]
    67d4:   2900        cmp r1, #0
    67d6:   d0ef        beq.n 0x67b8
    67d8:   6901        ldr r1, [r0, #16]
    67da:   2901        cmp r1, #1
    67dc:   d1ec        bne.n 0x67b8
    67de:   6104        str r4, [r0, #16]
    67e0:   221f        movs r2, #31
    67e2:   4908        ldr r1, [pc, #32]   ; (0x6804)
    67e4:   2002        movs r0, #2
    67e6:   f000 fbad   bl 0x6f44               ; call usb_copy_send
    67ea:   702c        strb r4, [r5, #0]
    67ec:   bd70        pop {r4, r5, r6, pc}
    67ee:   0000

  0x67f0:   0x200000f0
  0x67f4:   0x20000014
  0x67f8:   0x200000f4
  0x67fc:   0x200000f8
  0x6800:   0x200000ec
  0x6804:   0x2000032c  ; pointer_32

function_68:
  0x6808:   4901        ldr r1, [pc, #4]        ; (0x6810)
    680a:   2001        movs r0, #1
    680c:   60c8        str r0, [r1, #12]       ; [r1 + 0xc] = r0 = 1
    680e:   4770        bx lr

  0x6810:   0x20000014

function_69:
  0x6814:   4901        ldr r1, [pc, #4]        ; (0x681c)
    6816:   2001        movs r0, #1
    6818:   6108        str r0, [r1, #16]       ; [r1 + 0x10] = r0 = 1
    681a:   4770        bx lr

  0x681c:   0x20000014

function_70:
  0x6820:   b510        push {r4, lr}
    6822:   4c0a        ldr r4, [pc, #40]       ; (0x684c)

    6824:   e9d4 1001   ldrd r1, r0, [r4, #4]
    6828:   4401        add r1, r0
    682a:   2240        movs r2, #64   ; 0x40
    682c:   2004        movs r0, #4
    682e:   f000 fb59   bl 0x6ee4               ; call usb_recv(4, , 0x40)

    6832:   6861        ldr r1, [r4, #4]
    6834:   4408        add r0, r1
    6836:   f3c0 0009   ubfx r0, r0, #0, #10
    683a:   6060        str r0, [r4, #4]
    683c:   4904        ldr r1, [pc, #16]       ; (0x6850)
    683e:   2001        movs r0, #1
    6840:   6148        str r0, [r1, #20]
    6842:   e8bd 4010   ldmia.w sp!, {r4, lr}
    6846:   f7fc bb97   b.w 0x2f78              ; call handle_update_packet()
    684a:   0000

  0x684c:   0x20000368
  0x6850:   0x20000014

function_e_58:
  0x6854:   b570        push {r4, r5, r6, lr}
    6856:   4604        mov r4, r0
    6858:   78c2        ldrb r2, [r0, #3]
    685a:   7880        ldrb r0, [r0, #2]
    685c:   88e5        ldrh r5, [r4, #6]
    685e:   88a1        ldrh r1, [r4, #4]
    6860:   2a01        cmp r2, #1
    6862:   d12b        bne.n 0x68bc
    6864:   b169        cbz r1, 0x6882
    6866:   2901        cmp r1, #1
    6868:   d00d        beq.n 0x6886
    686a:   2902        cmp r1, #2
    686c:   d126        bne.n 0x68bc
    686e:   2801        cmp r0, #1
    6870:   d01d        beq.n 0x68ae
    6872:   2802        cmp r0, #2
    6874:   d023        beq.n 0x68be
    6876:   2803        cmp r0, #3
    6878:   d024        beq.n 0x68c4
    687a:   2804        cmp r0, #4
    687c:   d11e        bne.n 0x68bc
    687e:   4813        ldr r0, [pc, #76]   ; (0x68cc)
    6880:   e017        b.n 0x68b2
    6882:   4813        ldr r0, [pc, #76]   ; (0x68d0)
    6884:   e015        b.n 0x68b2
    6886:   4813        ldr r0, [pc, #76]   ; (0x68d4)
    6888:   f7fc fdc3   bl 0x3412                   ; call function_e_35
    688c:   2800        cmp r0, #0
    688e:   d115        bne.n 0x68bc
    6890:   4a10        ldr r2, [pc, #64]   ; (0x68d4)
    6892:   2043        movs r0, #67   ; 0x43
    6894:   2300        movs r3, #0
    6896:   6891        ldr r1, [r2, #8]
    6898:   e001        b.n 0x689e
    689a:   540b        strb r3, [r1, r0]
    689c:   1e40        subs r0, r0, #1
    689e:   6856        ldr r6, [r2, #4]
    68a0:   4286        cmp r6, r0
    68a2:   d9fa        bls.n 0x689a
    68a4:   480b        ldr r0, [pc, #44]   ; (0x68d4)
    68a6:   61e1        str r1, [r4, #28]
    68a8:   f7fc fd7c   bl 0x33a4               ; call clear_two_words
    68ac:   e002        b.n 0x68b4
    68ae:   4808        ldr r0, [pc, #32]   ; (0x68d0)
    68b0:   3824        subs r0, #36   ; 0x24
    68b2:   61e0        str r0, [r4, #28]
    68b4:   2001        movs r0, #1
    68b6:   6225        str r5, [r4, #32]
    68b8:   f884 0024   strb.w r0, [r4, #36]   ; 0x24
    68bc:   bd70        pop {r4, r5, r6, pc}
    68be:   4804        ldr r0, [pc, #16]   ; (0x68d0)
    68c0:   3810        subs r0, #16
    68c2:   e7f6        b.n 0x68b2
    68c4:   4802        ldr r0, [pc, #8]   ; (0x68d0)
    68c6:   3808        subs r0, #8
    68c8:   e7f3        b.n 0x68b2
    68ca:   0000

  0x68cc:   0x2000032c  ; pointer_32
  0x68d0:   0x2000003c  ; pointer_33
  0x68d4:   0x20000358

ptr_write_func_ptrs:
    ; r0 = pointer = 0x20000270 (pointer_1)
  0x68d8:   4908        ldr r1, [pc, #32]       ; r1 = (0x68fc)
    68da:   6001        str r1, [r0, #0]        ; [r0] = r1
    68dc:   4908        ldr r1, [pc, #32]       ; r1 = (0x6900)
    68de:   6081        str r1, [r0, #8]        ; [r0 + 8] = r1
    68e0:   4908        ldr r1, [pc, #32]       ; r1 = (0x6904)
    68e2:   6181        str r1, [r0, #24]       ; [r0 + 0x18] = r1
    68e4:   4908        ldr r1, [pc, #32]       ; r1 = (0x6908)
    68e6:   6241        str r1, [r0, #36]       ; [r0 + 0x24] = r1
    68e8:   4908        ldr r1, [pc, #32]       ; r1 = (0x690c)
    68ea:   62c1        str r1, [r0, #44]       ; [r0 + 0x2c] = r1
    68ec:   4908        ldr r1, [pc, #32]       ; r1 = (0x6910)
    68ee:   6301        str r1, [r0, #48]       ; [r0 + 0x30] = r1
    68f0:   4908        ldr r1, [pc, #32]       ; r1 = (0x6914)
    68f2:   6381        str r1, [r0, #56]       ; [r0 + 0x38] = r1
    68f4:   2000        movs r0, #0             ; r0 = 0
    68f6:   f000 b88b   b.w 0x6a10              ; jump function_65
    68fa:   0000

  0x68fc:   0x6919  (function_66)
  0x6900:   0x6a11  (function_65)
  0x6904:   0x6a85  (usb_get_descriptor)
  0x6908:   0x695d  (function_67)
  0x690c:   0x6809  (function_68)
  0x6910:   0x6815  (function_69)
  0x6914:   0x6821  (function_70)

function_66:
  0x6918:   480e        ldr r0, [pc, #56]   ; (0x6954)
    691a:   b510        push {r4, lr}
    691c:   6801        ldr r1, [r0, #0]
    691e:   2901        cmp r1, #1
    6920:   d111        bne.n 0x6946
    6922:   2100        movs r1, #0
    6924:   6001        str r1, [r0, #0]
    6926:   4c0c        ldr r4, [pc, #48]   ; (0x6958)
    6928:   7820        ldrb r0, [r4, #0]
    692a:   f000 0001   and.w r0, r0, #1
    692e:   f7fd fe73   bl 0x4618                   ; call nop_3
    6932:   7820        ldrb r0, [r4, #0]
    6934:   f3c0 0040   ubfx r0, r0, #1, #1
    6938:   f7fd fe5c   bl 0x45f4                   ; call function_e_20
    693c:   7820        ldrb r0, [r4, #0]
    693e:   f3c0 0080   ubfx r0, r0, #2, #1
    6942:   f7fd fe6a   bl 0x461a                   ; call nop_2
    6946:   f7ff fee7   bl 0x6718                   ; call function_e_56
    694a:   e8bd 4010   ldmia.w sp!, {r4, lr}
    694e:   f7ff bf17   b.w 0x6780                  ; call function_e_57
    6952:   0000        movs r0, r0

  0x6954:   0x20000320
  0x6958:   0x20000014

function_67:
  0x695c:   b4f0        push {r4, r5, r6, r7}
    695e:   8801        ldrh r1, [r0, #0]
    6960:   f44f 7580   mov.w r5, #256   ; 0x100
    6964:   f640 1721   movw r7, #2337   ; 0x921
    6968:   006e        lsls r6, r5, #1
    696a:   4c26        ldr r4, [pc, #152]   ; (0x6a04)
    696c:   2301        movs r3, #1
    696e:   f6a1 1221   subw r2, r1, #2337   ; 0x921
    6972:   42b9        cmp r1, r7
    6974:   d01e        beq.n 0x69b4
    6976:   dc0a        bgt.n 0x698e
    6978:   f512 61f0   adds.w r1, r2, #1920   ; 0x780
    697c:   d011        beq.n 0x69a2
    697e:   42a9        cmp r1, r5
    6980:   d012        beq.n 0x69a8
    6982:   42b1        cmp r1, r6
    6984:   d12a        bne.n 0x69dc
    6986:   4920        ldr r1, [pc, #128]   ; (0x6a08)
    6988:   e9c0 1307   strd r1, r3, [r0, #28]
    698c:   e037        b.n 0x69fe
    698e:   2700        movs r7, #0
    6990:   42aa        cmp r2, r5
    6992:   d025        beq.n 0x69e0
    6994:   42b2        cmp r2, r6
    6996:   d121        bne.n 0x69dc
    6998:   4a1b        ldr r2, [pc, #108]   ; (0x6a08)
    699a:   7881        ldrb r1, [r0, #2]
    699c:   3a08        subs r2, #8
    699e:   6091        str r1, [r2, #8]
    69a0:   e02c        b.n 0x69fc
    69a2:   bcf0        pop {r4, r5, r6, r7}
    69a4:   f7ff bf56   b.w 0x6854              ; return function_e_58
    69a8:   8881        ldrh r1, [r0, #4]
    69aa:   2900        cmp r1, #0
    69ac:   d116        bne.n 0x69dc
    69ae:   e9c0 4307   strd r4, r3, [r0, #28]
    69b2:   e024        b.n 0x69fe
    69b4:   78c3        ldrb r3, [r0, #3]
    69b6:   88c1        ldrh r1, [r0, #6]
    69b8:   8882        ldrh r2, [r0, #4]
    69ba:   6201        str r1, [r0, #32]
    69bc:   2b02        cmp r3, #2
    69be:   d10d        bne.n 0x69dc
    69c0:   2a00        cmp r2, #0
    69c2:   d10b        bne.n 0x69dc
    69c4:   4b10        ldr r3, [pc, #64]   ; (0x6a08)
    69c6:   3b08        subs r3, #8
    69c8:   61c3        str r3, [r0, #28]
    69ca:   4b10        ldr r3, [pc, #64]   ; (0x6a0c)
    69cc:   e9c0 320a   strd r3, r2, [r0, #40]   ; 0x28
    69d0:   2202        movs r2, #2
    69d2:   f880 2024   strb.w r2, [r0, #36]   ; 0x24
    69d6:   480b        ldr r0, [pc, #44]   ; (0x6a04)
    69d8:   3038        adds r0, #56   ; 0x38
    69da:   6001        str r1, [r0, #0]
    69dc:   bcf0        pop {r4, r5, r6, r7}
    69de:   4770        bx lr
    69e0:   8882        ldrh r2, [r0, #4]
    69e2:   78c1        ldrb r1, [r0, #3]
    69e4:   2a00        cmp r2, #0
    69e6:   d1f9        bne.n 0x69dc
    69e8:   f44f 627a   mov.w r2, #4000   ; 0xfa0
    69ec:   6021        str r1, [r4, #0]
    69ee:   4351        muls r1, r2
    69f0:   10d2        asrs r2, r2, #3
    69f2:   fbb1 f1f2   udiv r1, r1, r2
    69f6:   4a03        ldr r2, [pc, #12]   ; (0x6a04)
    69f8:   3a0c        subs r2, #12
    69fa:   6011        str r1, [r2, #0]
    69fc:   6207        str r7, [r0, #32]
    69fe:   f880 3024   strb.w r3, [r0, #36]   ; 0x24
    6a02:   e7eb        b.n 0x69dc

  0x6a04:   0x20000314
  0x6a08:   0x2000001c
  0x6a0c:   0x6a75      ; function_81

function_65:
  0x6a10:   4815        ldr r0, [pc, #84]       ; r0 = (0x6a68)
    6a12:   b510        push {r4, lr}
    6a14:   2301        movs r3, #1
    6a16:   60c3        str r3, [r0, #12]
    6a18:   6103        str r3, [r0, #16]
    6a1a:   2100        movs r1, #0
    6a1c:   6141        str r1, [r0, #20]
    6a1e:   f100 0228   add.w r2, r0, #40   ; 0x28
    6a22:   2005        movs r0, #5
    6a24:   7011        strb r1, [r2, #0]
  0x6a26:   eb02 0400   add.w r4, r2, r0
    6a2a:   1e40        subs r0, r0, #1
    6a2c:   70a1        strb r1, [r4, #2]
    6a2e:   d5fa        bpl.n 0x6a26
    6a30:   480d        ldr r0, [pc, #52]   ; (0x6a68)
    6a32:   2202        movs r2, #2
    6a34:   1d00        adds r0, r0, #4
    6a36:   7003        strb r3, [r0, #0]
    6a38:   7041        strb r1, [r0, #1]
    6a3a:   3014        adds r0, #20
    6a3c:   7002        strb r2, [r0, #0]
    6a3e:   f8c0 1001   str.w r1, [r0, #1]
    6a42:   3008        adds r0, #8
    6a44:   2203        movs r2, #3
    6a46:   7002        strb r2, [r0, #0]
    6a48:   7081        strb r1, [r0, #2]
    6a4a:   70c1        strb r1, [r0, #3]
    6a4c:   7101        strb r1, [r0, #4]
    6a4e:   4a07        ldr r2, [pc, #28]   ; (0x6a6c)
    6a50:   7041        strb r1, [r0, #1]
    6a52:   2004        movs r0, #4
    6a54:   7010        strb r0, [r2, #0]
    6a56:   201c        movs r0, #28
  0x6a58:   eb02 0400   add.w r4, r2, r0
    6a5c:   1e40        subs r0, r0, #1
    6a5e:   70a1        strb r1, [r4, #2]
    6a60:   d5fa        bpl.n 0x6a58
    6a62:   4803        ldr r0, [pc, #12]   ; (0x6a70)
    6a64:   6003        str r3, [r0, #0]
    6a66:   bd10        pop {r4, pc}

  0x6a68:   0x20000014
  0x6a6c:   0x2000032c
  0x6a70:   0x20000010

function_81:
  0x6a74:   4a02        ldr r2, [pc, #8]        ; (0x6a80)
    6a76:   2101        movs r1, #1
    6a78:   f842 1020   str.w r1, [r2, r0, lsl #2]
    6a7c:   4770        bx lr
    6a7e:   0000

  0x6a80:   0x20000320

usb_get_descriptor:
    ; r0 = pointer
  0x6a84:   78c2        ldrb r2, [r0, #3]       ; r2 = [r0 + 3]
    6a86:   8881        ldrh r1, [r0, #4]       ; r1 = [r0 + 4]
    6a88:   2301        movs r3, #1             ; r3 = 1
    6a8a:   2a21        cmp r2, #33
    6a8c:   d007        beq.n 0x6a9e            ; branch if r2 == 0x21
    6a8e:   2a22        cmp r2, #34
    6a90:   d121        bne.n 0x6ad6            ; branch if r2 == 0x22

    6a92:   b1a9        cbz r1, 0x6ac0          ; branch if r1 == 0
    6a94:   2901        cmp r1, #1
    6a96:   d017        beq.n 0x6ac8            ; branch if r1 == 1
    6a98:   2902        cmp r1, #2
    6a9a:   d11a        bne.n 0x6ad2            ; branch if r1 == 2
    6a9c:   e01c        b.n 0x6ad8

  0x6a9e:   b121        cbz r1, 0x6aaa          ; branch if r1 == 0
    6aa0:   2901        cmp r1, #1
    6aa2:   d005        beq.n 0x6ab0            ; branch if r1 == 1
    6aa4:   2902        cmp r1, #2
    6aa6:   d106        bne.n 0x6ab6            ; branch if r1 == 2
    6aa8:   e007        b.n 0x6aba

  0x6aaa:   68c1        ldr r1, [r0, #12]       ; r1 = [r0 + 0xc]
    6aac:   3112        adds r1, #18            ; r1 = r1 + 0x12
    6aae:   e001        b.n 0x6ab4

  0x6ab0:   68c1        ldr r1, [r0, #12]       ; r1 = [r0 + 0xc]
    6ab2:   312b        adds r1, #43            ; r1 = r1 + 0x2b
  0x6ab4:   61c1        str r1, [r0, #28]       ; [r0 + 0x1c] = r1
  0x6ab6:   2109        movs r1, #9             ; r1 = r1 + 9
    6ab8:   e00a        b.n 0x6ad0

  0x6aba:   68c1        ldr r1, [r0, #12]       ; r1 = [r0 + 0xc]
    6abc:   314b        adds r1, #75            ; r1 = r1 + 0x4b
    6abe:   e7f9        b.n 0x6ab4

  0x6ac0:   4908        ldr r1, [pc, #32]       ; r1 = (0x6ae4) = 0x8998 (usb_report0_desc)
    6ac2:   61c1        str r1, [r0, #28]       ; [r0 + 0x1c] = r1
    6ac4:   2140        movs r1, #64            ; r1 = 64 bytes
    6ac6:   e003        b.n 0x6ad0

  0x6ac8:   4906        ldr r1, [pc, #24]       ; r1 = (0x6ae4) = 0x8998
    6aca:   3140        adds r1, #64            ; r1 = r1 + 0x40 = 0x89d8 (usb_report1_desc)
    6acc:   61c1        str r1, [r0, #28]       ; [r0 + 0x1c] = r1
    6ace:   2122        movs r1, #34            ; r1 = 34 bytes

  0x6ad0:   6201        str r1, [r0, #32]       ; [r0 + 0x20] = r1
  0x6ad2:   f880 3024   strb.w r3, [r0, #36]    ; [r0 + 0x24] = r3
  0x6ad6:   4770        bx lr

  0x6ad8:   4902        ldr r1, [pc, #8]        ; r1 = (0x6ae4) = 0x8998
    6ada:   3164        adds r1, #100           ; r1 = r1 + 0x64 = 0x89fc (usb_report2_desc)
    6adc:   61c1        str r1, [r0, #28]       ; [r0 + 0x1c] = r1
    6ade:   21c6        movs r1, #198           ; r1 = 198 bytes
    6ae0:   e7f6        b.n 0x6ad0              ; branch to return
    6ae2:   0000

  0x6ae4:   0x8998  ; usb_report0_desc

function_6:
    ; r0 = pointer = pointer_3
  0x6ae8:   f890 0034   ldrb.w r0, [r0, #52]    ; r0 = [r0 + 0x34]
    6aec:   f3c0 0040   ubfx r0, r0, #1, #1     ; r0 = (r0 >> 1) & 1
    6af0:   4770        bx lr

usb_entry:
    ; r0 = pointer_3
  0x6af2:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6af6:   4604        mov r4, r0              ; r4 = r0

    6af8:   f000 fa60   bl 0x6fbc               ; call usb_get_intr_flags()
    6afc:   4605        mov r5, r0              ; r5 = r0

    ; Test SOF flag
    6afe:   0780        lsls r0, r0, #30        ; r0 = r0 << 30
    6b00:   d506        bpl.n 0x6b10

    6b02:   6ce1        ldr r1, [r4, #76]       ; r1 = [r4 + 0x4c]
    6b04:   b109        cbz r1, 0x6b0a          ; branch if r1 == 0
    6b06:   6d20        ldr r0, [r4, #80]       ; r0 = [r4 + 0x50]
    6b08:   4788        blx r1                  ; branch r1

    ; Clear SOFIF
  0x6b0a:   2002        movs r0, #2             ; r0 = 2
    6b0c:   f000 f910   bl 0x6d30               ; call usb_set_intr_flags(2)

    ; Test suspend flag
  0x6b10:   06e8        lsls r0, r5, #27        ; r0 = r5 << 27
    6b12:   d50e        bpl.n 0x6b32

    ; Clear SUSPIF
    6b14:   2010        movs r0, #16            ; r0 = 0x10
    6b16:   f000 f90b   bl 0x6d30               ; call usb_set_intr_flags(0x10)

    6b1a:   f894 0032   ldrb.w r0, [r4, #50]    ; r0 = [r4 + 0x32]
    6b1e:   2802        cmp r0, #2
    6b20:   d307        bcc.n 0x6b32            ; branch if r0 < 2

    6b22:   f000 fa55   bl 0x6fd0               ; call usb_set_lpmode_pdwn()

    6b26:   f814 0f32   ldrb.w r0, [r4, #50]!   ; r0 = [r4 + 0x32]
                                                ; r4 = r4 + 0x32
    6b2a:   7060        strb r0, [r4, #1]       ; [r4 + 1] = r0
    6b2c:   2003        movs r0, #3             ; r0 = 3
    6b2e:   f804 0932   strb.w r0, [r4], #-50   ; [r4] = r0
                                                ; r4 = r4 - 0x32

    ; Test USB reset flag
  0x6b32:   0768        lsls r0, r5, #29        ; r0 = r5 << 29
    6b34:   f04f 0700   mov.w r7, #0            ; r7 = 0
    6b38:   d523        bpl.n 0x6b82

    6b3a:   f104 0420   add.w r4, r4, #32       ; r4 = r4 + 0x20
    6b3e:   f04f 30ff   mov.w r0, #4294967295   ; r9 = 0xffffffff
    6b42:   6e66        ldr r6, [r4, #100]      ; r6 = [r4 + 0x64]
    6b44:   6020        str r0, [r4, #0]        ; [r4] = r0
    6b46:   7427        strb r7, [r4, #16]      ; [r4 + 0x10] = r7
    6b48:   7467        strb r7, [r4, #17]      ; [r4 + 0x11] = r7
    6b4a:   7d20        ldrb r0, [r4, #20]      ; r0 = [r4 + 0x14]
    6b4c:   f020 0002   bic.w r0, r0, #2        ; r0 = r0 & ~2
    6b50:   7520        strb r0, [r4, #20]      ; [r4 + 0x14] = r0
    6b52:   f04f 0004   mov.w r0, #4            ; r0 = 4
    6b56:   74a0        strb r0, [r4, #18]      ; [r4 + 0x12] = r0
    6b58:   61a7        str r7, [r4, #24]       ; [r4 + 0x18] = r7

    6b5a:   f000 f937   bl 0x6dcc               ; call usb_ckcu_voodoo()

    6b5e:   f000 fa3f   bl 0x6fe0               ; call usb_clear_csr()

    6b62:   2000        movs r0, #0             ; r0 = 0
    6b64:   6e61        ldr r1, [r4, #100]      ; r1 = [r4 + 0x64]
    6b66:   f000 f98d   bl 0x6e84               ; call function_e_70

    6b6a:   6830        ldr r0, [r6, #0]        ; r0 = [r6]
    6b6c:   f000 fa0e   bl 0x6f8c               ; call usb_enable_intr(r0)

    ; reset callback
    6b70:   6a61        ldr r1, [r4, #36]       ; r1 = [r4 + 0x24]
    6b72:   f1a4 0420   sub.w r4, r4, #32       ; r4 = r4 - 0x20
    6b76:   b109        cbz r1, 0x6b7c          ; branch if r1 == 0
    6b78:   6ca0        ldr r0, [r4, #72]       ; r0 = [r4 + 0x48]
    6b7a:   4788        blx r1                  ; call r1

    ; Clear URSTIF
  0x6b7c:   2004        movs r0, #4             ; r0 = 4
    6b7e:   f000 f8d7   bl 0x6d30               ; call usb_set_intr_flags(4)

    ; Test resume flag
    6b82:   0728        lsls r0, r5, #28        ; r0 = r5 << 28
    6b84:   d508        bpl.n 0x6b98

    6b86:   f000 fa2b   bl 0x6fe0               ; call usb_clear_csr()

    6b8a:   f894 0033   ldrb.w r0, [r4, #51]    ; r0 = [r4 + 0x33]
    6b8e:   f884 0032   strb.w r0, [r4, #50]    ; [r4 + 0x32] = r0

    ; Clear RSMIF
    6b92:   2008        movs r0, #8             ; r0 = 8
    6b94:   f000 f8cc   bl 0x6d30               ; call usb_set_intr_flags(8)

    ; Test EP0 flag
  0x6b98:   05e8        lsls r0, r5, #23        ; r0 = r5 << 23
    6b9a:   f44f 7680   mov.w r6, #256          ; r6 = 0x100
    6b9e:   d57a        bpl.n 0x6c96

    6ba0:   2000        movs r0, #0             ; r0 = 0
    6ba2:   f000 f95f   bl 0x6e64               ; call usb_get_ep_intr

    6ba6:   4605        mov r5, r0
    6ba8:   0580        lsls r0, r0, #22
    6baa:   d522        bpl.n 0x6bf2

    6bac:   4620        mov r0, r4              ; r0 = r4
    6bae:   f000 fa7b   bl 0x70a8               ; call usb_copy_ep_setup(r4)

    6bb2:   f884 7024   strb.w r7, [r4, #36]    ; 0x24
    6bb6:   6227        str r7, [r4, #32]       ; [r4 + 0x20] = r7
    6bb8:   7820        ldrb r0, [r4, #0]       ; r0 = [r4]
    6bba:   f010 0060   ands.w r0, r0, #96      ; 0x60
    6bbe:   d002        beq.n 0x6bc6
    6bc0:   2820        cmp r0, #32
    6bc2:   d108        bne.n 0x6bd6
    6bc4:   e003        b.n 0x6bce
  0x6bc6:   4620        mov r0, r4              ; r0 = r4
    6bc8:   f000 fbae   bl 0x7328               ; call function_e_79
    6bcc:   e003        b.n 0x6bd6

    6bce:   6e21        ldr r1, [r4, #96]       ; 0x60
    6bd0:   b109        cbz r1, 0x6bd6
    6bd2:   4620        mov r0, r4
    6bd4:   4788        blx r1                  ; call r1 = function_67

  0x6bd6:   f894 0024   ldrb.w r0, [r4, #36]    ; 0x24
    6bda:   2801        cmp r0, #1
    6bdc:   d017        beq.n 0x6c0e
    6bde:   2802        cmp r0, #2
    6be0:   d01e        beq.n 0x6c20
    6be2:   2000        movs r0, #0
    6be4:   f000 f99e   bl 0x6f24               ; call function_e_72

  0x6be8:   f44f 7100   mov.w r1, #512          ; 0x200
    6bec:   2000        movs r0, #0
    6bee:   f000 f901   bl 0x6df4               ; call usb_set_ep_intr
    6bf2:   07a8        lsls r0, r5, #30
    6bf4:   d52e        bpl.n 0x6c54
    6bf6:   2102        movs r1, #2
    6bf8:   2000        movs r0, #0
    6bfa:   f000 f8fb   bl 0x6df4               ; call usb_set_ep_intr
    6bfe:   6a20        ldr r0, [r4, #32]
    6c00:   1c40        adds r0, r0, #1
    6c02:   d027        beq.n 0x6c54
    6c04:   f894 0024   ldrb.w r0, [r4, #36]    ; 0x24
    6c08:   2802        cmp r0, #2
    6c0a:   d00f        beq.n 0x6c2c
    6c0c:   e022        b.n 0x6c54

    6c0e:   88e0        ldrh r0, [r4, #6]
    6c10:   6a21        ldr r1, [r4, #32]
    6c12:   4281        cmp r1, r0
    6c14:   dd00        ble.n 0x6c18
    6c16:   6220        str r0, [r4, #32]
    6c18:   4620        mov r0, r4
    6c1a:   f000 fb49   bl 0x72b0               ; call function_e_78
    6c1e:   e7e3        b.n 0x6be8              ; loop
    6c20:   2200        movs r2, #0
    6c22:   4611        mov r1, r2
    6c24:   4610        mov r0, r2
    6c26:   f000 f98d   bl 0x6f44               ; call usb_copy_send(0, 0, 0)
    6c2a:   e7dd        b.n 0x6be8              ; loop

    6c2c:   2240        movs r2, #64            ; 0x40
    6c2e:   2000        movs r0, #0
    6c30:   69e1        ldr r1, [r4, #28]
    6c32:   f000 f957   bl 0x6ee4               ; call usb_recv
    6c36:   69e1        ldr r1, [r4, #28]
    6c38:   4401        add r1, r0
    6c3a:   61e1        str r1, [r4, #28]
    6c3c:   6a21        ldr r1, [r4, #32]
    6c3e:   1a08        subs r0, r1, r0
    6c40:   6220        str r0, [r4, #32]
    6c42:   d107        bne.n 0x6c54
    6c44:   2001        movs r0, #1
    6c46:   f884 0024   strb.w r0, [r4, #36]    ; 0x24
    6c4a:   6aa1        ldr r1, [r4, #40]       ; 0x28
    6c4c:   b111        cbz r1, 0x6c54
    6c4e:   6ae0        ldr r0, [r4, #44]       ; 0x2c
    6c50:   4788        blx r1
    6c52:   62a7        str r7, [r4, #40]       ; 0x28
  0x6c54:   06e8        lsls r0, r5, #27
    6c56:   d506        bpl.n 0x6c66
    6c58:   4620        mov r0, r4
    6c5a:   f000 fb29   bl 0x72b0               ; call function_e_78
    6c5e:   2110        movs r1, #16
    6c60:   2000        movs r0, #0
    6c62:   f000 f8c7   bl 0x6df4               ; call usb_set_ep_intr
    6c66:   4630        mov r0, r6
    6c68:   f000 f862   bl 0x6d30               ; call usb_set_intr_flags(r0 = r6)

    ; EP1~EP7 flags
    6c6c:   e013        b.n 0x6c96              ; enter loop
  0x6c6e:   4628        mov r0, r5              ; r0 = r5
    6c70:   f000 f8f8   bl 0x6e64               ; call usb_get_ep_intr
    6c74:   f010 0f12   tst.w r0, #18
    6c78:   d00d        beq.n 0x6c96
    6c7a:   2112        movs r1, #18            ; r1 = 0x12
    6c7c:   4628        mov r0, r5              ; r0 = r5
    6c7e:   f000 f8b9   bl 0x6df4               ; call usb_set_ep_intr
    6c82:   fa06 f005   lsl.w r0, r6, r5        ; r0 = r6 << r5
    6c86:   f000 f853   bl 0x6d30               ; call usb_set_intr_flags(r0)
    6c8a:   eb04 0085   add.w r0, r4, r5, lsl #2    ; r0 = r4 + r5 << 2
    6c8e:   6e41        ldr r1, [r0, #100]      ; r1 = [r0 + 0x64]
    6c90:   b109        cbz r1, 0x6c96
    6c92:   4628        mov r0, r5              ; r0 = r5
    6c94:   4788        blx r1

    6c96:   f000 f991   bl 0x6fbc               ; call usb_get_intr_flags()
    6c9a:   f000 f97f   bl 0x6f9c               ; call function_e_75
    6c9e:   4605        mov r5, r0              ; r5 = r0
    6ca0:   1c40        adds r0, r0, #1         ; r0 = r0 + 1
    6ca2:   d1e4        bne.n 0x6c6e            ; loop

    6ca4:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

function_23:
    ; r0 = pointer = 0x20000234 (pointer_3)
  0x6ca8:   f100 0030   add.w r0, r0, #48       ; r0 = r0 + 0x30
    6cac:   2102        movs r1, #2             ; r1 = 2
    6cae:   7081        strb r1, [r0, #2]       ; [r0 + 2] = r1
    6cb0:   6d40        ldr r0, [r0, #84]       ; r0 = [r0 + 0x54] = [0x200002b8] (pointer_38)
    6cb2:   f000 b98b   b.w 0x6fcc              ; jump jump_1(pointer_39)

    6cb6:   f890 0032   ldrb.w r0, [r0, #50]    ; r0 = [r0 + 0x32]
    6cba:   2803        cmp r0, #3
    6cbc:   d001        beq.n 0x6cc2            ; return (r0 == 3 ? 1 : 0)
    6cbe:   2000        movs r0, #0
    6cc0:   4770        bx lr
  0x6cc2:   2001        movs r0, #1
    6cc4:   4770        bx lr

function_75:
    ; r0 = pointer = 0x20000234 (pointer_3)
  0x6cc6:   b510        push {r4, lr}
    6cc8:   f100 0430   add.w r4, r0, #48       ; r4 = r0 + 0x30
    6ccc:   7920        ldrb r0, [r4, #4]       ; r0 = [r4 + 4]
    6cce:   f3c0 0100   ubfx r1, r0, #0, #1     ; r1 = r0 & 1
    6cd2:   6d60        ldr r0, [r4, #84]       ; r0 = [r4 + 0x54]
    6cd4:   f000 f98c   bl 0x6ff0               ; call function_82
    6cd8:   78a0        ldrb r0, [r4, #2]       ; r0 = [r4 + 2]
    6cda:   f1a4 0430   sub.w r4, r4, #48       ; r4 = r4 - 0x30
    6cde:   2803        cmp r0, #3
    6ce0:   d105        bne.n 0x6cee            ; branch if r0 != 3
    6ce2:   f8d4 1088   ldr.w r1, [r4, #136]    ; r1 = [r4 + 0x88]
    6ce6:   b111        cbz r1, 0x6cee          ; branch if r1 == 0
    6ce8:   f8d4 008c   ldr.w r0, [r4, #140]    ; r0 = [r4 + 0x8c]
    6cec:   4788        blx r1                  ; call r1
  0x6cee:   6be1        ldr r1, [r4, #60]       ; r1 = [r4 + 0x3c]
    6cf0:   2900        cmp r1, #0
    6cf2:   d007        beq.n 0x6d04            ; branch if r1 == 0
    6cf4:   f894 0032   ldrb.w r0, [r4, #50]    ; r0 = [r4 + 0x32]
    6cf8:   2806        cmp r0, #6
    6cfa:   d103        bne.n 0x6d04            ; branch if r0 != 6
    6cfc:   6c20        ldr r0, [r4, #64]       ; r0 = [r4 + 0x40]
    6cfe:   e8bd 4010   ldmia.w sp!, {r4, lr}
    6d02:   4708        bx r1                   ; jump r1
  0x6d04:   bd10        pop {r4, pc}

gen_remote_wakeup:
  0x6d06:   b510        push {r4, lr}
    6d08:   f000 f96a   bl 0x6fe0               ; call usb_clear_csr
    6d0c:   e8bd 4010   ldmia.w sp!, {r4, lr}
    6d10:   f000 b9d2   b.w 0x70b8              ; jump usb_set_genrsm

ptr_set_desc_ptr:
    ; r0 = pointer = 0x2000023c (pointer_2)
  0x6d14:   4904        ldr r1, [pc, #16]       ; r1 = (0x6d28)
    6d16:   6001        str r1, [r0, #0]        ; [r0] = r1         put 0x8ac4 (usb_device_desc)
    6d18:   3114        adds r1, #20            ; r1 = r1 + 0x14
    6d1a:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1     put 0x8ad8 (usb_config_desc)
    6d1c:   4903        ldr r1, [pc, #12]       ; r1 = (0x6d2c)
    6d1e:   6081        str r1, [r0, #8]        ; [r0 + 8] = r1     put 0x20000044 (pointer_37)
    6d20:   2104        movs r1, #4             ; r1 = 4
    6d22:   60c1        str r1, [r0, #12]       ; [r0 = 0xc] = r1   put 4
    6d24:   4770        bx lr
    6d26:   0000

  0x6d28:   0x8ac4 (usb_device_desc)
  0x6d2c:   0x20000044  ; pointer_37

usb_set_intr_flags:
    ; r0 = new value of USBISR
    ; Set USBISR to r0
  0x6d30:   4901        ldr r1, [pc, #4]        ; r1 = (0x6d38) USB Registers
    6d32:   6088        str r0, [r1, #8]        ; [r1 + 8] = r0
    6d34:   4770        bx lr
    6d36:   0000

  0x6d38:   0x400a8000  ; USB Registers

usb_init:
  0x6d3c:   b510        push {r4, lr}
    ; Enable backup domain register access
    6d3e:   2101        movs r1, #1
    6d40:   2040        movs r0, #64
    6d42:   f7fc fb87   bl 0x3454               ; call ckcu_apb1_clock_enable(0x40, 1)

    ; Enable USB clock
    6d46:   2101        movs r1, #1
    6d48:   0288        lsls r0, r1, #10
    6d4a:   f7fc fb6b   bl 0x3424               ; call ckcu_ahb_clock_enable(0x400, 1)

    ; Set USB clock speed
    6d4e:   2002        movs r0, #2
    6d50:   f7fc fb8c   bl 0x346c               ; call ckcu_set_usb_prescaler(2)

    6d54:   490c        ldr r1, [pc, #48]       ; r1 = (0x6d88) pointer_39
    6d56:   f1a1 000c   sub.w r0, r1, #12       ; r0 = r1 - 0xc
    6d5a:   6001        str r1, [r0, #0]        ; [r0] = r1
    6d5c:   490b        ldr r1, [pc, #44]       ; r1 = (0x6d8c) function_17
    6d5e:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1

    6d60:   387c        subs r0, #124           ; r0 = r0 - 0x7c = 0x2000023c
    6d62:   f7ff ffd7   bl 0x6d14               ; call ptr_set_desc_ptr(pointer_2)

    6d66:   4808        ldr r0, [pc, #32]       ; r0 = (0x6d88) pointer_39
    6d68:   3854        subs r0, #84            ; r0 = r0 - 0x54
    6d6a:   f7ff fdb5   bl 0x68d8               ; call ptr_write_func_ptrs(pointer_1)

    6d6e:   4806        ldr r0, [pc, #24]       ; r0 = (0x6d88) pointer_39
    6d70:   3890        subs r0, #144           ; r0 = r0 - 0x90 = 0x20000234
    6d72:   f7ff ff99   bl 0x6ca8               ; call function_23(pointer_3)

    ; Enable interrupt 53 (USB)
    ; Write 0x200000 to 0xe000e104
    ; Set NVIC_ISER1 to 0x200000
    6d76:   4906        ldr r1, [pc, #24]       ; r1 = (0x6d90)
    6d78:   f44f 1000   mov.w r0, #2097152      ; r0 = 0x200000
    6d7c:   f8c1 0100   str.w r0, [r1, #256]    ; [r1 + 0x100] = r0

    6d80:   e8bd 4010   ldmia.w sp!, {r4, lr}
    6d84:   f7fc bb02   b.w 0x338c

  0x6d88:   0x200002c4  ; pointer_39
  0x6d8c:   0x6625      ; function_17
  0x6d90:   0xe000e004

usb_dp_wake_up:
  0x6d94:   4905        ldr r1, [pc, #20]       ; (0x6dac)
    6d96:   2801        cmp r0, #1
    6d98:   6808        ldr r0, [r1, #0]
    6d9a:   d003        beq.n 0x6da4
    6d9c:   f420 6000   bic.w r0, r0, #2048     ; 0x800
    6da0:   6008        str r0, [r1, #0]
    6da2:   4770        bx lr

    6da4:   f440 6000   orr.w r0, r0, #2048     ; 0x800
    6da8:   e7fa        b.n 0x6da0
    6daa:   0000        movs r0, r0

  0x6dac:   0x400a8000  ; USB Registers

usb_dp_pull_up:
    ; r0 = 0/1 disable/enable
    ; Set USBCSR.DPPUEN
    : Enable/Disable USB DP pull up
  0x6db0:   4905        ldr r1, [pc, #20]       ; (0x6dc8)
    6db2:   2801        cmp r0, #1
    6db4:   6808        ldr r0, [r1, #0]
    6db6:   d003        beq.n 0x6dc0
    6db8:   f420 6080   bic.w r0, r0, #1024     ; 0x400
    6dbc:   6008        str r0, [r1, #0]
    6dbe:   4770        bx lr
    6dc0:   f440 6080   orr.w r0, r0, #1024     ; 0x400
    6dc4:   e7fa        b.n 0x6dbc
    6dc6:   0000        movs r0, r0

  0x6dc8:   0x400a8000  ; USB Registers

usb_ckcu_voodoo:
  0x6dcc:   2101        movs r1, #1
    6dce:   2020        movs r0, #32
    6dd0:   f7ff b894   b.w 0x5efc              ; call reset_peripheral(USBRST, 1)

usb_ep_data_toggle:
    ; r0 = ep #
    ; set DTGRX and DTGTX
  0x6dd4:   b510        push {r4, lr}
    6dd6:   f000 fb63   bl 0x74a0               ; call usb_get_ep_reg
    6dda:   6801        ldr r1, [r0, #0]
    6ddc:   f001 0109   and.w r1, r1, #9
    6de0:   6001        str r1, [r0, #0]
    6de2:   bd10        pop {r4, pc}

usb_ep_stall:
    ; r0 = ep #
    ; set STLRX and STLTX
  0x6de4:   b510        push {r4, lr}
    6de6:   f000 fb5b   bl 0x74a0               ; call usb_get_ep_reg
    6dea:   6801        ldr r1, [r0, #0]
    6dec:   f001 0124   and.w r1, r1, #36   ; 0x24
    6df0:   6001        str r1, [r0, #0]
    6df2:   bd10        pop {r4, pc}

usb_set_ep_intr:
    ; r0 = ep #
    ; r1 = ep ISR flags
  0x6df4:   b510        push {r4, lr}
    6df6:   460c        mov r4, r1
    6df8:   f000 fb52   bl 0x74a0               ; call usb_get_ep_reg
    6dfc:   6084        str r4, [r0, #8]
    6dfe:   bd10        pop {r4, pc}

usb_get_ep_buff:
  0x6e00:   b510        push {r4, lr}
    6e02:   f000 fb4d   bl 0x74a0               ; call usb_get_ep_reg
    6e06:   6900        ldr r0, [r0, #16]
    6e08:   4902        ldr r1, [pc, #8]   ; (0x6e14)
    6e0a:   f3c0 0009   ubfx r0, r0, #0, #10
    6e0e:   4408        add r0, r1
    6e10:   bd10        pop {r4, pc}
    6e12:   0000

  0x6e14:   0x400aa000  ; USB SRAM

usb_get_ep_buff_end:
  0x6e18:   b570        push {r4, r5, r6, lr}
    6e1a:   4605        mov r5, r0
    6e1c:   f000 fb40   bl 0x74a0               ; call usb_get_ep_reg
    6e20:   4604        mov r4, r0
    6e22:   4628        mov r0, r5
    6e24:   f000 f80a   bl 0x6e3c               ; call usb_get_ep_len
    6e28:   6921        ldr r1, [r4, #16]
    6e2a:   f3c1 0109   ubfx r1, r1, #0, #10
    6e2e:   4408        add r0, r1
    6e30:   4901        ldr r1, [pc, #4]   ; (0x6e38)
    6e32:   4408        add r0, r1
    6e34:   bd70        pop {r4, r5, r6, pc}
    6e36:   0000

  0x6e38:   0x400aa000  ; USB SRAM

usb_get_ep_len:
  0x6e3c:   b510        push {r4, lr}
    6e3e:   f000 fb2f   bl 0x74a0               ; call usb_get_ep_reg
    6e42:   6900        ldr r0, [r0, #16]
    6e44:   f3c0 2089   ubfx r0, r0, #10, #10
    6e48:   bd10        pop {r4, pc}

function_e_67:
  0x6e4a:   b510        push {r4, lr}
    6e4c:   f000 fb28   bl 0x74a0               ; call usb_get_ep_reg
    6e50:   6901        ldr r1, [r0, #16]
    6e52:   6800        ldr r0, [r0, #0]
    6e54:   00c9        lsls r1, r1, #3
    6e56:   d502        bpl.n 0x6e5e
    6e58:   f3c0 0080   ubfx r0, r0, #2, #1
    6e5c:   bd10        pop {r4, pc}
    6e5e:   f3c0 1040   ubfx r0, r0, #5, #1
    6e62:   bd10        pop {r4, pc}

usb_get_ep_intr:
  0x6e64:   b510        push {r4, lr}
    6e66:   f000 fb1b   bl 0x74a0               ; call usb_get_ep_reg
    6e6a:   6841        ldr r1, [r0, #4]
    6e6c:   6880        ldr r0, [r0, #8]
    6e6e:   4008        ands r0, r1
    6e70:   bd10        pop {r4, pc}

usb_get_ep_tcnt:
  0x6e72:   b510        push {r4, lr}
    6e74:   460c        mov r4, r1
    6e76:   f000 fb13   bl 0x74a0               ; call usb_get_ep_reg
    6e7a:   68c0        ldr r0, [r0, #12]
    6e7c:   40e0        lsrs r0, r4
    6e7e:   f3c0 0008   ubfx r0, r0, #0, #9
    6e82:   bd10        pop {r4, pc}

function_e_70:
  0x6e84:   b570        push {r4, r5, r6, lr}
    6e86:   460c        mov r4, r1
    6e88:   4605        mov r5, r0
    6e8a:   f000 fb09   bl 0x74a0               ; call usb_get_ep_reg
    6e8e:   eb04 01c5   add.w r1, r4, r5, lsl #3
    6e92:   684a        ldr r2, [r1, #4]
    6e94:   6102        str r2, [r0, #16]
    6e96:   6889        ldr r1, [r1, #8]
    6e98:   6041        str r1, [r0, #4]
    6e9a:   f04f 31ff   mov.w r1, #4294967295   ; 0xffffffff
    6e9e:   6081        str r1, [r0, #8]
    6ea0:   4628        mov r0, r5
    6ea2:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}

    ; ????
    6ea6:   f000 b835   b.w 0x6f14                  ; call function_e_71

usb_read_ep_buff:
  0x6eaa:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6eae:   460f        mov r7, r1
    6eb0:   4616        mov r6, r2
    6eb2:   0005        movs r5, r0
    6eb4:   d011        beq.n 0x6eda
    6eb6:   2100        movs r1, #0
  0x6eb8:   f7ff ffdb   bl 0x6e72                   ; call usb_get_ep_tcnt
    6ebc:   4604        mov r4, r0
    6ebe:   42b0        cmp r0, r6
    6ec0:   d808        bhi.n 0x6ed4
    6ec2:   4628        mov r0, r5
    6ec4:   b15d        cbz r5, 0x6ede
    6ec6:   f7ff ff9b   bl 0x6e00                   ; call usb_get_ep_buff
  0x6eca:   1ce1        adds r1, r4, #3
    6ecc:   088a        lsrs r2, r1, #2
    6ece:   4639        mov r1, r7
    6ed0:   f000 fade   bl 0x7490
    6ed4:   4620        mov r0, r4
    6ed6:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
  0x6eda:   2110        movs r1, #16
    6edc:   e7ec        b.n 0x6eb8
    6ede:   f7ff ff9b   bl 0x6e18                   ; call usb_get_ep_buff_end
    6ee2:   e7f2        b.n 0x6eca

usb_recv:
    r0 = ep
    r1 = dest
    r2 = size
  0x6ee4:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6ee8:   460f        mov r7, r1
    6eea:   4615        mov r5, r2
    6eec:   4606        mov r6, r0
    6eee:   f000 fad7   bl 0x74a0               ; call usb_get_ep_reg
    6ef2:   4604        mov r4, r0
    6ef4:   2000        movs r0, #0
    6ef6:   b13d        cbz r5, 0x6f08
    6ef8:   462a        mov r2, r5
    6efa:   4639        mov r1, r7
    6efc:   4630        mov r0, r6
    6efe:   f7ff ffd4   bl 0x6eaa               ; call usb_read_ep_buff
    6f02:   b908        cbnz r0, 0x6f08
    6f04:   2d00        cmp r5, #0
    6f06:   d103        bne.n 0x6f10
    6f08:   6821        ldr r1, [r4, #0]
    6f0a:   f001 0110   and.w r1, r1, #16
    6f0e:   6021        str r1, [r4, #0]
    6f10:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

function_e_71:
  0x6f14:   b510        push {r4, lr}
    6f16:   f000 fac3   bl 0x74a0               ; call usb_get_ep_reg
    6f1a:   6801        ldr r1, [r0, #0]
    6f1c:   f001 0119   and.w r1, r1, #25
    6f20:   6001        str r1, [r0, #0]
    6f22:   bd10        pop {r4, pc}

function_e_72:
  0x6f24:   b510        push {r4, lr}
    6f26:   f000 fabb   bl 0x74a0               ; call usb_get_ep_reg
    6f2a:   2104        movs r1, #4
    6f2c:   6001        str r1, [r0, #0]
    6f2e:   bd10        pop {r4, pc}

function_e_73:
  0x6f30:   b510        push {r4, lr}
    6f32:   f000 fab5   bl 0x74a0               ; call usb_get_ep_reg
    6f36:   2140        movs r1, #64   ; 0x40
    6f38:   6081        str r1, [r0, #8]
    6f3a:   6802        ldr r2, [r0, #0]
    6f3c:   2124        movs r1, #36   ; 0x24
    6f3e:   4391        bics r1, r2
    6f40:   6001        str r1, [r0, #0]
    6f42:   bd10        pop {r4, pc}

usb_copy_send:
    ; a0 = ep
    ; a1 = data ptr
    ; a2 = size
  0x6f44:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    6f48:   4688        mov r8, r1
    6f4a:   4614        mov r4, r2
    6f4c:   4607        mov r7, r0
    6f4e:   f7ff ff75   bl 0x6e3c               ; call usb_get_ep_len
    6f52:   4606        mov r6, r0
    6f54:   4638        mov r0, r7
    6f56:   f000 faa3   bl 0x74a0               ; call usb_get_ep_reg
    6f5a:   4605        mov r5, r0
    6f5c:   2100        movs r1, #0
    6f5e:   4638        mov r0, r7
    6f60:   f7ff ff87   bl 0x6e72               ; call usb_get_ep_tcnt
    6f64:   42b4        cmp r4, r6
    6f66:   d800        bhi.n 0x6f6a
    6f68:   b110        cbz r0, 0x6f70
    6f6a:   2000        movs r0, #0
  0x6f6c:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

    6f70:   4638        mov r0, r7
    6f72:   f7ff ff45   bl 0x6e00               ; call usb_get_ep_buff
    6f76:   4601        mov r1, r0
    6f78:   1ce0        adds r0, r4, #3
    6f7a:   0882        lsrs r2, r0, #2
    6f7c:   4640        mov r0, r8
    6f7e:   f000 fa87   bl 0x7490               ; copy data into ep buffer
    6f82:   60ec        str r4, [r5, #12]       ; write length into ep TCR reg
    6f84:   2002        movs r0, #2
    6f86:   6028        str r0, [r5, #0]        ; toggle ep NAKTX
    6f88:   4620        mov r0, r4              ; return size
  0x6f8a:   e7ef        b.n 0x6f6c

usb_enable_intr:
    ; r0 =
  0x6f8c:   4902        ldr r1, [pc, #8]    ; r1 = (0x6f98)
    6f8e:   684a        ldr r2, [r1, #4]    ; r2 = [r1 + 4]
    6f90:   4302        orrs r2, r0         ; r2 = r2 | r0
    6f92:   604a        str r2, [r1, #4]    ; [r1 + 4] = r2
    6f94:   4770        bx lr
    6f96:   0000

  0x6f98:   0x400a8000  ; USB Registers

function_e_75:
    ; r0 =
  0x6f9c:   4603        mov r3, r0              ; r3 = r0
    6f9e:   2107        movs r1, #7             ; r1 = 7
  0x6fa0:   f101 0208   add.w r2, r1, #8        ; r2 = r1 + 8
    6fa4:   fa23 f002   lsr.w r0, r3, r2        ; r0 = r3 >> r2
    6fa8:   07c0        lsls r0, r0, #31        ; r0 = r0 << 31
    6faa:   d001        beq.n 0x6fb0
    6fac:   b248        sxtb r0, r1
    6fae:   4770        bx lr
  0x6fb0:   1e49        subs r1, r1, #1         ; r1 = r1 - 1
    6fb2:   2900        cmp r1, #0
    6fb4:   dcf4        bgt.n 0x6fa0
    6fb6:   f04f 30ff   mov.w r0, #4294967295   ; r0 = 0xffffffff
    6fba:   4770        bx lr

usb_get_intr_flags:
    ; Return (USBIER & USBISR)
  0x6fbc:   4802        ldr r0, [pc, #8]        ; r0 = (0x6fc8) USB Registers
    6fbe:   6841        ldr r1, [r0, #4]        ; r1 = [r0 + 4]
    6fc0:   6880        ldr r0, [r0, #8]        ; r0 = [r0 + 8]
    6fc2:   4008        ands r0, r1             ; r0 = r0 & r1
    6fc4:   4770        bx lr
    6fc6:   0000

  0x6fc8:   0x400a8000  ; USB Registers

jump_1:
  0x6fcc:   f000 b84a   b.w 0x7064              ; jump ptr_write_data

usb_set_lpmode_pdwn:
    ; Set USBCSR.LPMODE and USBCSR.PDWN
    ; Enter USB low-power mode
    ; Enter USB power-down mode
  0x6fd0:   4802        ldr r0, [pc, #8]        ; r0 = (0x6fdc)
    6fd2:   6801        ldr r1, [r0, #0]        ; r1 = [r0]
    6fd4:   f041 010c   orr.w r1, r1, #12       ; r1 = r1 | 0xc
    6fd8:   6001        str r1, [r0, #0]        ; [r0] = r1
    6fda:   4770        bx lr

  0x6fdc:   0x400a8000  ; USB Registers

usb_clear_csr:
    ; Clear USBCSR (control and status)
    ; Keep the value of USBCSR.DPPUEN
  0x6fe0:   4802        ldr r0, [pc, #8]        ; r0 = (0x6fec) USB Registers
    6fe2:   6801        ldr r1, [r0, #0]        ; r1 = [r0]
    6fe4:   f401 6180   and.w r1, r1, #1024     ; r1 = r1 & 0x400
    6fe8:   6001        str r1, [r0, #0]        ; [r0] = r1
    6fea:   4770        bx lr

  0x6fec:   0x400a8000  ; USB Registers

function_82:
  0x6ff0:   b510        push {r4, lr}
    6ff2:   4604        mov r4, r0
    6ff4:   4819        ldr r0, [pc, #100]      ; (0x705c)
    6ff6:   6802        ldr r2, [r0, #0]
    6ff8:   2a01        cmp r2, #1
    6ffa:   d12e        bne.n 0x705a
    6ffc:   2200        movs r2, #0
    6ffe:   6002        str r2, [r0, #0]
    7000:   4817        ldr r0, [pc, #92]       ; (0x7060)
    7002:   6802        ldr r2, [r0, #0]
    7004:   0653        lsls r3, r2, #25
    7006:   f04f 32ff   mov.w r2, #4294967295   ; 0xffffffff
    700a:   d50c        bpl.n 0x7026
    700c:   f240 430c   movw r3, #1036          ; 0x40c
    7010:   6003        str r3, [r0, #0]
    7012:   6082        str r2, [r0, #8]
    7014:   b911        cbnz r1, 0x701c
    7016:   2000        movs r0, #0
    7018:   f7fe ff4e   bl 0x5eb8               ; call function_3
    701c:   6820        ldr r0, [r4, #0]
    701e:   e8bd 4010   ldmia.w sp!, {r4, lr}
    7022:   f7ff bfb3   b.w 0x6f8c              ; call usb_enable_intr
    7026:   f640 430c   movw r3, #3084          ; 0xc0c
    702a:   6003        str r3, [r0, #0]
    702c:   6082        str r2, [r0, #8]
    702e:   b911        cbnz r1, 0x7036
    7030:   2000        movs r0, #0
    7032:   f7fe ff41   bl 0x5eb8               ; call function_3
    7036:   2000        movs r0, #0
    7038:   f7ff feac   bl 0x6d94               ; call spi_init
    703c:   6820        ldr r0, [r4, #0]
    703e:   f7ff ffa5   bl 0x6f8c               ; call usb_enable_intr
    7042:   2000        movs r0, #0
    7044:   f7ff feb4   bl 0x6db0               ; call usb_dp_pull_up
    7048:   2000        movs r0, #0
    704a:   1c40        adds r0, r0, #1
    704c:   28c8        cmp r0, #200            ; 0xc8
    704e:   d3fc        bcc.n 0x704a
    7050:   e8bd 4010   ldmia.w sp!, {r4, lr}
    7054:   2001        movs r0, #1
    7056:   f7ff beab   b.w 0x6db0              ; jump usb_dp_pull_up
    705a:   bd10        pop {r4, pc}

  0x705c:   0x2000022c  ; Stack position
  0x7060:   0x400a8000  ; USB Registers

ptr_write_data:
    ; r0 = pointer = 0x200002c4 (pointer_39)
  0x7064:   f241 711d   movw r1, #5917          ; r1 = 0x171d
    7068:   6001        str r1, [r0, #0]        ; [r0] = r1
    706a:   490a        ldr r1, [pc, #40]       ; r1 = (0x7094)
    706c:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1
    706e:   f240 2112   movw r1, #530           ; r1 = 0x212
    7072:   6081        str r1, [r0, #8]        ; [r0 + 8] = r1
    7074:   4908        ldr r1, [pc, #32]       ; r1 = (0x7098)
    7076:   60c1        str r1, [r0, #12]       ; [r0 + 0xc] = r1
    7078:   4a08        ldr r2, [pc, #32]       ; r2 = (0x709c)
    707a:   2110        movs r1, #16            ; r1 = 0x10
    707c:   e9c0 1204   strd r1, r2, [r0, #16]  ; [r0 + 0x10] = r1
                                                ; [r0 + 0x14] = r2
    7080:   6181        str r1, [r0, #24]       ; [r0 + 0x18] = r1
    7082:   4907        ldr r1, [pc, #28]       ; r1 = (0x70a0)
    7084:   61c1        str r1, [r0, #28]       ; [r0 + 0x1c] = r1
    7086:   2100        movs r1, #0             ; r1 = 0
    7088:   6201        str r1, [r0, #32]       ; [r0 + 0x20] = r1
    708a:   4906        ldr r1, [pc, #24]       ; r1 = (0x70a4)
    708c:   6241        str r1, [r0, #36]       ; [r0 + 0x24] = r1
    708e:   2102        movs r1, #2             ; r1 = 2
    7090:   6281        str r1, [r0, #40]       ; [r0 + 0x28] = r1
    7092:   4770        bx lr

  0x7094:   0x80010008
  0x7098:   0x91002088
  0x709c:   0x92010090
  0x70a0:   0x930100d0
  0x70a4:   0x84010110

usb_copy_ep_setup:
    ; Copy 8 bytes from USB SRAM to [r0]
  0x70a8:   4902        ldr r1, [pc, #8]        ; r1 = (0x70b4) USB SRAM
    70aa:   680a        ldr r2, [r1, #0]        ; r2 = [r1]
    70ac:   6002        str r2, [r0, #0]        ; [r0] = r2
    70ae:   6849        ldr r1, [r1, #4]        ; r1 = [r1 + 4]
    70b0:   6041        str r1, [r0, #4]        ; [r0 + 4] = r1
    70b2:   4770        bx lr

  0x70b4:   0x400aa000  ; USB SRAM

usb_set_genrsm:
    ; Set USBCSR.GENRSM
    ; Resume Request Generation Control
  0x70b8:   4802        ldr r0, [pc, #8]        ; r0 = (0x70c4) USB Registers
    70ba:   6801        ldr r1, [r0, #0]        ; r1 = [r0]
    70bc:   f041 0120   orr.w r1, r1, #32       ; r1 = r1 | 0x20
    70c0:   6001        str r1, [r0, #0]        ; [r0] = r1
    70c2:   4770        bx lr

  0x70c4:   0x400a8000  ; USB Registers

usb_set_addr:
    ; Set USBCSR.ADRSET
    ; Write r0 to USBDEVA
    ; r0 = usb device address
  0x70c8:   4903        ldr r1, [pc, #12]       ; r1 = (0x70d8) USB Registers
    70ca:   680a        ldr r2, [r1, #0]        ; r2 = [r1]
    70cc:   f442 7280   orr.w r2, r2, #256      ; r2 = r2 | 0x100
    70d0:   600a        str r2, [r1, #0]        ; [r1] = r2
    70d2:   6108        str r0, [r1, #16]       ; [r1 + 16] = r0
    70d4:   4770        bx lr
    70d6:   0000

  0x70d8:   0x400a8000  ; USB Registers

usb_intr:
  0x70dc:   4801        ldr r0, [pc, #4]        ; r0 = (0x70e4)
    70de:   f7ff bd08   b.w 0x6af2              ; jump usb_entry(pointer_3)
    70e2:   0000

  0x70e4:   0x20000234  ; pointer_3

watchdog_init:
    ; Set APBCCR1.WDTREN
    ; Enable watchdog timer register access
  0x70e8:   4913        ldr r1, [pc, #76]       ; r1 = (0x7138) CKCU Registers
    70ea:   4812        ldr r0, [pc, #72]       ; r0 = (0x7134)
    70ec:   6b0a        ldr r2, [r1, #48]       ; r2 = [r1 + 0x30]
    70ee:   f042 0210   orr.w r2, r2, #16       ; r2 = r2 | 0x10
    70f2:   630a        str r2, [r1, #48]       ; [r1 + 0x30] = r2

    ; Enable watchdog timer
    70f4:   4911        ldr r1, [pc, #68]       ; r1 = (0x713c) WDT Registers
    70f6:   684a        ldr r2, [r1, #4]        ; r2 = [r1 + 4] WDTMR0
    70f8:   f3c2 020b   ubfx r2, r2, #0, #12    ; r2 = r2 & 0xfff
    70fc:   f442 32d0   orr.w r2, r2, #106496   ; r2 = r2 | 0x1a000
    7100:   e003        b.n 0x710a              ; branch into loop

  0x7102:   604a        str r2, [r1, #4]        ; [r1 + 4] = r2
    7104:   684b        ldr r3, [r1, #4]        ; r3 = [r1 + 4]
    7106:   03db        lsls r3, r3, #15        ; r3 = r3 << 15
    7108:   d401        bmi.n 0x710e            ; exit loop if negative?
  0x710a:   1e40        subs r0, r0, #1         ; r0 = r0 - 1
    710c:   d2f9        bcs.n 0x7102            ; loop if r0 >= 0

    ; Set watchdog timer prescaler to 1/32
  0x710e:   6888        ldr r0, [r1, #8]        ; r0 = [r1 + 8] WDTMR1
    7110:   f3c0 000b   ubfx r0, r0, #0, #12    ; r0 = r0 & 0xfff
    7114:   f440 40a0   orr.w r0, r0, #20480    ; r0 = r0 | 0x5000
    7118:   6088        str r0, [r1, #8]        ; [r1 + 8] = r0

    ; Set watchdog timer to 2000
    711a:   6848        ldr r0, [r1, #4]        ; r0 = [r1 + 4]
    711c:   f400 30f8   and.w r0, r0, #126976   ; r0 = r0 & 0x1f000
    7120:   f440 60fa   orr.w r0, r0, #2000     ; r0 = r0 | 0x7d0
    7124:   6048        str r0, [r1, #4]        ; [r1 + 4] = r0

    ; Reload watchdog timer
    7126:   4806        ldr r0, [pc, #24]       ; r0 = (0x7140)
    7128:   6008        str r0, [r1, #0]        ; [r1] = r0

    ; Disable watchdog timer register protection
    712a:   f64c 2035   movw r0, #51765         ; r0 = 0xca35
    712e:   6108        str r0, [r1, #16]       ; [r1 + 0x10] = r0
    7130:   4770        bx lr
    7132:   0000

  0x7134:   0x6ddd00    ; 7,200,000
  0x7138:   0x40088000  ; CKCU Registers
  0x713c:   0x40068000  ; WDT Registers
  0x7140:   0x5fa00001  ; Watchdog timer reload lock and set

watchdog_reload_timer:
    ; Set WDTCR.WDTRS
    ; Reload Watchdog Timer
  0x7144:   4902        ldr r1, [pc, #8]    ; r1 = (0x7150)
    7146:   4801        ldr r0, [pc, #4]    ; r0 = (0x714c)
    7148:   6008        str r0, [r1, #0]    ; [r1] = r0
    714a:   4770        bx lr

  0x714c:   0x5fa00001  ; Watchdog timer reload lock and set
  0x7150:   0x40068000  ; WDT Registers

disconnect_cmd:
    ; Not supported in this firmware, only in builtin
  0x7154:   204f        movs r0, #79
    7156:   4770        bx lr                   ; return 0x4f

flash_crc_cmd:
  0x7158:   b510        push {r4, lr}
    715a:   f7fc f991   bl 0x3480               ; call crc16
    715e:   4604        mov r4, r0              ; r4 = r0
    7160:   4601        mov r1, r0              ; r1 = r0
    7162:   4804        ldr r0, [pc, #16]       ; r0 = (0x7174) Stack
    7164:   f7fc f93c   bl 0x33e0               ; call function_14
    7168:   0a21        lsrs r1, r4, #8         ; r1 = r4 << 8
    716a:   4802        ldr r0, [pc, #8]        ; r0 = (0x7174) Stack
    716c:   f7fc f938   bl 0x33e0               ; call function_14
    7170:   204f        movs r0, #79            ; r0 = 0x4f
    7172:   bd10        pop {r4, pc}

  0x7174:   0x20000358  ; Stack position

flash_erase_cmd:
  0x7178:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    717c:   4616        mov r6, r2              ; r6 = r2
    717e:   280a        cmp r0, #10
    7180:   d002        beq.n 0x7188            ; branch if r0 == 0xa
    7182:   f5b1 4f78   cmp.w r1, #63488        ; 0xf800
    7186:   d202        bcs.n 0x718e            ; branch if r1 >= 0xf800

  0x7188:   2046        movs r0, #70            ; r0 = 0x46
    ; return
  0x718a:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}

  0x718e:   2500        movs r5, #0             ; r5 = 0
    7190:   460c        mov r4, r1              ; r4 = r1
    7192:   271e        movs r7, #30            ; r7 = 0x1e
    7194:   e00c        b.n 0x71b0
  0x7196:   4620        mov r0, r4              ; r0 = r4
    7198:   f7fc f994   bl 0x34c4               ; call flash_page_erase
    719c:   fbb5 f0f7   udiv r0, r5, r7         ; r0 = r5 / r7
    71a0:   fb07 5010   mls r0, r7, r0, r5      ; r0 = r5 - (r7 * r0)
    71a4:   b908        cbnz r0, 0x71aa
    71a6:   f7ff ffcd   bl 0x7144               ; call watchdog_reload_timer
  0x71aa:   f504 6480   add.w r4, r4, #1024     ; r4 = r4 + 0x400
    71ae:   1c6d        adds r5, r5, #1         ; r5 = r5 + 1
  0x71b0:   42b4        cmp r4, r6
    71b2:   d9f0        bls.n 0x7196            ; branch if r4 <= r6
    71b4:   204f        movs r0, #79            ; r0 = 0x4f
    71b6:   e7e8        b.n 0x718a

flash_read_write_cmd:
    ; r0 = subcmd
    ; r1 = start address
    ; r2 = end address
    ; This function is called for each write packet
  0x71b8:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    71bc:   2600        movs r6, #0             ; r6 = 0
    71be:   4680        mov r8, r0              ; r8 = r0
    71c0:   460c        mov r4, r1              ; r4 = r1 target address
    71c2:   4691        mov r9, r2              ; r9 = r2
    71c4:   4f30        ldr r7, [pc, #192]      ; r7 = (0x7288) source address on stack at 0x200007d8
    71c6:   4635        mov r5, r6              ; r5 = r6
    71c8:   f8df b0c0   ldr.w fp, [pc, #192]    ; fp = (0x728c) USB SRAM
    71cc:   46b2        mov sl, r6              ; sl = r6
    71ce:   f7fc f983   bl 0x34d8               ; call flash_get_protection_status
    71d2:   07c0        lsls r0, r0, #31        ; r0 = r0 << 31
    71d4:   d101        bne.n 0x71da            ; branch if r0 had first bit set, which is now the top bit
    71d6:   f04f 0a01   mov.w sl, #1            ; sl = 1
  0x71da:   f1b8 0f01   cmp.w r8, #1
    71de:   d14e        bne.n 0x727e            ; branch if r8 != 1
    71e0:   f1ba 0f01   cmp.w sl, #1
    71e4:   d114        bne.n 0x7210            ; branch if sl != 1
    71e6:   eba9 0004   sub.w r0, r9, r4        ; r0 = r9 - r4
    71ea:   1c40        adds r0, r0, #1         ; r0 = r0 + 1
    71ec:   e003        b.n 0x71f6              ;
    71ee:   59a1        ldr r1, [r4, r6]        ; r1 = [r4 + r6]
    71f0:   1c49        adds r1, r1, #1         ; r1 = r1 + 4
    71f2:   d122        bne.n 0x723a            ; branch if ?
    71f4:   1d36        adds r6, r6, #4         ; r6 = r6 + 4
  0x71f6:   42b0        cmp r0, r6
    71f8:   d8f9        bhi.n 0x71ee            ; loop if r0 > r6
    71fa:   f1b8 0f01   cmp.w r8, #1
    71fe:   d007        beq.n 0x7210            ; branch if r8 == 1
    7200:   e03d        b.n 0x727e              ; branch to end?
  0x7202:   4621        mov r1, r4              ; r1 = r4       (target address)
    7204:   2004        movs r0, #4             ; r0 = 4        (flash cmd: word program)
    7206:   683a        ldr r2, [r7, #0]        ; r2 = [r7]     (data)
    7208:   f7fc f96c   bl 0x34e4               ; call flash_write(4, r4, [r7])
    720c:   1d24        adds r4, r4, #4         ; r4 = r4 + 4   (increment flash address)
    720e:   1d3f        adds r7, r7, #4         ; r7 = r7 + 4   (increment source address)
  0x7210:   454c        cmp r4, r9
    7212:   d9f6        bls.n 0x7202            ; loop if r4 < r9
    7214:   e033        b.n 0x727e              ; branch to end?

  0x7216:   481e        ldr r0, [pc, #120]      ; (0x7290)
    7218:   4284        cmp r4, r0
    721a:   d901        bls.n 0x7220
    721c:   2000        movs r0, #0
    721e:   e000        b.n 0x7222
  0x7220:   6820        ldr r0, [r4, #0]
  0x7222:   f1b8 0f00   cmp.w r8, #0
    7226:   d029        beq.n 0x727c
    7228:   f1b8 0f03   cmp.w r8, #3
    722c:   d003        beq.n 0x7236
    722e:   f1ba 0f01   cmp.w sl, #1
    7232:   d005        beq.n 0x7240
    7234:   e012        b.n 0x725c
    7236:   1c40        adds r0, r0, #1
    7238:   d020        beq.n 0x727c


  0x723a:   2046        movs r0, #70            ; r0 = 0x46
    ; return
  0x723c:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

    7240:   f5a4 5120   sub.w r1, r4, #10240    ; r1 = r4 - 0x2800
    7244:   f5b1 6f80   cmp.w r1, #1024         ; 0x400
    7248:   d308        bcc.n 0x725c            ; allow if r4 < 0x400
    724a:   f5b4 4f78   cmp.w r4, #63488        ; 0xf800
    724e:   d205        bcs.n 0x725c            ; allow if r4 > 0xf800
    7250:   4a10        ldr r2, [pc, #64]       ; r2 = (0x7294) [0x1fef0850]
    7252:   f5a4 4178   sub.w r1, r4, #63488    ; r1 = r4 - 0xf800
    7256:   4291        cmp r1, r2
    7258:   d300        bcc.n 0x725c            ; allow if r1 < r2
    725a:   0000        movs r0, r0             ; NOP
  0x725c:   f84b 0025   str.w r0, [fp, r5, lsl #2]

    7260:   1c6d        adds r5, r5, #1         ; r5 = r5 + 1
    7262:   2d10        cmp r5, #16
    7264:   d10a        bne.n 0x727c            ; branch if r1 != 16
    7266:   480c        ldr r0, [pc, #48]       ; r0 = (0x7298) [0x400a8000]
    7268:   2500        movs r5, #0             ; r5 = 0

    ; USBEP3ISR = 0x10
    726a:   2110        movs r1, #16
    726c:   6581        str r1, [r0, #88]       ; [r0 + 0x58] = r1
    ; USBEP3TCR = 64
    726e:   2140        movs r1, #64
    7270:   65c1        str r1, [r0, #92]       ; [r0 + 0x5c] = r1
    ; USBEP3CSR = 0x2
    7272:   2102        movs r1, #2
    7274:   6501        str r1, [r0, #80]       ; [r0 + 0x50] = r1

    ; r1 = USBEP33ISR
  0x7276:   6d81        ldr r1, [r0, #88]       ; r1 = [r0 + 0x58]
    7278:   06c9        lsls r1, r1, #27
    727a:   d5fc        bpl.n 0x7276

  0x727c:   1d24        adds r4, r4, #4         ; r4 = r4 + 4
  0x727e:   454c        cmp r4, r9
    7280:   d9c9        bls.n 0x7216            ; call
    7282:   204f        movs r0, #79            ; r0 = 0x4f
    7284:   e7da        b.n 0x723c              ; loop
    7286:   0000

  0x7288:   0x200007d8  ; Stack
  0x728c:   0x400aa0d0  ; USB SRAM
  0x7290:   0x1ff003fc  ; Option bytes
  0x7294:   0x1fef0850  ; ?
  0x7298:   0x400a8000  ; USB Registers

update_start_cmd:
  0x729c:   b510        push {r4, lr}
    729e:   2240        movs r2, #64   ; 0x40
    72a0:   4902        ldr r1, [pc, #8]   ; (0x72ac)
    72a2:   2003        movs r0, #3
    72a4:   f7ff fe4e   bl 0x6f44               ; call usb_copy_send
    72a8:   204f        movs r0, #79   ; 0x4f
    72aa:   bd10        pop {r4, pc}

  0x72ac:   0x200007bc

funtion_e_78:
  0x72b0:   b570        push {r4, r5, r6, lr}
    72b2:   4604        mov r4, r0
    72b4:   2000        movs r0, #0
    72b6:   f7ff fdc1   bl 0x6e3c               ; call usb_get_ep_len
    72ba:   4605        mov r5, r0
    72bc:   6a20        ldr r0, [r4, #32]
    72be:   1c41        adds r1, r0, #1
    72c0:   d016        beq.n 0x72f0
    72c2:   f894 1024   ldrb.w r1, [r4, #36]   ; 0x24
    72c6:   2901        cmp r1, #1
    72c8:   d112        bne.n 0x72f0
    72ca:   42a8        cmp r0, r5
    72cc:   d302        bcc.n 0x72d4
    72ce:   1b40        subs r0, r0, r5
    72d0:   6220        str r0, [r4, #32]
    72d2:   e005        b.n 0x72e0
    72d4:   4605        mov r5, r0
    72d6:   2000        movs r0, #0
    72d8:   6220        str r0, [r4, #32]
    72da:   2002        movs r0, #2
    72dc:   f884 0024   strb.w r0, [r4, #36]   ; 0x24
    72e0:   462a        mov r2, r5
    72e2:   2000        movs r0, #0
    72e4:   69e1        ldr r1, [r4, #28]
    72e6:   f7ff fe2d   bl 0x6f44               ; call usb_copy_send
    72ea:   69e0        ldr r0, [r4, #28]
    72ec:   4428        add r0, r5
    72ee:   61e0        str r0, [r4, #28]
    72f0:   bd70        pop {r4, r5, r6, pc}
    72f2:   b510        push {r4, lr}
    72f4:   4604        mov r4, r0
    72f6:   2000        movs r0, #0
    72f8:   7660        strb r0, [r4, #25]
    72fa:   b149        cbz r1, 0x7310
    72fc:   2901        cmp r1, #1
    72fe:   d009        beq.n 0x7314
    7300:   2902        cmp r1, #2
    7302:   d110        bne.n 0x7326
    7304:   88a0        ldrh r0, [r4, #4]
    7306:   f000 000f   and.w r0, r0, #15
    730a:   f7ff fd9e   bl 0x6e4a               ; call function_e_67
    730e:   e001        b.n 0x7314
    7310:   f894 0034   ldrb.w r0, [r4, #52]   ; 0x34
    7314:   7620        strb r0, [r4, #24]
    7316:   f104 0018   add.w r0, r4, #24
    731a:   61e0        str r0, [r4, #28]
    731c:   2002        movs r0, #2
    731e:   6220        str r0, [r4, #32]
    7320:   2001        movs r0, #1
    7322:   f884 0024   strb.w r0, [r4, #36]   ; 0x24
    7326:   bd10        pop {r4, pc}

function_e_79:
  0x7328:   b570        push {r4, r5, r6, lr}
    732a:   4604        mov r4, r0              ; r4 = r0
    732c:   8800        ldrh r0, [r0, #0]
    732e:   2501        movs r5, #1
    7330:   f5b0 6fa0   cmp.w r0, #1280   ; 0x500
    7334:   d04d        beq.n 0x73d2
    7336:   dc20        bgt.n 0x737a
    7338:   f5b0 7f80   cmp.w r0, #256   ; 0x100
    733c:   d042        beq.n 0x73c4
    733e:   dc0b        bgt.n 0x7358
    7340:   2880        cmp r0, #128   ; 0x80
    7342:   d03b        beq.n 0x73bc
    7344:   2881        cmp r0, #129   ; 0x81
    7346:   d03b        beq.n 0x73c0
    7348:   2882        cmp r0, #130   ; 0x82
    734a:   d164        bne.n 0x7416
    734c:   2102        movs r1, #2
    734e:   4620        mov r0, r4
    7350:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    7354:   f7ff bfcd   b.w 0x72f2
    7358:   f5b0 7f81   cmp.w r0, #258   ; 0x102
    735c:   d034        beq.n 0x73c8
    735e:   f5b0 7f40   cmp.w r0, #768   ; 0x300
    7362:   d033        beq.n 0x73cc
    7364:   f5a0 7040   sub.w r0, r0, #768   ; 0x300
    7368:   3802        subs r0, #2
    736a:   d154        bne.n 0x7416
    736c:   2201        movs r2, #1
    736e:   2102        movs r1, #2
    7370:   4620        mov r0, r4
    7372:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    7376:   f000 b865   b.w 0x7444              ; call function_e_80
    737a:   f5b0 6f10   cmp.w r0, #2304   ; 0x900
    737e:   d04d        beq.n 0x741c
    7380:   dc0f        bgt.n 0x73a2
    7382:   f5b0 6fd0   cmp.w r0, #1664   ; 0x680
    7386:   d02b        beq.n 0x73e0
    7388:   f5a0 60c0   sub.w r0, r0, #1536   ; 0x600
    738c:   3881        subs r0, #129   ; 0x81
    738e:   d043        beq.n 0x7418
    7390:   f5a0 7080   sub.w r0, r0, #256   ; 0x100
    7394:   38ff        subs r0, #255   ; 0xff
    7396:   d13e        bne.n 0x7416
    7398:   f104 0030   add.w r0, r4, #48   ; 0x30
    739c:   e9c4 0507   strd r0, r5, [r4, #28]
    73a0:   e037        b.n 0x7412
    73a2:   f5a0 6020   sub.w r0, r0, #2560   ; 0xa00
    73a6:   3881        subs r0, #129   ; 0x81
    73a8:   d04a        beq.n 0x7440
    73aa:   2880        cmp r0, #128   ; 0x80
    73ac:   d133        bne.n 0x7416
    73ae:   6da1        ldr r1, [r4, #88]   ; 0x58
    73b0:   2900        cmp r1, #0
    73b2:   d030        beq.n 0x7416
    73b4:   4620        mov r0, r4
    73b6:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}
    73ba:   4708        bx r1
    73bc:   2100        movs r1, #0
    73be:   e7c6        b.n 0x734e
    73c0:   2101        movs r1, #1
    73c2:   e7c4        b.n 0x734e
    73c4:   2200        movs r2, #0
    73c6:   e002        b.n 0x73ce
    73c8:   2200        movs r2, #0
    73ca:   e7d0        b.n 0x736e
    73cc:   2201        movs r2, #1
    73ce:   2100        movs r1, #0
    73d0:   e7ce        b.n 0x7370
  0x73d2:   78a0        ldrb r0, [r4, #2]       ; r0 = [r4 + 2]
    73d4:   f7ff fe78   bl 0x70c8               ; call usb_set_addr
    73d8:   f884 5024   strb.w r5, [r4, #36]    ; 0x24
    73dc:   2005        movs r0, #5
    73de:   e02c        b.n 0x743a
    73e0:   78e0        ldrb r0, [r4, #3]
    73e2:   2801        cmp r0, #1
    73e4:   d00f        beq.n 0x7406
    73e6:   2802        cmp r0, #2
    73e8:   d00f        beq.n 0x740a
    73ea:   2803        cmp r0, #3
    73ec:   d113        bne.n 0x7416
    73ee:   78a0        ldrb r0, [r4, #2]
    73f0:   6961        ldr r1, [r4, #20]
    73f2:   4281        cmp r1, r0
    73f4:   d90f        bls.n 0x7416
    73f6:   6921        ldr r1, [r4, #16]
    73f8:   f851 0020   ldr.w r0, [r1, r0, lsl #2]
    73fc:   2800        cmp r0, #0
    73fe:   d00a        beq.n 0x7416
    7400:   61e0        str r0, [r4, #28]
    7402:   7800        ldrb r0, [r0, #0]
    7404:   e004        b.n 0x7410
    7406:   68a0        ldr r0, [r4, #8]
    7408:   e7fa        b.n 0x7400
    740a:   68e0        ldr r0, [r4, #12]
    740c:   61e0        str r0, [r4, #28]
    740e:   8840        ldrh r0, [r0, #2]
    7410:   6220        str r0, [r4, #32]
    7412:   f884 5024   strb.w r5, [r4, #36]   ; 0x24
    7416:   bd70        pop {r4, r5, r6, pc}
    7418:   6d61        ldr r1, [r4, #84]   ; 0x54
    741a:   e7c9        b.n 0x73b0
    741c:   78a0        ldrb r0, [r4, #2]
    741e:   f884 0030   strb.w r0, [r4, #48]   ; 0x30
    7422:   f884 5024   strb.w r5, [r4, #36]   ; 0x24
    7426:   2501        movs r5, #1
    7428:   b268        sxtb r0, r5
    742a:   f8d4 1084   ldr.w r1, [r4, #132]   ; 0x84
    742e:   f7ff fd29   bl 0x6e84               ; call function_e_70
    7432:   1c6d        adds r5, r5, #1
    7434:   2d08        cmp r5, #8
    7436:   d3f7        bcc.n 0x7428
    7438:   2006        movs r0, #6
    743a:   f884 0032   strb.w r0, [r4, #50]   ; 0x32
    743e:   bd70        pop {r4, r5, r6, pc}
    7440:   6de1        ldr r1, [r4, #92]   ; 0x5c
    7442:   e7b5        b.n 0x73b0

function_e_80:
  0x7444:   b570        push {r4, r5, r6, lr}
    7446:   4604        mov r4, r0
    7448:   2601        movs r6, #1
    744a:   b161        cbz r1, 0x7466
    744c:   2902        cmp r1, #2
    744e:   d109        bne.n 0x7464
    7450:   88a0        ldrh r0, [r4, #4]
    7452:   f010 050f   ands.w r5, r0, #15
    7456:   d003        beq.n 0x7460
    7458:   b182        cbz r2, 0x747c
    745a:   4628        mov r0, r5
    745c:   f7ff fd68   bl 0x6f30               ; call function_e_73
    7460:   f884 6024   strb.w r6, [r4, #36]   ; 0x24
    7464:   bd70        pop {r4, r5, r6, pc}
    7466:   78a0        ldrb r0, [r4, #2]
    7468:   2801        cmp r0, #1
    746a:   d1fb        bne.n 0x7464
    746c:   f104 0424   add.w r4, r4, #36   ; 0x24
    7470:   7c20        ldrb r0, [r4, #16]
    7472:   f362 0041   bfi r0, r2, #1, #1
    7476:   7420        strb r0, [r4, #16]
    7478:   7026        strb r6, [r4, #0]
    747a:   bd70        pop {r4, r5, r6, pc}
    747c:   6ba0        ldr r0, [r4, #56]   ; 0x38
    747e:   2800        cmp r0, #0
    7480:   d1ee        bne.n 0x7460
    7482:   4628        mov r0, r5
    7484:   f7ff fcae   bl 0x6de4               ; call usb_ep_stall
    7488:   b268        sxtb r0, r5
    748a:   f7ff fca3   bl 0x6dd4               ; call usb_ep_data_toggle
    748e:   e7e7        b.n 0x7460

word_copy:
  0x7490:   1e52        subs r2, r2, #1
    7492:   d404        bmi.n 0x749e
    7494:   f850 3022   ldr.w r3, [r0, r2, lsl #2]
    7498:   f841 3022   str.w r3, [r1, r2, lsl #2]
    749c:   e7f8        b.n 0x7490
    749e:   4770        bx lr

usb_get_ep_reg:
    ; r0 = ep #
  0x74a0:   4902        ldr r1, [pc, #8]            ; r1 = (0x74ac)
    74a2:   eb00 0080   add.w r0, r0, r0, lsl #2
    74a6:   eb01 0080   add.w r0, r1, r0, lsl #2    ; r0 = r1 + (r0 * 0x14)
    74aa:   4770        bx lr

  0x74ac:   0x400a8014  ; USB ep0 control reg

function_e_81:
  0x74b0:   e002        b.n 0x74b8
    74b2:   c808        ldmia r0!, {r3}
    74b4:   1f12        subs r2, r2, #4
    74b6:   c108        stmia r1!, {r3}
    74b8:   2a00        cmp r2, #0
    74ba:   d1fa        bne.n 0x74b2
    74bc:   4770        bx lr

  0x74be:   4770        bx lr

sram_stack_zero:
    ; r0 = 0x90d4 (discarded?)
    ; r1 = 0x20000234 (pointer_3)
    ; r2 = 0x352c
    ; Zeroes 0x352c bytes of SRAM from 0x20000234 to 0x20003760
    ; The stack starts at 0x20003760, so this zeroes the stack
  0x74c0:   2000        movs r0, #0             ; r0 = 0
    74c2:   e001        b.n 0x74c8              ; branch
  0x74c4:   c101        stmia r1!, {r0}         ; push r0 = 0 to address r1 and increment r1
    74c6:   1f12        subs r2, r2, #4         ; r2 = r2 - 4
    74c8:   2a00        cmp r2, #0
    74ca:   d1fb        bne.n 0x74c4            ; loop if r2 != 0
    74cc:   4770        bx lr
    74ce:   0000

function_e_82:
  0x74d0:   e92d 4ffe   stmdb sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74d4:   f8df 928c   ldr.w r9, [pc, #652]        ; 0x7764
    74d8:   4690        mov r8, r2
    74da:   4604        mov r4, r0
    74dc:   460d        mov r5, r1
    74de:   464e        mov r6, r9
    74e0:   f899 2002   ldrb.w r2, [r9, #2]
    74e4:   f000 fb34   bl 0x7b50
    74e8:   f886 0024   strb.w r0, [r6, #36]        ; 0x24
    74ec:   eb05 06c4   add.w r6, r5, r4, lsl #3
    74f0:   2e10        cmp r6, #16
    74f2:   d106        bne.n 0x7502
    74f4:   f899 101f   ldrb.w r1, [r9, #31]
    74f8:   2901        cmp r1, #1
    74fa:   d102        bne.n 0x7502
    74fc:   21ff        movs r1, #255   ; 0xff
    74fe:   f889 1024   strb.w r1, [r9, #36]        ; 0x24
    7502:   489a        ldr r0, [pc, #616]          ; r0 = (0x776c)
    7504:   2701        movs r7, #1                 ; r7 = 1
    7506:   eb00 00c4   add.w r0, r0, r4, lsl #3    ; r0 = r0 + r4 << 3
    750a:   9000        str r0, [sp, #0]
    750c:   4898        ldr r0, [pc, #608]          ; r0 = (0x7770)
    750e:   f8df b258   ldr.w fp, [pc, #600]        ; fp = (0x7768)
    7512:   eb00 00c4   add.w r0, r0, r4, lsl #3
    7516:   9001        str r0, [sp, #4]
    7518:   4896        ldr r0, [pc, #600]   ; (0x7774)
    751a:   40af        lsls r7, r5
    751c:   eb00 00c4   add.w r0, r0, r4, lsl #3
    7520:   f04f 0a00   mov.w sl, #0
    7524:   9002        str r0, [sp, #8]
    7526:   f1b8 0f00   cmp.w r8, #0
    752a:   d07d        beq.n 0x7628
    752c:   f899 001b   ldrb.w r0, [r9, #27]
    7530:   46c8        mov r8, r9
    7532:   2801        cmp r0, #1
    7534:   d003        beq.n 0x753e
    7536:   f898 001c   ldrb.w r0, [r8, #28]
    753a:   2803        cmp r0, #3
    753c:   d105        bne.n 0x754a
    753e:   f000 f93b   bl 0x77b8                   ; call function_e_84
    7542:   f888 a01b   strb.w sl, [r8, #27]
    7546:   f888 a01c   strb.w sl, [r8, #28]
    754a:   f898 0002   ldrb.w r0, [r8, #2]
    754e:   f44f 7280   mov.w r2, #256   ; 0x100
    7552:   b168        cbz r0, 0x7570
    7554:   f8df 9220   ldr.w r9, [pc, #544]   ; 0x7778
    7558:   f819 1004   ldrb.w r1, [r9, r4]
    755c:   4339        orrs r1, r7
    755e:   f809 1004   strb.w r1, [r9, r4]
    7562:   f898 0024   ldrb.w r0, [r8, #36]   ; 0x24
    7566:   2803        cmp r0, #3
    7568:   d03f        beq.n 0x75ea
    756a:   2813        cmp r0, #19
    756c:   d076        beq.n 0x765c
    756e:   e05a        b.n 0x7626
    7570:   f898 0024   ldrb.w r0, [r8, #36]   ; 0x24
    7574:   4647        mov r7, r8
    7576:   2802        cmp r0, #2
    7578:   d002        beq.n 0x7580
    757a:   2812        cmp r0, #18
    757c:   d018        beq.n 0x75b0
    757e:   e058        b.n 0x7632
    7580:   f107 0718   add.w r7, r7, #24
    7584:   7bb8        ldrb r0, [r7, #14]
    7586:   eb00 0140   add.w r1, r0, r0, lsl #1
    758a:   eb0b 1001   add.w r0, fp, r1, lsl #4
    758e:   7839        ldrb r1, [r7, #0]
    7590:   eb00 1001   add.w r0, r0, r1, lsl #4
    7594:   f850 0c08   ldr.w r0, [r0, #-8]
    7598:   f887 a01a   strb.w sl, [r7, #26]
    759c:   eb00 2106   add.w r1, r0, r6, lsl #8
    75a0:   f04f 0001   mov.w r0, #1
    75a4:   70f8        strb r0, [r7, #3]
    75a6:   7138        strb r0, [r7, #4]
    75a8:   f8a7 a02a   strh.w sl, [r7, #42]   ; 0x2a
    75ac:   77bc        strb r4, [r7, #30]
    75ae:   e035        b.n 0x761c
    75b0:   f107 0718   add.w r7, r7, #24
    75b4:   f04f 0202   mov.w r2, #2
    75b8:   7bb8        ldrb r0, [r7, #14]
    75ba:   eb00 0140   add.w r1, r0, r0, lsl #1
    75be:   eb0b 1001   add.w r0, fp, r1, lsl #4
    75c2:   7839        ldrb r1, [r7, #0]
    75c4:   eb00 1001   add.w r0, r0, r1, lsl #4
    75c8:   f850 0c08   ldr.w r0, [r0, #-8]
    75cc:   eb00 2106   add.w r1, r0, r6, lsl #8
    75d0:   486a        ldr r0, [pc, #424]          ; (0x777c)
    75d2:   f7fd fcf9   bl 0x4fc8                   ; call spi_flash_read_data
    75d6:   4869        ldr r0, [pc, #420]          ; (0x777c)
    75d8:   7844        ldrb r4, [r0, #1]
    75da:   4620        mov r0, r4
    75dc:   f000 fa4e   bl 0x7a7c                   ; call function_e_89
    75e0:   2001        movs r0, #1
    75e2:   72f8        strb r0, [r7, #11]
    75e4:   4620        mov r0, r4
    75e6:   e8bd 8ffe   ldmia.w sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75ea:   f898 0026   ldrb.w r0, [r8, #38]   ; 0x26
    75ee:   eb00 0140   add.w r1, r0, r0, lsl #1
    75f2:   eb0b 1001   add.w r0, fp, r1, lsl #4
    75f6:   f898 1018   ldrb.w r1, [r8, #24]
    75fa:   eb00 1001   add.w r0, r0, r1, lsl #4
    75fe:   f850 0c04   ldr.w r0, [r0, #-4]
    7602:   f888 a032   strb.w sl, [r8, #50]   ; 0x32
    7606:   eb00 2106   add.w r1, r0, r6, lsl #8
    760a:   2001        movs r0, #1
    760c:   f888 001b   strb.w r0, [r8, #27]
    7610:   f888 001c   strb.w r0, [r8, #28]
    7614:   f8a8 a042   strh.w sl, [r8, #66]    ; 0x42
    7618:   f888 4036   strb.w r4, [r8, #54]    ; 0x36
    761c:   f888 5037   strb.w r5, [r8, #55]    ; 0x37
    7620:   4856        ldr r0, [pc, #344]      ; r0 = (0x777c)
    7622:   f7fd fcd1   bl 0x4fc8               ; call spi_flash_read_data
    7626:   e000        b.n 0x762a
    7628:   e03d        b.n 0x76a6
  0x762a:   f898 0024   ldrb.w r0, [r8, #36]   ; 0x24
    762e:   2802        cmp r0, #2
    7630:   d064        beq.n 0x76fc
    7632:   f898 0024   ldrb.w r0, [r8, #36]   ; 0x24
    7636:   4641        mov r1, r8
    7638:   2803        cmp r0, #3
    763a:   d05f        beq.n 0x76fc
    763c:   280c        cmp r0, #12
    763e:   d05d        beq.n 0x76fc
    7640:   280d        cmp r0, #13
    7642:   d05b        beq.n 0x76fc
    7644:   f891 0026   ldrb.w r0, [r1, #38]   ; 0x26
    7648:   2801        cmp r0, #1
    764a:   d028        beq.n 0x769e
    764c:   2802        cmp r0, #2
    764e:   d028        beq.n 0x76a2
    7650:   9802        ldr r0, [sp, #8]
    7652:   5d40        ldrb r0, [r0, r5]
    7654:   f888 a023   strb.w sl, [r8, #35]   ; 0x23
    7658:   e7c5        b.n 0x75e6
    765a:   e7ff        b.n 0x765c
    765c:   f898 0026   ldrb.w r0, [r8, #38]   ; 0x26
    7660:   2202        movs r2, #2
    7662:   eb00 0140   add.w r1, r0, r0, lsl #1
    7666:   eb0b 1001   add.w r0, fp, r1, lsl #4
    766a:   f898 1018   ldrb.w r1, [r8, #24]
    766e:   eb00 1001   add.w r0, r0, r1, lsl #4
    7672:   f850 0c04   ldr.w r0, [r0, #-4]
    7676:   eb00 2106   add.w r1, r0, r6, lsl #8
    767a:   4840        ldr r0, [pc, #256]          ; r0 = (0x777c)
    767c:   f7fd fca4   bl 0x4fc8                   ; call spi_flash_read_data
    7680:   483e        ldr r0, [pc, #248]          ; r0 = (0x777c)
    7682:   7845        ldrb r5, [r0, #1]
    7684:   4628        mov r0, r5
    7686:   f000 f9f9   bl 0x7a7c                   ; call function_e_89
    768a:   f819 0004   ldrb.w r0, [r9, r4]
    768e:   2101        movs r1, #1
    7690:   4338        orrs r0, r7
    7692:   f809 0004   strb.w r0, [r9, r4]
    7696:   f888 1023   strb.w r1, [r8, #35]   ; 0x23
    769a:   4628        mov r0, r5
    769c:   e7a3        b.n 0x75e6
    769e:   9800        ldr r0, [sp, #0]
    76a0:   e7d7        b.n 0x7652
    76a2:   9801        ldr r0, [sp, #4]
    76a4:   e7d5        b.n 0x7652
  0x76a6:   4934        ldr r1, [pc, #208]   ; (0x7778)
    76a8:   f04f 0801   mov.w r8, #1
    76ac:   5d08        ldrb r0, [r1, r4]
    76ae:   4238        tst r0, r7
    76b0:   d032        beq.n 0x7718
    76b2:   43b8        bics r0, r7
    76b4:   5508        strb r0, [r1, r4]
    76b6:   2201        movs r2, #1
    76b8:   4629        mov r1, r5
    76ba:   4620        mov r0, r4
    76bc:   f000 fa48   bl 0x7b50
    76c0:   464c        mov r4, r9
    76c2:   f889 0024   strb.w r0, [r9, #36]    ; [r9 + 0x24] = r0
    76c6:   2803        cmp r0, #3
    76c8:   d013        beq.n 0x76f2            ; branch if r0 == 3
    76ca:   2813        cmp r0, #19
    76cc:   d018        beq.n 0x7700            ; branch if r0 == 0x13
    76ce:   2802        cmp r0, #2
    76d0:   d014        beq.n 0x76fc            ; branch if r0 == 2
    76d2:   b2c0        uxtb r0, r0             ; r0 = r0
    76d4:   2803        cmp r0, #3
    76d6:   d011        beq.n 0x76fc            ; branch if r0 == 3
    76d8:   280c        cmp r0, #12
    76da:   d00f        beq.n 0x76fc            ; branch if r0 == 0xc
    76dc:   280d        cmp r0, #13
    76de:   d00d        beq.n 0x76fc            ; branch if r0 == 0xd
    76e0:   f894 0026   ldrb.w r0, [r4, #38]   ; 0x26
    76e4:   2801        cmp r0, #1
    76e6:   d039        beq.n 0x775c
    76e8:   2802        cmp r0, #2
    76ea:   d039        beq.n 0x7760
    76ec:   9802        ldr r0, [sp, #8]
    76ee:   5d40        ldrb r0, [r0, r5]
    76f0:   e779        b.n 0x75e6
    76f2:   f884 a01b   strb.w sl, [r4, #27]
    76f6:   2003        movs r0, #3
    76f8:   f889 001c   strb.w r0, [r9, #28]
  0x76fc:   2000        movs r0, #0
    76fe:   e772        b.n 0x75e6
  0x7700:   f894 0026   ldrb.w r0, [r4, #38]   ; 0x26
    7704:   eb00 0140   add.w r1, r0, r0, lsl #1
    7708:   eb0b 1001   add.w r0, fp, r1, lsl #4
    770c:   7e21        ldrb r1, [r4, #24]
    770e:   eb00 1001   add.w r0, r0, r1, lsl #4
    7712:   f850 0c04   ldr.w r0, [r0, #-4]
    7716:   e016        b.n 0x7746
    7718:   2200        movs r2, #0
    771a:   4629        mov r1, r5
    771c:   4620        mov r0, r4
    771e:   f000 fa17   bl 0x7b50
    7722:   464c        mov r4, r9
    7724:   f889 0024   strb.w r0, [r9, #36]   ; 0x24
    7728:   2802        cmp r0, #2
    772a:   d0e2        beq.n 0x76f2
    772c:   2812        cmp r0, #18
    772e:   d1d0        bne.n 0x76d2
    7730:   f894 0026   ldrb.w r0, [r4, #38]   ; 0x26
    7734:   eb00 0140   add.w r1, r0, r0, lsl #1
    7738:   eb0b 1001   add.w r0, fp, r1, lsl #4
    773c:   7e21        ldrb r1, [r4, #24]
    773e:   eb00 1001   add.w r0, r0, r1, lsl #4
    7742:   f850 0c08   ldr.w r0, [r0, #-8]
    7746:   2202        movs r2, #2
    7748:   eb00 2106   add.w r1, r0, r6, lsl #8
    774c:   480b        ldr r0, [pc, #44]           ; r0 = (0x777c)
    774e:   f7fd fc3b   bl 0x4fc8                   ; call spi_flash_read_data
    7752:   480a        ldr r0, [pc, #40]           ; r0 = (0x777c)
    7754:   7840        ldrb r0, [r0, #1]
    7756:   f884 8023   strb.w r8, [r4, #35]   ; 0x23
    775a:   e744        b.n 0x75e6
    775c:   9800        ldr r0, [sp, #0]
    775e:   e7c6        b.n 0x76ee
    7760:   9801        ldr r0, [sp, #4]
    7762:   e7c4        b.n 0x76ee

  0x7764:   0x20000058  ; variable_sram_e_1
  0x7768:   0x8d50      ; data_16
  0x776c:   0x8f10      ; data_5
  0x7770:   0x8f58      ; data_6
  0x7774:   0x8ec8      ; data_7
  0x7778:   0x20000915
  0x777c:   0x2000080c

function_e_83:
  0x7780:   b500        push {lr}
    7782:   f000 f819   bl 0x77b8                   ; call function_e_84
    7786:   2000        movs r0, #0
    7788:   4a08        ldr r2, [pc, #32]   ; (0x77ac)
    778a:   4601        mov r1, r0
    778c:   5411        strb r1, [r2, r0]
    778e:   1c40        adds r0, r0, #1
    7790:   b2c0        uxtb r0, r0
    7792:   2809        cmp r0, #9
    7794:   d3fa        bcc.n 0x778c
    7796:   4a06        ldr r2, [pc, #24]   ; (0x77b0)
    7798:   2000        movs r0, #0
    779a:   5411        strb r1, [r2, r0]
    779c:   1c40        adds r0, r0, #1
    779e:   b2c0        uxtb r0, r0
    77a0:   2809        cmp r0, #9
    77a2:   d3fa        bcc.n 0x779a
    77a4:   4803        ldr r0, [pc, #12]   ; (0x77b4)
    77a6:   7081        strb r1, [r0, #2]
    77a8:   bd00        pop {pc}

    77aa:   0000
  0x77ac:   0x20002cba
  0x77b0:   0x20000915
  0x77b4:   0x20000058  ; variable_sram_e_1

function_e_84:
  0x77b8:   b570        push {r4, r5, r6, lr}
    77ba:   4b1d        ldr r3, [pc, #116]   ; (0x7830)
    77bc:   2200        movs r2, #0
    77be:   491d        ldr r1, [pc, #116]   ; (0x7834)
    77c0:   f883 202b   strb.w r2, [r3, #43]   ; 0x2b
    77c4:   4610        mov r0, r2
    77c6:   700a        strb r2, [r1, #0]
    77c8:   180c        adds r4, r1, r0
    77ca:   1c40        adds r0, r0, #1
    77cc:   b2c0        uxtb r0, r0
    77ce:   70a2        strb r2, [r4, #2]
    77d0:   2806        cmp r0, #6
    77d2:   d3f9        bcc.n 0x77c8
    77d4:   4c16        ldr r4, [pc, #88]   ; (0x7830)
    77d6:   2101        movs r1, #1
    77d8:   3480        adds r4, #128   ; 0x80
    77da:   4d17        ldr r5, [pc, #92]   ; (0x7838)
    77dc:   2000        movs r0, #0
    77de:   6121        str r1, [r4, #16]
    77e0:   182e        adds r6, r5, r0
    77e2:   1c40        adds r0, r0, #1
    77e4:   b2c0        uxtb r0, r0
    77e6:   70b2        strb r2, [r6, #2]
    77e8:   281e        cmp r0, #30
    77ea:   d3f9        bcc.n 0x77e0
    77ec:   70da        strb r2, [r3, #3]
    77ee:   2002        movs r0, #2
    77f0:   7258        strb r0, [r3, #9]
    77f2:   4812        ldr r0, [pc, #72]   ; (0x783c)
    77f4:   6161        str r1, [r4, #20]
    77f6:   7082        strb r2, [r0, #2]
    77f8:   70c2        strb r2, [r0, #3]
    77fa:   7102        strb r2, [r0, #4]
    77fc:   7842        ldrb r2, [r0, #1]
    77fe:   f022 0203   bic.w r2, r2, #3
    7802:   7042        strb r2, [r0, #1]
    7804:   4a0e        ldr r2, [pc, #56]   ; (0x7840)
    7806:   6221        str r1, [r4, #32]
    7808:   7850        ldrb r0, [r2, #1]
    780a:   f020 0007   bic.w r0, r0, #7
    780e:   7050        strb r0, [r2, #1]
    7810:   480c        ldr r0, [pc, #48]   ; (0x7844)
    7812:   61e1        str r1, [r4, #28]
    7814:   7842        ldrb r2, [r0, #1]
    7816:   f022 02ff   bic.w r2, r2, #255   ; 0xff
    781a:   7042        strb r2, [r0, #1]
    781c:   7882        ldrb r2, [r0, #2]
    781e:   f022 02ff   bic.w r2, r2, #255   ; 0xff
    7822:   7082        strb r2, [r0, #2]
    7824:   78c2        ldrb r2, [r0, #3]
    7826:   f022 0203   bic.w r2, r2, #3
    782a:   70c2        strb r2, [r0, #3]
    782c:   61a1        str r1, [r4, #24]
    782e:   bd70        pop {r4, r5, r6, pc}

  0x7830:   0x20000058  ; variable_sram_e_1
  0x7834:   0x2000003c  ; pointer_33
  0x7838:   0x2000032c  ; pointer_32
  0x783c:   0x20000034
  0x7840:   0x20000018
  0x7844:   0x2000002c

function_e_85:
  0x7848:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    784c:   2601        movs r6, #1
    784e:   2700        movs r7, #0
    7850:   4d2e        ldr r5, [pc, #184]   ; (0x790c)
    7852:   28cb        cmp r0, #203   ; 0xcb
    7854:   d006        beq.n 0x7864
    7856:   28cc        cmp r0, #204   ; 0xcc
    7858:   d009        beq.n 0x786e
    785a:   28cd        cmp r0, #205   ; 0xcd
    785c:   d00c        beq.n 0x7878
    785e:   28ce        cmp r0, #206   ; 0xce
    7860:   d00f        beq.n 0x7882
    7862:   e014        b.n 0x788e
    7864:   b109        cbz r1, 0x786a
    7866:   776e        strb r6, [r5, #29]
    7868:   e011        b.n 0x788e
    786a:   776f        strb r7, [r5, #29]
    786c:   e00f        b.n 0x788e
    786e:   b109        cbz r1, 0x7874
    7870:   77ae        strb r6, [r5, #30]
    7872:   e00c        b.n 0x788e
    7874:   77af        strb r7, [r5, #30]
    7876:   e00a        b.n 0x788e
    7878:   b109        cbz r1, 0x787e
    787a:   77ee        strb r6, [r5, #31]
    787c:   e007        b.n 0x788e
    787e:   77ef        strb r7, [r5, #31]
    7880:   e005        b.n 0x788e
    7882:   b111        cbz r1, 0x788a
    7884:   f885 6020   strb.w r6, [r5, #32]
    7888:   e001        b.n 0x788e
    788a:   f885 7020   strb.w r7, [r5, #32]
    788e:   f895 0030   ldrb.w r0, [r5, #48]   ; 0x30
    7892:   2800        cmp r0, #0
    7894:   d119        bne.n 0x78ca
    7896:   7f69        ldrb r1, [r5, #29]
    7898:   7fa8        ldrb r0, [r5, #30]
    789a:   ea51 0200   orrs.w r2, r1, r0
    789e:   d002        beq.n 0x78a6
    78a0:   2901        cmp r1, #1
    78a2:   d002        beq.n 0x78aa
    78a4:   e004        b.n 0x78b0
    78a6:   2400        movs r4, #0
    78a8:   e003        b.n 0x78b2
    78aa:   b180        cbz r0, 0x78ce
    78ac:   2801        cmp r0, #1
    78ae:   d010        beq.n 0x78d2
    78b0:   2403        movs r4, #3
    78b2:   f895 0026   ldrb.w r0, [r5, #38]   ; 0x26
    78b6:   4284        cmp r4, r0
    78b8:   d007        beq.n 0x78ca
    78ba:   f885 4027   strb.w r4, [r5, #39]   ; 0x27
    78be:   f000 fffd   bl 0x88bc
    78c2:   2801        cmp r0, #1
    78c4:   d007        beq.n 0x78d6
    78c6:   f885 6028   strb.w r6, [r5, #40]   ; 0x28
    78ca:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    78ce:   2401        movs r4, #1
    78d0:   e7ef        b.n 0x78b2
    78d2:   2402        movs r4, #2
    78d4:   e7ed        b.n 0x78b2
    78d6:   f105 0518   add.w r5, r5, #24
    78da:   480d        ldr r0, [pc, #52]   ; (0x7910)
    78dc:   73ac        strb r4, [r5, #14]
    78de:   f44f 627f   mov.w r2, #4080             ; 0xff0
    78e2:   f850 1024   ldr.w r1, [r0, r4, lsl #2]
    78e6:   480b        ldr r0, [pc, #44]           ; (0x7914)
    78e8:   f501 617f   add.w r1, r1, #4080         ; 0xff0
    78ec:   f7fd fb6c   bl 0x4fc8                   ; call spi_flash_read_data
    78f0:   4808        ldr r0, [pc, #32]           ; (0x7914)
    78f2:   7800        ldrb r0, [r0, #0]
    78f4:   7028        strb r0, [r5, #0]
    78f6:   7ba8        ldrb r0, [r5, #14]
    78f8:   f7fc ffb2   bl 0x4860                   ; call function_e_25
    78fc:   f895 0021   ldrb.w r0, [r5, #33]   ; 0x21
    7900:   f7fc fb46   bl 0x3f90                   ; call function_e_18
    7904:   f7ff ff3c   bl 0x7780                   ; call function_e_83
    7908:   70ef        strb r7, [r5, #3]
    790a:   e7de        b.n 0x78ca

  0x790c:   0x20000058  ; variable_sram_e_1
  0x7910:   0x8d44      ; data_3
  0x7914:   0x20001cba

function_e_86:
  0x7918:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    791c:   4c2b        ldr r4, [pc, #172]   ; (0x79cc)
    791e:   4620        mov r0, r4
    7920:   7ee6        ldrb r6, [r4, #27]
    7922:   7f00        ldrb r0, [r0, #28]
    7924:   2e01        cmp r6, #1
    7926:   d001        beq.n 0x792c
    7928:   2803        cmp r0, #3
    792a:   d11c        bne.n 0x7966
    792c:   f8b4 1042   ldrh.w r1, [r4, #66]   ; 0x42
    7930:   2900        cmp r1, #0
    7932:   d118        bne.n 0x7966
    7934:   4d26        ldr r5, [pc, #152]   ; (0x79d0)
    7936:   f894 2032   ldrb.w r2, [r4, #50]   ; 0x32
    793a:   2700        movs r7, #0
    793c:   eb05 0182   add.w r1, r5, r2, lsl #2
    7940:   788b        ldrb r3, [r1, #2]
    7942:   b923        cbnz r3, 0x794e
    7944:   f891 c003   ldrb.w ip, [r1, #3]
    7948:   f1bc 0f00   cmp.w ip, #0
    794c:   d002        beq.n 0x7954
    794e:   4316        orrs r6, r2
    7950:   d012        beq.n 0x7978
    7952:   e013        b.n 0x797c
    7954:   2e01        cmp r6, #1
    7956:   d10d        bne.n 0x7974
    7958:   f884 7032   strb.w r7, [r4, #50]   ; 0x32
    795c:   2801        cmp r0, #1
    795e:   d004        beq.n 0x796a
    7960:   20c8        movs r0, #200   ; 0xc8
    7962:   f8a4 0042   strh.w r0, [r4, #66]   ; 0x42
    7966:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    796a:   2002        movs r0, #2
    796c:   7720        strb r0, [r4, #28]
    796e:   f44f 707a   mov.w r0, #1000   ; 0x3e8
    7972:   e7f6        b.n 0x7962
    7974:   7727        strb r7, [r4, #28]
    7976:   e7f6        b.n 0x7966
    7978:   2803        cmp r0, #3
    797a:   d0fb        beq.n 0x7974
    797c:   f104 0432   add.w r4, r4, #50   ; 0x32
    7980:   784e        ldrb r6, [r1, #1]
    7982:   0218        lsls r0, r3, #8
    7984:   8220        strh r0, [r4, #16]
    7986:   78c8        ldrb r0, [r1, #3]
    7988:   8a21        ldrh r1, [r4, #16]
    798a:   ea40 0001   orr.w r0, r0, r1
    798e:   8220        strh r0, [r4, #16]
    7990:   f815 1022   ldrb.w r1, [r5, r2, lsl #2]
    7994:   4630        mov r0, r6
    7996:   f7fb fa61   bl 0x2e5c                   ; call function_e_32
    799a:   f814 0932   ldrb.w r0, [r4], #-50
    799e:   4f0b        ldr r7, [pc, #44]   ; (0x79cc)
    79a0:   f815 0020   ldrb.w r0, [r5, r0, lsl #2]
    79a4:   2501        movs r5, #1
    79a6:   3780        adds r7, #128   ; 0x80
    79a8:   2801        cmp r0, #1
    79aa:   4630        mov r0, r6
    79ac:   d007        beq.n 0x79be
    79ae:   f7fc ff05   bl 0x47bc               ; call function_e_23
    79b2:   613d        str r5, [r7, #16]
    79b4:   f814 0f32   ldrb.w r0, [r4, #50]!
    79b8:   1c40        adds r0, r0, #1
    79ba:   7020        strb r0, [r4, #0]
    79bc:   e7d3        b.n 0x7966
    79be:   f000 f85d   bl 0x7a7c                   ; call function_e_89
    79c2:   4630        mov r0, r6
    79c4:   f7fb ff0c   bl 0x37e0               ; function_13
    79c8:   e7f3        b.n 0x79b2
    79ca:   0000

  0x79cc:   0x20000058  ; variable_sram_e_1
  0x79d0:   0x2000080c

function_e_87:
  0x79d4:   b570        push {r4, r5, r6, lr}
    79d6:   4d1b        ldr r5, [pc, #108]   ; (0x7a44)
    79d8:   6b68        ldr r0, [r5, #52]   ; 0x34
    79da:   2800        cmp r0, #0
    79dc:   d031        beq.n 0x7a42
    79de:   6b68        ldr r0, [r5, #52]   ; 0x34
    79e0:   f242 7110   movw r1, #10000   ; 0x2710
    79e4:   4288        cmp r0, r1
    79e6:   d92c        bls.n 0x7a42
    79e8:   2400        movs r4, #0
    79ea:   636c        str r4, [r5, #52]   ; 0x34
    79ec:   f1a5 0680   sub.w r6, r5, #128   ; 0x80
    79f0:   4630        mov r0, r6
    79f2:   f896 102a   ldrb.w r1, [r6, #42]   ; 0x2a
    79f6:   f890 0026   ldrb.w r0, [r0, #38]   ; 0x26
    79fa:   2902        cmp r1, #2
    79fc:   d002        beq.n 0x7a04
    79fe:   f000 fa8b   bl 0x7f18                   ; call function_e_8
    7a02:   e001        b.n 0x7a08
    7a04:   f000 fa00   bl 0x7e08
    7a08:   f806 4f2a   strb.w r4, [r6, #42]!
    7a0c:   7074        strb r4, [r6, #1]
    7a0e:   7bf0        ldrb r0, [r6, #15]
    7a10:   f1a6 062a   sub.w r6, r6, #42   ; 0x2a
    7a14:   f7fc fabc   bl 0x3f90                   ; call function_e_18
    7a18:   490b        ldr r1, [pc, #44]   ; (0x7a48)
    7a1a:   2000        movs r0, #0
    7a1c:   700c        strb r4, [r1, #0]
    7a1e:   180a        adds r2, r1, r0
    7a20:   1c40        adds r0, r0, #1
    7a22:   b2c0        uxtb r0, r0
    7a24:   7094        strb r4, [r2, #2]
    7a26:   2806        cmp r0, #6
    7a28:   d3f9        bcc.n 0x7a1e
    7a2a:   2201        movs r2, #1
    7a2c:   4907        ldr r1, [pc, #28]   ; (0x7a4c)
    7a2e:   2000        movs r0, #0
    7a30:   612a        str r2, [r5, #16]
    7a32:   180b        adds r3, r1, r0
    7a34:   1c40        adds r0, r0, #1
    7a36:   b2c0        uxtb r0, r0
    7a38:   709c        strb r4, [r3, #2]
    7a3a:   281d        cmp r0, #29
    7a3c:   d3f9        bcc.n 0x7a32
    7a3e:   616a        str r2, [r5, #20]
    7a40:   7334        strb r4, [r6, #12]
    7a42:   bd70        pop {r4, r5, r6, pc}

  0x7a44:   0x200000d8  ; pointer_15
  0x7a48:   0x2000003c  ; pointer_33
  0x7a4c:   0x2000032c  ; pointer_32

function_e_88:
    ; this function is used a lot with function_e_90
  0x7a50:   b510        push {r4, lr}
    7a52:   4c09        ldr r4, [pc, #36]       ; r4 = (0x7a78)
    7a54:   f894 0039   ldrb.w r0, [r4, #57]    ; r0 = [r4 + 0x39]
    7a58:   2801        cmp r0, #1
    7a5a:   d105        bne.n 0x7a68            ; branch if r0 != 1

    7a5c:   f8b4 0048   ldrh.w r0, [r4, #72]    ; r0 = [r4 + 0x48]
    7a60:   f000 fc6c   bl 0x833c               ; call function_1
    7a64:   f8a4 0048   strh.w r0, [r4, #72]    ; [r4 + 0x48] = r0

  0x7a68:   f000 fc2c   bl 0x82c4               ; call function_e_10
    7a6c:   f894 0039   ldrb.w r0, [r4, #57]    ; r0 = [r4 + 0x39]
    7a70:   e8bd 4010   ldmia.w sp!, {r4, lr}
    7a74:   f7fc ba8c   b.w 0x3f90              ; return function_e_18

  0x7a78:   0x20000058  ; variable_sram_e_1

function_e_89:
    ; r0 =
  0x7a7c:   28c4        cmp r0, #196
    7a7e:   d005        beq.n 0x7a8c            ; branch if r0 == 0xc4
    7a80:   28c5        cmp r0, #197
    7a82:   d005        beq.n 0x7a90            ; branch if r0 == 0xc5
    7a84:   28c6        cmp r0, #198
    7a86:   d105        bne.n 0x7a94            ; branch if r0 != 0xc6
    7a88:   f7ff bfe2   b.w 0x7a50              ; return function_e_88
  0x7a8c:   f000 b804   b.w 0x7a98              ; return function_e_90
  0x7a90:   f000 b818   b.w 0x7ac4              ; return function_e_91
  0x7a94:   4770        bx lr
    7a96:   0000

function_e_90:
  0x7a98:   b510        push {r4, lr}
    7a9a:   4c09        ldr r4, [pc, #36]   ; (0x7ac0)
    7a9c:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7aa0:   2801        cmp r0, #1
    7aa2:   d105        bne.n 0x7ab0
    7aa4:   f8b4 0048   ldrh.w r0, [r4, #72]   ; 0x48
    7aa8:   f000 fc68   bl 0x837c
    7aac:   f8a4 0048   strh.w r0, [r4, #72]   ; 0x48
    7ab0:   f000 fc08   bl 0x82c4                   ; call function_e_10
    7ab4:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7ab8:   e8bd 4010   ldmia.w sp!, {r4, lr}
    7abc:   f7fc ba68   b.w 0x3f90                  ; call function_e_18

  0x7ac0:   0x20000058

function_e_91:
  0x7ac4:   b570        push {r4, r5, r6, lr}
    7ac6:   4c1f        ldr r4, [pc, #124]   ; (0x7b44)
    7ac8:   2500        movs r5, #0
    7aca:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7ace:   2801        cmp r0, #1
    7ad0:   d10b        bne.n 0x7aea
    7ad2:   f8b4 0046   ldrh.w r0, [r4, #70]   ; 0x46
    7ad6:   b960        cbnz r0, 0x7af2
    7ad8:   f8b4 0048   ldrh.w r0, [r4, #72]   ; 0x48
    7adc:   b948        cbnz r0, 0x7af2
    7ade:   f44f 7096   mov.w r0, #300   ; 0x12c
    7ae2:   f8a4 0048   strh.w r0, [r4, #72]   ; 0x48
    7ae6:   f000 fbc7   bl 0x8278                   ; call function_e_9
    7aea:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7aee:   2804        cmp r0, #4
    7af0:   d025        beq.n 0x7b3e
    7af2:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7af6:   1c40        adds r0, r0, #1
    7af8:   f000 0003   and.w r0, r0, #3
    7afc:   f884 0039   strb.w r0, [r4, #57]   ; 0x39
    7b00:   4e10        ldr r6, [pc, #64]   ; (0x7b44)
    7b02:   72e5        strb r5, [r4, #11]
    7b04:   3680        adds r6, #128   ; 0x80
    7b06:   6335        str r5, [r6, #48]   ; 0x30
    7b08:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7b0c:   f7fc fa40   bl 0x3f90                   ; call function_e_18
    7b10:   490d        ldr r1, [pc, #52]   ; (0x7b48)
    7b12:   f894 0039   ldrb.w r0, [r4, #57]   ; 0x39
    7b16:   7008        strb r0, [r1, #0]
    7b18:   480c        ldr r0, [pc, #48]   ; (0x7b4c)
    7b1a:   7e21        ldrb r1, [r4, #24]
    7b1c:   f894 2026   ldrb.w r2, [r4, #38]   ; 0x26
    7b20:   f850 1021   ldr.w r1, [r0, r1, lsl #2]
    7b24:   389c        subs r0, #156   ; 0x9c
    7b26:   f850 0022   ldr.w r0, [r0, r2, lsl #2]
    7b2a:   2200        movs r2, #0
    7b2c:   4408        add r0, r1
    7b2e:   4601        mov r1, r0
    7b30:   f000 ff00   bl 0x8934               ; call function_e_97
    7b34:   66a5        str r5, [r4, #104]   ; 0x68
    7b36:   66e5        str r5, [r4, #108]   ; 0x6c
    7b38:   2001        movs r0, #1
    7b3a:   6070        str r0, [r6, #4]
    7b3c:   bd70        pop {r4, r5, r6, pc}
    7b3e:   f884 5039   strb.w r5, [r4, #57]   ; 0x39
    7b42:   e7dd        b.n 0x7b00

  0x7b44:   0x20000058  ; variable_sram_e_1
  0x7b48:   0x20001cba
  0x7b4c:   0x8de0      ; data_12

function_24:
  0x7b50:   b510        push {r4, lr}
    7b52:   4b0d        ldr r3, [pc, #52]           ; r3 = (0x7b88)
    7b54:   eb01 00c0   add.w r0, r1, r0, lsl #3
    7b58:   4c0c        ldr r4, [pc, #48]           ; r4 = (0x7b8c)
    7b5a:   f893 1026   ldrb.w r1, [r3, #38]        ; r1 = [r3 + 0x26]
    7b5e:   7e1b        ldrb r3, [r3, #24]
    7b60:   eb01 0141   add.w r1, r1, r1, lsl #1
    7b64:   eb04 1101   add.w r1, r4, r1, lsl #4
    7b68:   eb01 1103   add.w r1, r1, r3, lsl #4
    7b6c:   b14a        cbz r2, 0x7b82
    7b6e:   f851 1c0c   ldr.w r1, [r1, #-12]
  0x7b72:   2201        movs r2, #1
    7b74:   4401        add r1, r0
    7b76:   4806        ldr r0, [pc, #24]           ; r0 = (0x7b90)
    7b78:   f7fd fa26   bl 0x4fc8                   ; call spi_flash_read_data
    7b7c:   4804        ldr r0, [pc, #16]           ; r0 = (0x7b90)
    7b7e:   7800        ldrb r0, [r0, #0]
    7b80:   bd10        pop {r4, pc}
    7b82:   f851 1c10   ldr.w r1, [r1, #-16]
    7b86:   e7f4        b.n 0x7b72

  0x7b88:   0x20000058  ; variable_sram_e_1
  0x7b8c:   0x8d50      ; data_16
  0x7b90:   0x20001cba

main:
    ; This function is called at the end of initialization, and does not return,
    ; or branch elsewhere. So, this is main.
  0x7b94:   f7fd fb0c   bl 0x51b0               ; call setup_intr_priority()
    7b98:   f7fb fb9e   bl 0x32d8               ; call setup_afio_gpio()
    7b9c:   f7fb fe72   bl 0x3884               ; call function_74

    7ba0:   4846        ldr r0, [pc, #280]      ; r0 = (0x7cbc)
    7ba2:   f7fb fb93   bl 0x32cc               ; call spin_wait_maybe(400000)

    7ba6:   2001        movs r0, #1
    7ba8:   f7fc fd38   bl 0x461c               ; call function_37(1)
    7bac:   2001        movs r0, #1
    7bae:   f7fe fc8d   bl 0x64cc               ; call function_e_6(1)

    7bb2:   4843        ldr r0, [pc, #268]      ; r0 = (0x7cc0)
    7bb4:   f7fb fb8a   bl 0x32cc               ; call spin_wait_maybe(100000)
    7bb8:   200a        movs r0, #10
    7bba:   f7fb fb87   bl 0x32cc               ; call spin_wait_maybe(10)

    ; Reset pin 9 output on GPIO A
    7bbe:   f8df 8104   ldr.w r8, [pc, #260]    ; r8 = (0x7cc4) GPIO A
    7bc2:   f44f 7600   mov.w r6, #512          ; r6 = 0x200
    7bc6:   f8c8 6028   str.w r6, [r8, #40]     ; [r8 + 0x28] = r6

    7bca:   200a        movs r0, #10
    7bcc:   f7fb fb7e   bl 0x32cc               ; call spin_wait_maybe(10)

    7bd0:   f8df a0f4   ldr.w sl, [pc, #244]    ; sl = (0x7cc8) GPIO C
    7bd4:   f44f 7980   mov.w r9, #256          ; r9 = 0x100
    7bd8:   2201        movs r2, #1
    7bda:   464c        mov r4, r9
    7bdc:   4649        mov r1, r9
    7bde:   4655        mov r5, sl
    7be0:   4650        mov r0, sl
    7be2:   f7fb fc9b   bl 0x351c               ; call gpio_set_input_output(GPIO C, 0x100, 1)
    7be6:   2200        movs r2, #0
    7be8:   4621        mov r1, r4
    7bea:   4628        mov r0, r5
    7bec:   f7fb fccc   bl 0x3588               ; call gpio_set_reset_pin(GPIO C, 0x100, 0)

    7bf0:   200a        movs r0, #10
    7bf2:   f7fb fb6b   bl 0x32cc               ; call spin_wait_maybe(10)

    7bf6:   f7fe fc0d   bl 0x6414               ; call function_e_50()

    7bfa:   4c34        ldr r4, [pc, #208]      ; r4 = (0x7ccc) main_state
    7bfc:   7020        strb r0, [r4, #0]       ; [r4] =
    7bfe:   7820        ldrb r0, [r4, #0]       ; r0 = [r4]
    7c00:   f000 0044   and.w r0, r0, #68       ; r0 = r0 & 0x44
    7c04:   7020        strb r0, [r4, #0]       ; [r4] = r0
    7c06:   7821        ldrb r1, [r4, #0]       ; r1 = [r4]
    7c08:   4831        ldr r0, [pc, #196]      ; r0 = (0x7cd0)
    7c0a:   2700        movs r7, #0             ; r7 = 0
    7c0c:   2501        movs r5, #1             ; r5 = 1
    7c0e:   2944        cmp r1, #68
    7c10:   d025        beq.n 0x7c5e            ; branch if r1 == 0x44
    7c12:   7821        ldrb r1, [r4, #0]       ; r1 = [r4]
    7c14:   2904        cmp r1, #4
    7c16:   d024        beq.n 0x7c62            ; branch if r1 == 4
    7c18:   7821        ldrb r1, [r4, #0]       ; r1 = [r4]
    7c1a:   2944        cmp r1, #68
    7c1c:   d023        beq.n 0x7c66            ; branch if r1 == 0x44
    7c1e:   2103        movs r1, #3             ; r1 = 3

    ; Main loop
  0x7c20:   7001        strb r1, [r0, #0]       ; [r0] = r1
  0x7c22:   492c        ldr r1, [pc, #176]      ; r1 = (0x7cd4)
    7c24:   7800        ldrb r0, [r0, #0]       ; r0 = [r0]
    7c26:   7008        strb r0, [r1, #0]       ; [r1] = r0

    7c28:   2201        movs r2, #1             ; r2 = 1
    7c2a:   4649        mov r1, r9              ; r1 = r9
    7c2c:   4650        mov r0, sl              ; r0 = sl
    7c2e:   f7fb fcab   bl 0x3588               ; call gpio_set_reset_pin(GPIO C, 0x100l 1)
    7c32:   200a        movs r0, #10
    7c34:   f7fb fb4a   bl 0x32cc               ; call spin_wait_maybe(10)
    7c38:   2001        movs r0, #1
    7c3a:   f7fe fc47   bl 0x64cc               ; call function_e_6
    7c3e:   200a        movs r0, #10
    7c40:   f7fb fb44   bl 0x32cc               ; call spin_wait_maybe(10)
    7c44:   f8c8 6024   str.w r6, [r8, #36]     ; [r8 + 0x24] = r6

    7c48:   200a        movs r0, #10
    7c4a:   f7fb fb3f   bl 0x32cc               ; call spin_wait_maybe(10)
    7c4e:   f7fb f9d9   bl 0x3004               ; call function_e_33

    7c52:   f7ff f873   bl 0x6d3c               ; call usb_init()

    7c56:   4e20        ldr r6, [pc, #128]      ; r6 = (0x7cd8) pointer_3

  0x7c58:   68a0        ldr r0, [r4, #8]        ; r0 = [r4 + 8]
    7c5a:   b130        cbz r0, 0x7c6a          ; branch if r0 == 0
    7c5c:   e00d        b.n 0x7c7a              ; branch
  0x7c5e:   7007        strb r7, [r0, #0]       ; r7 = [r0]
    7c60:   e7df        b.n 0x7c22              ; branch
  0x7c62:   7005        strb r5, [r0, #0]       ; r5 = [r0]
    7c64:   e7dd        b.n 0x7c22              ; branch
  0x7c66:   2102        movs r1, #2             ; r1 = 2
    7c68:   e7da        b.n 0x7c20              ; branch
  0x7c6a:   f896 0032   ldrb.w r0, [r6, #50]    ; r0 = [r6 + 0x32]
    7c6e:   2806        cmp r0, #6
    7c70:   d11e        bne.n 0x7cb0            ; jump to end if r0 != 6
    7c72:   2000        movs r0, #0
    7c74:   60a5        str r5, [r4, #8]        ; [r4 + 8] = r5
    7c76:   f7fc fcd1   bl 0x461c               ; call function_37(0)
  0x7c7a:   68a0        ldr r0, [r4, #8]        ; r0 = [r4 + 8]
    7c7c:   2801        cmp r0, #1
    7c7e:   d117        bne.n 0x7cb0            ; jump to end if r0 != 1
    7c80:   6920        ldr r0, [r4, #16]       ; r0 = [r4 + 0x10]
    7c82:   b120        cbz r0, 0x7c8e          ; branch if r0 == 0
    7c84:   6127        str r7, [r4, #16]       ; [r4 + 0x10] = r7
    7c86:   2001        movs r0, #1
    7c88:   60e7        str r7, [r4, #12]       ; [r4 + 0xc] = r7
    7c8a:   f7fc fcc7   bl 0x461c               ; call function_37(1)

  0x7c8e:   68e0        ldr r0, [r4, #12]       ; r0 = [r4 + 0xc]
    7c90:   b948        cbnz r0, 0x7ca6
    7c92:   6920        ldr r0, [r4, #16]       ; [r4 + 0x10] = r0
    7c94:   b960        cbnz r0, 0x7cb0         ; jump to end if r0 == 0
    7c96:   f896 0032   ldrb.w r0, [r6, #50]    ; r0 = [r6 + 0x32]
    7c9a:   2806        cmp r0, #6
    7c9c:   d108        bne.n 0x7cb0            ; jump to end if r0 != 6
    7c9e:   2000        movs r0, #0
    7ca0:   60e5        str r5, [r4, #12]       ; [r4 + 0xc] = r5
    7ca2:   f7fc fcbb   bl 0x461c               ; call function_37(0)

  0x7ca6:   68e0        ldr r0, [r4, #12]       ; r0 = [r4 + 0xc]
    7ca8:   2801        cmp r0, #1
    7caa:   d101        bne.n 0x7cb0            ; branch if r0 != 1
    7cac:   f7fc fd0a   bl 0x46c4               ; call function_e_21

  0x7cb0:   4809        ldr r0, [pc, #36]       ; r0 = (0x7cd8)
    7cb2:   f7ff f808   bl 0x6cc6               ; call function_75(pointer_3)

    7cb6:   f7ff fa45   bl 0x7144               ; call watchdog_reload_timer

    7cba:   e7cd        b.n 0x7c58              ; unconditional loop

  0x7cbc:   0x61a80     ; 400,000
  0x7cc0:   0x186a0     ; 100,000
  0x7cc4:   0x400b0000  ; GPIO A
  0x7cc8:   0x400b4000  ; GPIO C
  0x7ccc:   0x20000000  ; main_state
  0x7cd0:   0x2000007e
  0x7cd4:   0x2000007f
  0x7cd8:   0x20000234  ; pointer_3

function_e_92:
  0x7cdc:   e92d 43f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ce0:   f1a0 02a0   sub.w r2, r0, #160   ; 0xa0
    7ce4:   2a07        cmp r2, #7
    7ce6:   d868        bhi.n 0x7dba
    7ce8:   4b35        ldr r3, [pc, #212]   ; (0x7dc0)
    7cea:   7c1a        ldrb r2, [r3, #16]
    7cec:   2a01        cmp r2, #1
    7cee:   d107        bne.n 0x7d00
    7cf0:   28a4        cmp r0, #164   ; 0xa4
    7cf2:   d002        beq.n 0x7cfa
    7cf4:   28a5        cmp r0, #165   ; 0xa5
    7cf6:   d002        beq.n 0x7cfe
    7cf8:   e002        b.n 0x7d00
    7cfa:   20a5        movs r0, #165   ; 0xa5
    7cfc:   e000        b.n 0x7d00
    7cfe:   20a4        movs r0, #164   ; 0xa4
    7d00:   4a30        ldr r2, [pc, #192]   ; (0x7dc4)
    7d02:   38a0        subs r0, #160   ; 0xa0
    7d04:   2600        movs r6, #0
    7d06:   f992 8003   ldrsb.w r8, [r2, #3]
    7d0a:   f992 c002   ldrsb.w ip, [r2, #2]
    7d0e:   f992 7004   ldrsb.w r7, [r2, #4]
    7d12:   7854        ldrb r4, [r2, #1]
    7d14:   2501        movs r5, #1
    7d16:   f04f 39ff   mov.w r9, #4294967295   ; 0xffffffff
    7d1a:   2808        cmp r0, #8
    7d1c:   d247        bcs.n 0x7dae
    7d1e:   e8df f000   tbb [pc, r0]
    7d22:   0c04        lsrs r4, r0, #16
    7d24:   1e16        subs r6, r2, #0
    7d26:   3f38        subs r7, #56   ; 0x38
    7d28:   2e28        cmp r6, #40   ; 0x28
    7d2a:   b111        cbz r1, 0x7d32
    7d2c:   f882 9003   strb.w r9, [r2, #3]
    7d30:   e005        b.n 0x7d3e
    7d32:   ea5f 6008   movs.w r0, r8, lsl #24
    7d36:   d407        bmi.n 0x7d48
    7d38:   e039        b.n 0x7dae
    7d3a:   b111        cbz r1, 0x7d42
    7d3c:   70d5        strb r5, [r2, #3]
    7d3e:   675d        str r5, [r3, #116]   ; 0x74
    7d40:   e035        b.n 0x7dae
    7d42:   ea5f 6008   movs.w r0, r8, lsl #24
    7d46:   d432        bmi.n 0x7dae
    7d48:   70d6        strb r6, [r2, #3]
    7d4a:   675e        str r6, [r3, #116]   ; 0x74
    7d4c:   e02f        b.n 0x7dae
    7d4e:   b111        cbz r1, 0x7d56
    7d50:   f882 9002   strb.w r9, [r2, #2]
    7d54:   e005        b.n 0x7d62
    7d56:   ea5f 600c   movs.w r0, ip, lsl #24
    7d5a:   d407        bmi.n 0x7d6c
    7d5c:   e027        b.n 0x7dae
    7d5e:   b111        cbz r1, 0x7d66
    7d60:   7095        strb r5, [r2, #2]
    7d62:   671d        str r5, [r3, #112]   ; 0x70
    7d64:   e023        b.n 0x7dae
    7d66:   ea5f 600c   movs.w r0, ip, lsl #24
    7d6a:   d420        bmi.n 0x7dae
    7d6c:   7096        strb r6, [r2, #2]
    7d6e:   671e        str r6, [r3, #112]   ; 0x70
    7d70:   e01d        b.n 0x7dae
    7d72:   b109        cbz r1, 0x7d78
    7d74:   7115        strb r5, [r2, #4]
    7d76:   e005        b.n 0x7d84
    7d78:   0638        lsls r0, r7, #24
    7d7a:   d507        bpl.n 0x7d8c
    7d7c:   e017        b.n 0x7dae
    7d7e:   b119        cbz r1, 0x7d88
    7d80:   f882 9004   strb.w r9, [r2, #4]
    7d84:   679d        str r5, [r3, #120]   ; 0x78
    7d86:   e012        b.n 0x7dae
    7d88:   0638        lsls r0, r7, #24
    7d8a:   d510        bpl.n 0x7dae
    7d8c:   7116        strb r6, [r2, #4]
    7d8e:   679e        str r6, [r3, #120]   ; 0x78
    7d90:   e00d        b.n 0x7dae
    7d92:   b111        cbz r1, 0x7d9a
    7d94:   f044 0001   orr.w r0, r4, #1
    7d98:   e008        b.n 0x7dac
    7d9a:   f024 0001   bic.w r0, r4, #1
    7d9e:   e005        b.n 0x7dac
    7da0:   b111        cbz r1, 0x7da8
    7da2:   f044 0002   orr.w r0, r4, #2
    7da6:   e001        b.n 0x7dac
    7da8:   f024 0002   bic.w r0, r4, #2
    7dac:   7050        strb r0, [r2, #1]
    7dae:   4804        ldr r0, [pc, #16]   ; (0x7dc0)
    7db0:   3080        adds r0, #128   ; 0x80
    7db2:   6205        str r5, [r0, #32]
    7db4:   2001        movs r0, #1
    7db6:   e8bd 83f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, pc}
    7dba:   2000        movs r0, #0
    7dbc:   e7fb        b.n 0x7db6

    7dbe:   0000
  0x7dc0:   0x20000058  ; variable_sram_e_1
  0x7dc4:   0x20000034

function_e_93:
  0x7dc8:   b5f0        push {r4, r5, r6, r7, lr}
    7dca:   2100        movs r1, #0
    7dcc:   4f0c        ldr r7, [pc, #48]   ; (0x7e00)
    7dce:   f8df c034   ldr.w ip, [pc, #52]   ; 0x7e04
    7dd2:   2301        movs r3, #1
    7dd4:   f44f 75e1   mov.w r5, #450   ; 0x1c2
    7dd8:   5c7a        ldrb r2, [r7, r1]
    7dda:   2000        movs r0, #0
    7ddc:   eb0c 1401   add.w r4, ip, r1, lsl #4
    7de0:   fa03 f600   lsl.w r6, r3, r0
    7de4:   4232        tst r2, r6
    7de6:   d001        beq.n 0x7dec
    7de8:   f824 5010   strh.w r5, [r4, r0, lsl #1]
    7dec:   1c40        adds r0, r0, #1
    7dee:   b2c0        uxtb r0, r0
    7df0:   2808        cmp r0, #8
    7df2:   d3f5        bcc.n 0x7de0
    7df4:   1c49        adds r1, r1, #1
    7df6:   b2c9        uxtb r1, r1
    7df8:   2909        cmp r1, #9
    7dfa:   d3ed        bcc.n 0x7dd8
    7dfc:   bdf0        pop {r4, r5, r6, r7, pc}

    7dfe:   0000
  0x7e00:   0x2000017c
  0x7e04:   0x20002e2c

function_e_94:
  0x7e08:   b570        push {r4, r5, r6, lr}
    7e0a:   4c19        ldr r4, [pc, #100]          ; r4 = (0x7e70)
    7e0c:   2500        movs r5, #0
    7e0e:   4606        mov r6, r0
    7e10:   7025        strb r5, [r4, #0]
    7e12:   7ba0        ldrb r0, [r4, #14]
    7e14:   f000 f880   bl 0x7f18                   ; call function_e_8
    7e18:   2001        movs r0, #1
    7e1a:   7020        strb r0, [r4, #0]
    7e1c:   7ba0        ldrb r0, [r4, #14]
    7e1e:   f000 f87b   bl 0x7f18                   ; call function_e_8
    7e22:   2002        movs r0, #2
    7e24:   7020        strb r0, [r4, #0]
    7e26:   7ba0        ldrb r0, [r4, #14]
    7e28:   f000 f876   bl 0x7f18                   ; call function_e_8
    7e2c:   2003        movs r0, #3
    7e2e:   7020        strb r0, [r4, #0]
    7e30:   7ba0        ldrb r0, [r4, #14]
    7e32:   f000 f871   bl 0x7f18                   ; call function_e_8
    7e36:   490f        ldr r1, [pc, #60]           ; r1 = (0x7e74)
    7e38:   7025        strb r5, [r4, #0]
    7e3a:   74e5        strb r5, [r4, #19]
    7e3c:   700d        strb r5, [r1, #0]
    7e3e:   2056        movs r0, #86   ; 0x56
    7e40:   72c8        strb r0, [r1, #11]
    7e42:   2031        movs r0, #49   ; 0x31
    7e44:   7308        strb r0, [r1, #12]
    7e46:   2034        movs r0, #52   ; 0x34
    7e48:   7348        strb r0, [r1, #13]
    7e4a:   480b        ldr r0, [pc, #44]           ; r0 = (0x7e78)
    7e4c:   f44f 627f   mov.w r2, #4080             ; 0xff0
    7e50:   f850 0026   ldr.w r0, [r0, r6, lsl #2]
    7e54:   f600 71fe   addw r1, r0, #4094          ; r1 = r0 + 0xffe
    7e58:   f500 607f   add.w r0, r0, #4080         ; r0 = r0 + 0xff0
    7e5c:   f000 fd6a   bl 0x8934                   ; call function_e_97
    7e60:   7525        strb r5, [r4, #20]
    7e62:   7565        strb r5, [r4, #21]
    7e64:   f894 0021   ldrb.w r0, [r4, #33]        ; 0x21
    7e68:   e8bd 4070   ldmia.w sp!, {r4, r5, r6, lr}

    ; ????
  0x7e6c:   f7fc b890   b.w 0x3f90                  ; jump function_e_18

  0x7e70:   0x20000070
  0x7e74:   0x20002caa
  0x7e78:   0x8d44      ; data_3

function_e_95:
  0x7e7c:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7e80:   2400        movs r4, #0
    7e82:   4d22        ldr r5, [pc, #136]   ; (0x7f0c)
    7e84:   f8df 9088   ldr.w r9, [pc, #136]   ; 0x7f10
    7e88:   4f22        ldr r7, [pc, #136]   ; (0x7f14)
    7e8a:   4626        mov r6, r4
    7e8c:   f04f 0801   mov.w r8, #1
    7e90:   f04f 0a02   mov.w sl, #2
    7e94:   f04f 0b03   mov.w fp, #3
    7e98:   762e        strb r6, [r5, #24]
    7e9a:   4620        mov r0, r4
    7e9c:   f000 f83c   bl 0x7f18                   ; call function_e_8
    7ea0:   f885 8018   strb.w r8, [r5, #24]
    7ea4:   4620        mov r0, r4
    7ea6:   f000 f837   bl 0x7f18                   ; call function_e_8
    7eaa:   f885 a018   strb.w sl, [r5, #24]
    7eae:   4620        mov r0, r4
    7eb0:   f000 f832   bl 0x7f18                   ; call function_e_8
    7eb4:   f885 b018   strb.w fp, [r5, #24]
    7eb8:   4620        mov r0, r4
    7eba:   f000 f82d   bl 0x7f18                   ; call function_e_8
    7ebe:   f885 602b   strb.w r6, [r5, #43]   ; 0x2b
    7ec2:   f509 607f   add.w r0, r9, #4080   ; 0xff0
    7ec6:   762e        strb r6, [r5, #24]
    7ec8:   7006        strb r6, [r0, #0]
    7eca:   f04f 0156   mov.w r1, #86   ; 0x56
    7ece:   72c1        strb r1, [r0, #11]
    7ed0:   f04f 0131   mov.w r1, #49   ; 0x31
    7ed4:   7301        strb r1, [r0, #12]
    7ed6:   f04f 0134   mov.w r1, #52   ; 0x34
    7eda:   f889 1ffd   strb.w r1, [r9, #4093]   ; 0xffd
    7ede:   f857 0024   ldr.w r0, [r7, r4, lsl #2]
    7ee2:   f44f 627f   mov.w r2, #4080   ; 0xff0
    7ee6:   f600 71fe   addw r1, r0, #4094   ; 0xffe
    7eea:   f500 607f   add.w r0, r0, #4080   ; 0xff0
    7eee:   f000 fd21   bl 0x8934                   ; call function_e_97
    7ef2:   1c64        adds r4, r4, #1
    7ef4:   b2e4        uxtb r4, r4
    7ef6:   2c03        cmp r4, #3
    7ef8:   d3ce        bcc.n 0x7e98
    7efa:   f805 6f2c   strb.w r6, [r5, #44]!
    7efe:   706e        strb r6, [r5, #1]
    7f00:   7b68        ldrb r0, [r5, #13]
    7f02:   e8bd 5ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

  0x7f06:   f7fc b843   b.w 0x3f90                  ; call function_e_18
    7f0a:   0000        movs r0, r0

  0x7f0c:   0x20000058  ; variable_sram_e_1
  0x7f10:   0x20001cba
  0x7f14:   0x8d44      ; data_3

function_e_8:
    ; r0 =
  0x7f18:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7f1c:   4c5d        ldr r4, [pc, #372]   ; (0x8094)
    7f1e:   4681        mov r9, r0
    7f20:   2002        movs r0, #2
    7f22:   71a0        strb r0, [r4, #6]
    7f24:   2644        movs r6, #68   ; 0x44
    7f26:   f884 603d   strb.w r6, [r4, #61]   ; 0x3d
    7f2a:   2745        movs r7, #69   ; 0x45
    7f2c:   f884 703e   strb.w r7, [r4, #62]   ; 0x3e
    7f30:   2300        movs r3, #0
    7f32:   f884 3039   strb.w r3, [r4, #57]   ; 0x39
    7f36:   4858        ldr r0, [pc, #352]   ; (0x8098)
    7f38:   7e21        ldrb r1, [r4, #24]
    7f3a:   4d58        ldr r5, [pc, #352]   ; (0x809c)
    7f3c:   f04f 08e8   mov.w r8, #232   ; 0xe8
    7f40:   f850 2021   ldr.w r2, [r0, r1, lsl #2]
    7f44:   1ce8        adds r0, r5, #3
    7f46:   1c41        adds r1, r0, #1
    7f48:   54ab        strb r3, [r5, r2]
    7f4a:   f802 8000   strb.w r8, [r2, r0]
    7f4e:   f04f 0a03   mov.w sl, #3
    7f52:   1c80        adds r0, r0, #2
    7f54:   f802 a001   strb.w sl, [r2, r1]
    7f58:   5413        strb r3, [r2, r0]
    7f5a:   1c40        adds r0, r0, #1
    7f5c:   46a3        mov fp, r4
    7f5e:   5413        strb r3, [r2, r0]
    7f60:   1cc0        adds r0, r0, #3
    7f62:   5413        strb r3, [r2, r0]
    7f64:   1c40        adds r0, r0, #1
    7f66:   5416        strb r6, [r2, r0]
    7f68:   1c40        adds r0, r0, #1
    7f6a:   f44f 7690   mov.w r6, #288   ; 0x120
    7f6e:   5417        strb r7, [r2, r0]
    7f70:   2000        movs r0, #0
    7f72:   1951        adds r1, r2, r5
    7f74:   f100 040c   add.w r4, r0, #12
    7f78:   550b        strb r3, [r1, r4]
    7f7a:   f200 142d   addw r4, r0, #301   ; 0x12d
    7f7e:   1c40        adds r0, r0, #1
    7f80:   b280        uxth r0, r0
    7f82:   550b        strb r3, [r1, r4]
    7f84:   42b0        cmp r0, r6
    7f86:   d3f5        bcc.n 0x7f74
    7f88:   4f45        ldr r7, [pc, #276]   ; (0x80a0)
    7f8a:   2100        movs r1, #0
    7f8c:   f507 7c90   add.w ip, r7, #288   ; 0x120
    7f90:   2000        movs r0, #0
    7f92:   eb0c 1441   add.w r4, ip, r1, lsl #5
    7f96:   eb07 1541   add.w r5, r7, r1, lsl #5
    7f9a:   eb05 0680   add.w r6, r5, r0, lsl #2
    7f9e:   f825 3020   strh.w r3, [r5, r0, lsl #2]
    7fa2:   8073        strh r3, [r6, #2]
    7fa4:   f824 3020   strh.w r3, [r4, r0, lsl #2]
    7fa8:   eb04 0680   add.w r6, r4, r0, lsl #2
    7fac:   1c40        adds r0, r0, #1
    7fae:   b280        uxth r0, r0
    7fb0:   8073        strh r3, [r6, #2]
    7fb2:   2808        cmp r0, #8
    7fb4:   d3f1        bcc.n 0x7f9a
    7fb6:   1c49        adds r1, r1, #1
    7fb8:   b289        uxth r1, r1
    7fba:   2909        cmp r1, #9
    7fbc:   d3e8        bcc.n 0x7f90
    7fbe:   4837        ldr r0, [pc, #220]   ; (0x809c)
    7fc0:   4936        ldr r1, [pc, #216]   ; (0x809c)
    7fc2:   3034        adds r0, #52   ; 0x34
    7fc4:   3135        adds r1, #53   ; 0x35
    7fc6:   f802 8000   strb.w r8, [r2, r0]
    7fca:   4c34        ldr r4, [pc, #208]   ; (0x809c)
    7fcc:   f802 a001   strb.w sl, [r2, r1]
    7fd0:   2632        movs r6, #50   ; 0x32
    7fd2:   3450        adds r4, #80   ; 0x50
    7fd4:   853e        strh r6, [r7, #40]   ; 0x28
    7fd6:   2164        movs r1, #100   ; 0x64
    7fd8:   5511        strb r1, [r2, r4]
    7fda:   1c64        adds r4, r4, #1
    7fdc:   4d2f        ldr r5, [pc, #188]   ; (0x809c)
    7fde:   5513        strb r3, [r2, r4]
    7fe0:   24c8        movs r4, #200   ; 0xc8
    7fe2:   3554        adds r5, #84   ; 0x54
    7fe4:   f8a7 4044   strh.w r4, [r7, #68]   ; 0x44
    7fe8:   f802 8005   strb.w r8, [r2, r5]
    7fec:   1c6d        adds r5, r5, #1
    7fee:   f44f 7e7a   mov.w lr, #1000   ; 0x3e8
    7ff2:   f802 a005   strb.w sl, [r2, r5]
    7ff6:   1ced        adds r5, r5, #3
    7ff8:   f8a7 e048   strh.w lr, [r7, #72]   ; 0x48
    7ffc:   5554        strb r4, [r2, r5]
    7ffe:   1c6d        adds r5, r5, #1
    8000:   4650        mov r0, sl
    8002:   5553        strb r3, [r2, r5]
    8004:   f44f 7a96   mov.w sl, #300   ; 0x12c
    8008:   f505 75c0   add.w r5, r5, #384   ; 0x180
    800c:   f8a7 a04c   strh.w sl, [r7, #76]   ; 0x4c
    8010:   f802 8005   strb.w r8, [r2, r5]
    8014:   1c6d        adds r5, r5, #1
    8016:   5550        strb r0, [r2, r5]
    8018:   351f        adds r5, #31
    801a:   f8ac 60ac   strh.w r6, [ip, #172]   ; 0xac
    801e:   5551        strb r1, [r2, r5]
    8020:   1c6d        adds r5, r5, #1
    8022:   5553        strb r3, [r2, r5]
    8024:   f8ac 10cc   strh.w r1, [ip, #204]   ; 0xcc
    8028:   f1a5 0171   sub.w r1, r5, #113   ; 0x71
    802c:   f802 8001   strb.w r8, [r2, r1]
    8030:   1c49        adds r1, r1, #1
    8032:   5450        strb r0, [r2, r1]
    8034:   1ce8        adds r0, r5, #3
    8036:   f8ac a05c   strh.w sl, [ip, #92]   ; 0x5c
    803a:   5414        strb r4, [r2, r0]
    803c:   1c40        adds r0, r0, #1
    803e:   5413        strb r3, [r2, r0]
    8040:   4815        ldr r0, [pc, #84]   ; (0x8098)
    8042:   f8ac e0d0   strh.w lr, [ip, #208]   ; 0xd0
    8046:   389c        subs r0, #156   ; 0x9c
    8048:   f88b 3039   strb.w r3, [fp, #57]   ; 0x39
    804c:   f850 0029   ldr.w r0, [r0, r9, lsl #2]
    8050:   4410        add r0, r2
    8052:   f500 717c   add.w r1, r0, #1008   ; 0x3f0
    8056:   f000 fc6d   bl 0x8934                   ; call function_e_97
    805a:   f89b 0018   ldrb.w r0, [fp, #24]
    805e:   2800        cmp r0, #0
    8060:   d016        beq.n 0x8090
    8062:   490d        ldr r1, [pc, #52]   ; (0x8098)
    8064:   2400        movs r4, #0
    8066:   eb09 0049   add.w r0, r9, r9, lsl #1
    806a:   3990        subs r1, #144   ; 0x90
    806c:   465e        mov r6, fp
    806e:   eb01 1500   add.w r5, r1, r0, lsl #4
    8072:   7e30        ldrb r0, [r6, #24]
    8074:   eb05 1000   add.w r0, r5, r0, lsl #4
    8078:   f850 0c10   ldr.w r0, [r0, #-16]
    807c:   eb00 3004   add.w r0, r0, r4, lsl #12
    8080:   f7fd f80e   bl 0x50a0               ; call function_e_40
    8084:   f7ff f85e   bl 0x7144               ; call watchdog_reload_timer
    8088:   1c64        adds r4, r4, #1
    808a:   0424        lsls r4, r4, #16
    808c:   0c24        lsrs r4, r4, #16
    808e:   d0f0        beq.n 0x8072
    8090:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x8094:   0x20000058  ; variable_sram_e_1
  0x8098:   0x8de0      ; data_12
  0x809c:   0x20001cba
  0x80a0:   0x2000091e

function_e_7:
  0x80a4:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    80a8:   4d2b        ldr r5, [pc, #172]   ; (0x8158)
    80aa:   2400        movs r4, #0
    80ac:   2701        movs r7, #1
    80ae:   7b2a        ldrb r2, [r5, #12]
    80b0:   f105 0680   add.w r6, r5, #128   ; 0x80
    80b4:   f44f 707a   mov.w r0, #1000   ; 0x3e8
    80b8:   2a08        cmp r2, #8
    80ba:   d215        bcs.n 0x80e8
    80bc:   e8df f002   tbb [pc, r2]
    80c0:   0414        lsls r4, r2, #16
    80c2:   040a        lsls r2, r1, #16
    80c4:   040a        lsls r2, r1, #16
    80c6:   2716        movs r7, #22
    80c8:   6b71        ldr r1, [r6, #52]   ; 0x34
    80ca:   4281        cmp r1, r0
    80cc:   d90c        bls.n 0x80e8
    80ce:   2100        movs r1, #0
    80d0:   4608        mov r0, r1
    80d2:   e003        b.n 0x80dc
    80d4:   6b72        ldr r2, [r6, #52]   ; 0x34
    80d6:   4282        cmp r2, r0
    80d8:   d906        bls.n 0x80e8
    80da:   4601        mov r1, r0
    80dc:   f7fd f950   bl 0x5380                   ; call function_e_42
    80e0:   7b28        ldrb r0, [r5, #12]
    80e2:   1c40        adds r0, r0, #1
    80e4:   7328        strb r0, [r5, #12]
    80e6:   6377        str r7, [r6, #52]   ; 0x34
    80e8:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    80ec:   f105 050c   add.w r5, r5, #12
    80f0:   7ea8        ldrb r0, [r5, #26]
    80f2:   f7ff ff11   bl 0x7f18                   ; call function_e_8
    80f6:   7ea8        ldrb r0, [r5, #26]
    80f8:   f7fc fbb2   bl 0x4860                   ; call function_e_25
    80fc:   f895 002d   ldrb.w r0, [r5, #45]   ; 0x2d
    8100:   f7fb ff46   bl 0x3f90                   ; call function_e_18
    8104:   6374        str r4, [r6, #52]   ; 0x34
    8106:   7828        ldrb r0, [r5, #0]
    8108:   1c40        adds r0, r0, #1
    810a:   7028        strb r0, [r5, #0]
    810c:   e7ec        b.n 0x80e8
    810e:   4913        ldr r1, [pc, #76]   ; (0x815c)
    8110:   2000        movs r0, #0
    8112:   180a        adds r2, r1, r0
    8114:   7892        ldrb r2, [r2, #2]
    8116:   2aff        cmp r2, #255   ; 0xff
    8118:   d103        bne.n 0x8122
    811a:   1c40        adds r0, r0, #1
    811c:   b2c0        uxtb r0, r0
    811e:   2809        cmp r0, #9
    8120:   d3f7        bcc.n 0x8112
    8122:   2809        cmp r0, #9
    8124:   d1e0        bne.n 0x80e8
    8126:   2000        movs r0, #0
    8128:   22ff        movs r2, #255   ; 0xff
    812a:   180b        adds r3, r1, r0
    812c:   1c40        adds r0, r0, #1
    812e:   b2c0        uxtb r0, r0
    8130:   751a        strb r2, [r3, #20]
    8132:   2809        cmp r0, #9
    8134:   d3f9        bcc.n 0x812a
    8136:   f000 fbad   bl 0x8894                   ; call function_e_16
    813a:   2801        cmp r0, #1
    813c:   d1d4        bne.n 0x80e8

    813e:   4806        ldr r0, [pc, #24]       ; r0 = (0x8158)
    8140:   732c        strb r4, [r5, #12]
    8142:   70ac        strb r4, [r5, #2]
    8144:   30f8        adds r0, #248           ; r0 = r0 + 0xf8
    8146:   712c        strb r4, [r5, #4]
    8148:   6004        str r4, [r0, #0]
    814a:   6044        str r4, [r0, #4]
    814c:   3008        adds r0, #8             ; r0 = r0 + 8
    814e:   6004        str r4, [r0, #0]
    8150:   6044        str r4, [r0, #4]
    8152:   66ac        str r4, [r5, #104]      ; 0x68
    8154:   66ec        str r4, [r5, #108]      ; 0x6c
    8156:   e7c7        b.n 0x80e8

  0x8158:   0x20000058  ; variable_sram_e_1
  0x815c:   0x20002de4  ; pointer_34

function_e_5:
  0x8160:   e92d 0ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    8164:   f8df 8108   ldr.w r8, [pc, #264]   ; 0x8270
    8168:   4840        ldr r0, [pc, #256]   ; (0x826c)
    816a:   f8df a0fc   ldr.w sl, [pc, #252]   ; 0x8268
    816e:   f898 1018   ldrb.w r1, [r8, #24]
    8172:   f8df 9100   ldr.w r9, [pc, #256]   ; 0x8274
    8176:   2400        movs r4, #0
    8178:   f850 2021   ldr.w r2, [r0, r1, lsl #2]
    817c:   f50a 7b90   add.w fp, sl, #288   ; 0x120
    8180:   eb02 0309   add.w r3, r2, r9
    8184:   2100        movs r1, #0
    8186:   eb0b 1544   add.w r5, fp, r4, lsl #5
    818a:   eb0a 1c44   add.w ip, sl, r4, lsl #5
    818e:   eb01 00c4   add.w r0, r1, r4, lsl #3
    8192:   0080        lsls r0, r0, #2
    8194:   f100 060c   add.w r6, r0, #12
    8198:   f83c 7021   ldrh.w r7, [ip, r1, lsl #2]
    819c:   559f        strb r7, [r3, r6]
    819e:   0a3e        lsrs r6, r7, #8
    81a0:   f100 070d   add.w r7, r0, #13
    81a4:   55de        strb r6, [r3, r7]
    81a6:   eb0c 0681   add.w r6, ip, r1, lsl #2
    81aa:   1c7f        adds r7, r7, #1
    81ac:   8876        ldrh r6, [r6, #2]
    81ae:   55de        strb r6, [r3, r7]
    81b0:   1c7f        adds r7, r7, #1
    81b2:   0a36        lsrs r6, r6, #8
    81b4:   55de        strb r6, [r3, r7]
    81b6:   f200 172d   addw r7, r0, #301   ; 0x12d
    81ba:   f835 6021   ldrh.w r6, [r5, r1, lsl #2]
    81be:   55de        strb r6, [r3, r7]
    81c0:   1c7f        adds r7, r7, #1
    81c2:   0a36        lsrs r6, r6, #8
    81c4:   55de        strb r6, [r3, r7]
    81c6:   eb05 0681   add.w r6, r5, r1, lsl #2
    81ca:   1c7f        adds r7, r7, #1
    81cc:   8876        ldrh r6, [r6, #2]
    81ce:   55de        strb r6, [r3, r7]
    81d0:   0a36        lsrs r6, r6, #8
    81d2:   1c78        adds r0, r7, #1
    81d4:   1c49        adds r1, r1, #1
    81d6:   b2c9        uxtb r1, r1
    81d8:   541e        strb r6, [r3, r0]
    81da:   2908        cmp r1, #8
    81dc:   d3d7        bcc.n 0x818e
    81de:   1c64        adds r4, r4, #1
    81e0:   b2e4        uxtb r4, r4
    81e2:   2c09        cmp r4, #9
    81e4:   d3ce        bcc.n 0x8184
    81e6:   f898 1039   ldrb.w r1, [r8, #57]   ; 0x39
    81ea:   f809 1002   strb.w r1, [r9, r2]
    81ee:   4921        ldr r1, [pc, #132]   ; (0x8274)
    81f0:   f8b8 0048   ldrh.w r0, [r8, #72]   ; 0x48
    81f4:   1cc9        adds r1, r1, #3
    81f6:   5450        strb r0, [r2, r1]
    81f8:   0a01        lsrs r1, r0, #8
    81fa:   481e        ldr r0, [pc, #120]   ; (0x8274)
    81fc:   1d00        adds r0, r0, #4
    81fe:   5411        strb r1, [r2, r0]
    8200:   491c        ldr r1, [pc, #112]   ; (0x8274)
    8202:   f8b8 0046   ldrh.w r0, [r8, #70]   ; 0x46
    8206:   1c49        adds r1, r1, #1
    8208:   5450        strb r0, [r2, r1]
    820a:   0a01        lsrs r1, r0, #8
    820c:   4819        ldr r0, [pc, #100]   ; (0x8274)
    820e:   1c80        adds r0, r0, #2
    8210:   5411        strb r1, [r2, r0]
    8212:   4918        ldr r1, [pc, #96]   ; (0x8274)
    8214:   f8b8 004c   ldrh.w r0, [r8, #76]   ; 0x4c
    8218:   1dc9        adds r1, r1, #7
    821a:   5450        strb r0, [r2, r1]
    821c:   0a01        lsrs r1, r0, #8
    821e:   4815        ldr r0, [pc, #84]   ; (0x8274)
    8220:   3008        adds r0, #8
    8222:   5411        strb r1, [r2, r0]
    8224:   4913        ldr r1, [pc, #76]   ; (0x8274)
    8226:   f8b8 004a   ldrh.w r0, [r8, #74]   ; 0x4a
    822a:   1d49        adds r1, r1, #5
    822c:   5450        strb r0, [r2, r1]
    822e:   0a01        lsrs r1, r0, #8
    8230:   4810        ldr r0, [pc, #64]   ; (0x8274)
    8232:   1d80        adds r0, r0, #6
    8234:   5411        strb r1, [r2, r0]
    8236:   1cc0        adds r0, r0, #3
    8238:   f898 1006   ldrb.w r1, [r8, #6]
    823c:   5411        strb r1, [r2, r0]
    823e:   1c40        adds r0, r0, #1
    8240:   f898 103d   ldrb.w r1, [r8, #61]   ; 0x3d
    8244:   5411        strb r1, [r2, r0]
    8246:   1c40        adds r0, r0, #1
    8248:   f898 103e   ldrb.w r1, [r8, #62]   ; 0x3e
    824c:   5411        strb r1, [r2, r0]
    824e:   4807        ldr r0, [pc, #28]   ; (0x826c)
    8250:   f898 1026   ldrb.w r1, [r8, #38]   ; 0x26
    8254:   389c        subs r0, #156   ; 0x9c
    8256:   f850 0021   ldr.w r0, [r0, r1, lsl #2]
    825a:   e8bd 0ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    825e:   4410        add r0, r2
    8260:   f500 717c   add.w r1, r0, #1008   ; 0x3f0
    8264:   f000 bb66   b.w 0x8934                  ; call function_e_97

  0x8268:   0x2000091e
  0x826c:   0x8de0      ; data_12
  0x8270:   0x20000058  ; variable_sram_e_1
  0x8274:   0x20001cba

function_e_9:
  0x8278:   490f        ldr r1, [pc, #60]   ; (0x82b8)
    827a:   f891 0039   ldrb.w r0, [r1, #57]   ; 0x39
    827e:   2801        cmp r0, #1
    8280:   d119        bne.n 0x82b6
    8282:   f101 0118   add.w r1, r1, #24       ; r1 = r1 + 0x18
    8286:   4a0d        ldr r2, [pc, #52]   ; (0x82bc)
    8288:   8dc8        ldrh r0, [r1, #46]   ; 0x2e
    828a:   7010        strb r0, [r2, #0]
    828c:   ea4f 2010   mov.w r0, r0, lsr #8
    8290:   7050        strb r0, [r2, #1]
    8292:   480b        ldr r0, [pc, #44]   ; (0x82c0)
    8294:   780a        ldrb r2, [r1, #0]
    8296:   7b89        ldrb r1, [r1, #14]
    8298:   f850 2022   ldr.w r2, [r0, r2, lsl #2]
    829c:   f1a0 009c   sub.w r0, r0, #156   ; 0x9c
    82a0:   f850 0021   ldr.w r0, [r0, r1, lsl #2]
    82a4:   4410        add r0, r2
    82a6:   f100 0102   add.w r1, r0, #2
    82aa:   f100 0001   add.w r0, r0, #1
    82ae:   f04f 0200   mov.w r2, #0
    82b2:   f000 bb3f   b.w 0x8934                  ; call function_e_97
    82b6:   4770        bx lr

  0x82b8:   0x20000058  ; variable_sram_e_1
  0x82bc:   0x20001cba
  0x82c0:   0x8de0      ; data_12

function_e_10:
  0x82c4:   490f        ldr r1, [pc, #60]   ; (0x8304)
    82c6:   f891 0039   ldrb.w r0, [r1, #57]   ; 0x39
    82ca:   2801        cmp r0, #1
    82cc:   d119        bne.n 0x8302
    82ce:   f101 0118   add.w r1, r1, #24
    82d2:   4a0d        ldr r2, [pc, #52]   ; (0x8308)
    82d4:   8e08        ldrh r0, [r1, #48]   ; 0x30
    82d6:   7010        strb r0, [r2, #0]
    82d8:   ea4f 2010   mov.w r0, r0, lsr #8
    82dc:   7050        strb r0, [r2, #1]
    82de:   480b        ldr r0, [pc, #44]   ; (0x830c)
    82e0:   780a        ldrb r2, [r1, #0]
    82e2:   7b89        ldrb r1, [r1, #14]
    82e4:   f850 2022   ldr.w r2, [r0, r2, lsl #2]
    82e8:   f1a0 009c   sub.w r0, r0, #156   ; 0x9c
    82ec:   f850 0021   ldr.w r0, [r0, r1, lsl #2]
    82f0:   4410        add r0, r2
    82f2:   f100 0104   add.w r1, r0, #4
    82f6:   f100 0003   add.w r0, r0, #3
    82fa:   f04f 0200   mov.w r2, #0
    82fe:   f000 bb19   b.w 0x8934                  ; call function_e_97
    8302:   4770        bx lr

  0x8304:   0x20000058  ; variable_sram_e_1
  0x8308:   0x20001cba
  0x830c:   0x8de0      ; data_12

function_e_11:
  0x8310:   b510        push {r4, lr}
    8312:   4b09        ldr r3, [pc, #36]   ; (0x8338)
    8314:   4c07        ldr r4, [pc, #28]   ; (0x8334)
    8316:   789a        ldrb r2, [r3, #2]
    8318:   f804 1022   strb.w r1, [r4, r2, lsl #2]
    831c:   eb04 0182   add.w r1, r4, r2, lsl #2
    8320:   7048        strb r0, [r1, #1]
    8322:   6b18        ldr r0, [r3, #48]   ; 0x30
    8324:   2000        movs r0, #0
    8326:   7088        strb r0, [r1, #2]
    8328:   6b18        ldr r0, [r3, #48]   ; 0x30
    832a:   70c8        strb r0, [r1, #3]
    832c:   1c52        adds r2, r2, #1
    832e:   709a        strb r2, [r3, #2]
    8330:   bd10        pop {r4, pc}
    8332:   0000

  0x8334:   0x2000080c
  0x8338:   0x20000088

function_1:
    ; r0 =
    ; some strange number rounding / boxing function
  0x833c:   2832        cmp r0, #50
    833e:   d002        beq.n 0x8346            ; return 50 if r0 == 50
    8340:   2864        cmp r0, #100
    8342:   d801        bhi.n 0x8348            ; continue if r0 > 100
    8344:   2032        movs r0, #50
  0x8346:   4770        bx lr                   ; return 50

  0x8348:   28c8        cmp r0, #200
    834a:   d801        bhi.n 0x8350            ; continue if r0 > 200
    834c:   2064        movs r0, #100
    834e:   4770        bx lr                   ; return 100

  0x8350:   f44f 7296   mov.w r2, #300
    8354:   4290        cmp r0, r2
    8356:   d801        bhi.n 0x835c            ; continue if r0 > 300
    8358:   20c8        movs r0, #200
    835a:   4770        bx lr                   ; return 200

  0x835c:   f44f 71fa   mov.w r1, #500
    8360:   4288        cmp r0, r1
    8362:   d801        bhi.n 0x8368            ; continue if r0 > 500
  0x8364:   4610        mov r0, r2
    8366:   4770        bx lr                   ; return 300

  0x8368:   f44f 722f   mov.w r2, #700
    836c:   4290        cmp r0, r2
    836e:   d801        bhi.n 0x8374            ; continue if r0 > 700
    8370:   4608        mov r0, r1
    8372:   4770        bx lr                   ; return 500

  0x8374:   f5b0 7f7a   cmp.w r0, #1000
    8378:   d9f4        bls.n 0x8364            ; branch if r0 <= 1000
    837a:   4770        bx lr                   ; return

    837c:   f44f 727a   mov.w r2, #1000         ; r2 = 1000
    8380:   4290        cmp r0, r2
    8382:   d004        beq.n 0x838e            ; return 1000 if r0 == 1000

    8384:   f44f 712f   mov.w r1, #700
    8388:   4288        cmp r0, r1
    838a:   d301        bcc.n 0x8390            ; continue if r0 < 700
  0x838c:   4610        mov r0, r2
  0x838e:   4770        bx lr                   ; return 1000

  0x8390:   f44f 72fa   mov.w r2, #500
    8394:   4290        cmp r0, r2
    8396:   d301        bcc.n 0x839c            ; continue if r0 < 500
  0x8398:   4608        mov r0, r1
    839a:   4770        bx lr                   ; return 500

  0x839c:   f44f 7196   mov.w r1, #300
    83a0:   4288        cmp r0, r1
    83a2:   d2f3        bcs.n 0x838c            ; return 1000 if r0 >= 300
    83a4:   28c8        cmp r0, #200
    83a6:   d2f7        bcs.n 0x8398            ; return 500 if r0 >= 200
    83a8:   2864        cmp r0, #100
    83aa:   d301        bcc.n 0x83b0            ; continue if r0 < 100
    83ac:   20c8        movs r0, #200
    83ae:   4770        bx lr                   ; return 200

  0x83b0:   2832        cmp r0, #50
    83b2:   d301        bcc.n 0x83b8            ; return 0 if r0 < 50
    83b4:   2064        movs r0, #100
    83b6:   4770        bx lr                   ; return 100
  0x83b8:   2000        movs r0, #0
    83ba:   4770        bx lr                   ; return 0

function_e_14:
  0x83bc:   e92d 5ff0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    83c0:   f8df 81b0   ldr.w r8, [pc, #432]   ; 0x8574
    83c4:   f04f 0a00   mov.w sl, #0
    83c8:   f898 0029   ldrb.w r0, [r8, #41]   ; 0x29
    83cc:   bb30        cbnz r0, 0x841c
    83ce:   f000 fa75   bl 0x88bc
    83d2:   2801        cmp r0, #1
    83d4:   d122        bne.n 0x841c
    83d6:   2000        movs r0, #0
    83d8:   f7fb fdda   bl 0x3f90                   ; call function_e_18
    83dc:   f7ff f9d0   bl 0x7780                   ; call function_e_83
    83e0:   f108 0129   add.w r1, r8, #41   ; 0x29
    83e4:   4a64        ldr r2, [pc, #400]   ; (0x8578)
    83e6:   7d08        ldrb r0, [r1, #20]
    83e8:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    83ec:   ea4f 04d0   mov.w r4, r0, lsr #3
    83f0:   eb02 1404   add.w r4, r2, r4, lsl #4
    83f4:   f000 0007   and.w r0, r0, #7
    83f8:   f824 3010   strh.w r3, [r4, r0, lsl #1]
    83fc:   7d48        ldrb r0, [r1, #21]
    83fe:   ea4f 04d0   mov.w r4, r0, lsr #3
    8402:   eb02 1404   add.w r4, r2, r4, lsl #4
    8406:   f000 0007   and.w r0, r0, #7
    840a:   f824 3010   strh.w r3, [r4, r0, lsl #1]
    840e:   f8a2 a020   strh.w sl, [r2, #32]
    8412:   7808        ldrb r0, [r1, #0]
    8414:   f100 0001   add.w r0, r0, #1
    8418:   f888 0029   strb.w r0, [r8, #41]   ; 0x29
    841c:   2600        movs r6, #0
    841e:   4857        ldr r0, [pc, #348]   ; (0x857c)
    8420:   4430        add r0, r6
    8422:   4681        mov r9, r0
    8424:   7885        ldrb r5, [r0, #2]
    8426:   7d07        ldrb r7, [r0, #20]
    8428:   406f        eors r7, r5
    842a:   2400        movs r4, #0
    842c:   07f8        lsls r0, r7, #31
    842e:   d049        beq.n 0x84c4
    8430:   07e8        lsls r0, r5, #31
    8432:   d007        beq.n 0x8444
    8434:   2e08        cmp r6, #8
    8436:   d105        bne.n 0x8444
    8438:   b924        cbnz r4, 0x8444
    843a:   2114        movs r1, #20
    843c:   f888 1029   strb.w r1, [r8, #41]   ; 0x29
    8440:   f888 a020   strb.w sl, [r8, #32]
    8444:   f899 0014   ldrb.w r0, [r9, #20]
    8448:   2101        movs r1, #1
    844a:   40a1        lsls r1, r4
    844c:   4048        eors r0, r1
    844e:   f889 0014   strb.w r0, [r9, #20]
    8452:   f898 0029   ldrb.w r0, [r8, #41]   ; 0x29
    8456:   2803        cmp r0, #3
    8458:   d03b        beq.n 0x84d2
    845a:   dc04        bgt.n 0x8466
    845c:   2801        cmp r0, #1
    845e:   d007        beq.n 0x8470
    8460:   2802        cmp r0, #2
    8462:   d179        bne.n 0x8558
    8464:   e02f        b.n 0x84c6
    8466:   280b        cmp r0, #11
    8468:   d050        beq.n 0x850c
    846a:   280c        cmp r0, #12
    846c:   d174        bne.n 0x8558
    846e:   e055        b.n 0x851c
    8470:   07e8        lsls r0, r5, #31
    8472:   d171        bne.n 0x8558
    8474:   f898 103d   ldrb.w r1, [r8, #61]   ; 0x3d
    8478:   eb04 0bc6   add.w fp, r4, r6, lsl #3
    847c:   458b        cmp fp, r1
    847e:   d10e        bne.n 0x849e
    8480:   f7ff fca2   bl 0x7dc8                   ; call function_e_93
    8484:   2102        movs r1, #2
    8486:   f888 1029   strb.w r1, [r8, #41]   ; 0x29
    848a:   f898 003e   ldrb.w r0, [r8, #62]   ; 0x3e
    848e:   4a3a        ldr r2, [pc, #232]   ; (0x8578)
    8490:   08c3        lsrs r3, r0, #3
    8492:   eb02 1203   add.w r2, r2, r3, lsl #4
    8496:   f000 0007   and.w r0, r0, #7
    849a:   f822 a010   strh.w sl, [r2, r0, lsl #1]
    849e:   f898 103e   ldrb.w r1, [r8, #62]   ; 0x3e
    84a2:   458b        cmp fp, r1
    84a4:   d158        bne.n 0x8558
    84a6:   f7ff fc8f   bl 0x7dc8                   ; call function_e_93
    84aa:   210b        movs r1, #11
    84ac:   f888 1029   strb.w r1, [r8, #41]   ; 0x29
    84b0:   f898 003e   ldrb.w r0, [r8, #62]   ; 0x3e
    84b4:   4a30        ldr r2, [pc, #192]   ; (0x8578)
    84b6:   08c3        lsrs r3, r0, #3
    84b8:   eb02 1203   add.w r2, r2, r3, lsl #4
    84bc:   f000 0007   and.w r0, r0, #7
    84c0:   f822 a010   strh.w sl, [r2, r0, lsl #1]
    84c4:   e048        b.n 0x8558
    84c6:   f000 f9f9   bl 0x88bc
    84ca:   2801        cmp r0, #1
    84cc:   d144        bne.n 0x8558
    84ce:   2103        movs r1, #3
    84d0:   e021        b.n 0x8516
    84d2:   07e8        lsls r0, r5, #31
    84d4:   d140        bne.n 0x8558
    84d6:   eb04 00c6   add.w r0, r4, r6, lsl #3
    84da:   b2c0        uxtb r0, r0
    84dc:   283e        cmp r0, #62   ; 0x3e
    84de:   d03b        beq.n 0x8558
    84e0:   2847        cmp r0, #71   ; 0x47
    84e2:   d039        beq.n 0x8558
    84e4:   2810        cmp r0, #16
    84e6:   d037        beq.n 0x8558
    84e8:   f898 203e   ldrb.w r2, [r8, #62]   ; 0x3e
    84ec:   4641        mov r1, r8
    84ee:   4290        cmp r0, r2
    84f0:   d032        beq.n 0x8558
    84f2:   2846        cmp r0, #70   ; 0x46
    84f4:   d030        beq.n 0x8558
    84f6:   2842        cmp r0, #66   ; 0x42
    84f8:   d02e        beq.n 0x8558
    84fa:   2841        cmp r0, #65   ; 0x41
    84fc:   d02c        beq.n 0x8558
    84fe:   2840        cmp r0, #64   ; 0x40
    8500:   d02a        beq.n 0x8558
    8502:   f881 a029   strb.w sl, [r1, #41]   ; 0x29
    8506:   f888 003d   strb.w r0, [r8, #61]   ; 0x3d
    850a:   e023        b.n 0x8554
    850c:   f000 f9d6   bl 0x88bc
    8510:   2801        cmp r0, #1
    8512:   d121        bne.n 0x8558
    8514:   210c        movs r1, #12
    8516:   f888 1029   strb.w r1, [r8, #41]   ; 0x29
    851a:   e01d        b.n 0x8558
    851c:   07e8        lsls r0, r5, #31
    851e:   d11b        bne.n 0x8558
    8520:   eb04 00c6   add.w r0, r4, r6, lsl #3
    8524:   b2c0        uxtb r0, r0
    8526:   283e        cmp r0, #62   ; 0x3e
    8528:   d016        beq.n 0x8558
    852a:   2847        cmp r0, #71   ; 0x47
    852c:   d014        beq.n 0x8558
    852e:   2810        cmp r0, #16
    8530:   d012        beq.n 0x8558
    8532:   f898 203d   ldrb.w r2, [r8, #61]   ; 0x3d
    8536:   4641        mov r1, r8
    8538:   4290        cmp r0, r2
    853a:   d00d        beq.n 0x8558
    853c:   2846        cmp r0, #70   ; 0x46
    853e:   d00b        beq.n 0x8558
    8540:   2842        cmp r0, #66   ; 0x42
    8542:   d009        beq.n 0x8558
    8544:   2841        cmp r0, #65   ; 0x41
    8546:   d007        beq.n 0x8558
    8548:   2840        cmp r0, #64   ; 0x40
    854a:   d005        beq.n 0x8558
    854c:   f881 a029   strb.w sl, [r1, #41]   ; 0x29
    8550:   f888 003e   strb.w r0, [r8, #62]   ; 0x3e
    8554:   f7ff fe04   bl 0x8160                   ; call function_e_5
    8558:   1c64        adds r4, r4, #1
    855a:   087f        lsrs r7, r7, #1
    855c:   086d        lsrs r5, r5, #1
    855e:   b2e4        uxtb r4, r4
    8560:   2c08        cmp r4, #8
    8562:   f4ff af63   bcc.w 0x842c
    8566:   1c76        adds r6, r6, #1
    8568:   b2f6        uxtb r6, r6
    856a:   2e09        cmp r6, #9
    856c:   f4ff af57   bcc.w 0x841e
    8570:   e8bd 9ff0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

  0x8574:   0x20000058  ; variable_sram_e_1
  0x8578:   0x20002e2c
  0x857c:   0x20002de4  ; pointer_34

function_e_1:
  0x8580:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    8584:   4e5f        ldr r6, [pc, #380]   ; (0x8704)
    8586:   f896 0030   ldrb.w r0, [r6, #48]   ; 0x30
    858a:   bbf0        cbnz r0, 0x860a
    858c:   7a71        ldrb r1, [r6, #9]
    858e:   485e        ldr r0, [pc, #376]   ; (0x8708)
    8590:   f44f 7e7a   mov.w lr, #1000   ; 0x3e8
    8594:   2200        movs r2, #0
    8596:   b179        cbz r1, 0x85b8
    8598:   7a71        ldrb r1, [r6, #9]
    859a:   2901        cmp r1, #1
    859c:   d00c        beq.n 0x85b8
    859e:   f8a0 2052   strh.w r2, [r0, #82]   ; 0x52
    85a2:   4958        ldr r1, [pc, #352]   ; (0x8704)
    85a4:   7974        ldrb r4, [r6, #5]
    85a6:   7fcb        ldrb r3, [r1, #31]
    85a8:   f44f 71e1   mov.w r1, #450   ; 0x1c2
    85ac:   b114        cbz r4, 0x85b4
    85ae:   f896 4029   ldrb.w r4, [r6, #41]   ; 0x29
    85b2:   b18c        cbz r4, 0x85d8
    85b4:   b19b        cbz r3, 0x85de
    85b6:   e013        b.n 0x85e0
    85b8:   f8b6 1052   ldrh.w r1, [r6, #82]   ; 0x52
    85bc:   f44f 73e1   mov.w r3, #450   ; 0x1c2
    85c0:   ebc1 4101   rsb r1, r1, r1, lsl #16
    85c4:   fbb1 f1fe   udiv r1, r1, lr
    85c8:   4359        muls r1, r3
    85ca:   f64f 73ff   movw r3, #65535   ; 0xffff
    85ce:   fbb1 f1f3   udiv r1, r1, r3
    85d2:   f8a0 1052   strh.w r1, [r0, #82]   ; 0x52
    85d6:   e7e4        b.n 0x85a2
    85d8:   b913        cbnz r3, 0x85e0
    85da:   8401        strh r1, [r0, #32]
    85dc:   e000        b.n 0x85e0
    85de:   8402        strh r2, [r0, #32]
    85e0:   f8df c120   ldr.w ip, [pc, #288]   ; 0x8704
    85e4:   f10c 0c80   add.w ip, ip, #128   ; 0x80
    85e8:   f8dc 5034   ldr.w r5, [ip, #52]   ; 0x34
    85ec:   4b47        ldr r3, [pc, #284]   ; (0x870c)
    85ee:   f44f 64fa   mov.w r4, #2000   ; 0x7d0
    85f2:   b15d        cbz r5, 0x860c
    85f4:   f8dc 5034   ldr.w r5, [ip, #52]   ; 0x34
    85f8:   fbb5 f7f4   udiv r7, r5, r4
    85fc:   fb04 5517   mls r5, r4, r7, r5
    8600:   4575        cmp r5, lr
    8602:   d215        bcs.n 0x8630
    8604:   f8a0 1072   strh.w r1, [r0, #114]   ; 0x72
    8608:   e014        b.n 0x8634
    860a:   e01e        b.n 0x864a
    860c:   f8a0 2072   strh.w r2, [r0, #114]   ; 0x72
    8610:   f8a3 2072   strh.w r2, [r3, #114]   ; 0x72
    8614:   7e35        ldrb r5, [r6, #24]
    8616:   2d01        cmp r5, #1
    8618:   d0f4        beq.n 0x8604
    861a:   2d02        cmp r5, #2
    861c:   d002        beq.n 0x8624
    861e:   2d03        cmp r5, #3
    8620:   d003        beq.n 0x862a
    8622:   e007        b.n 0x8634
    8624:   f8a3 1072   strh.w r1, [r3, #114]   ; 0x72
    8628:   e004        b.n 0x8634
    862a:   f8a0 1072   strh.w r1, [r0, #114]   ; 0x72
    862e:   e7f9        b.n 0x8624
    8630:   f8a0 2072   strh.w r2, [r0, #114]   ; 0x72
    8634:   7db5        ldrb r5, [r6, #22]
    8636:   2d01        cmp r5, #1
    8638:   d013        beq.n 0x8662
    863a:   f896 4025   ldrb.w r4, [r6, #37]   ; 0x25
    863e:   2c01        cmp r4, #1
    8640:   d02f        beq.n 0x86a2
    8642:   f8a0 2084   strh.w r2, [r0, #132]   ; 0x84
    8646:   f8a3 2084   strh.w r2, [r3, #132]   ; 0x84

function_e_96:
  0x864a:   2290        movs r2, #144   ; 0x90
    864c:   492e        ldr r1, [pc, #184]   ; (0x8708)
    864e:   4830        ldr r0, [pc, #192]   ; (0x8710)
    8650:   f7fa fbb2   bl 0x2db8            ; call memcpy(0x20002cc4, 0x20002e2c, 0x90);
    8654:   e8bd 41f0   ldmia.w sp!, {r4, r5, r6, r7, r8, lr}   ; return
    8658:   2290        movs r2, #144   ; 0x90
    865a:   492c        ldr r1, [pc, #176]   ; (0x870c)
    865c:   482d        ldr r0, [pc, #180]   ; (0x8714)
    865e:   f7fa bbab   b.w 0x2db8           ; return memcpy(0x20002d54, 0x20002ebc, 0x90);
    8662:   f886 2025   strb.w r2, [r6, #37]   ; 0x25
    8666:   f8a0 2084   strh.w r2, [r0, #132]   ; 0x84
    866a:   f8a3 2084   strh.w r2, [r3, #132]   ; 0x84
    866e:   7832        ldrb r2, [r6, #0]
    8670:   2a02        cmp r2, #2
    8672:   d313        bcc.n 0x869c
    8674:   7832        ldrb r2, [r6, #0]
    8676:   2a02        cmp r2, #2
    8678:   d010        beq.n 0x869c
    867a:   7832        ldrb r2, [r6, #0]
    867c:   2a04        cmp r2, #4
    867e:   d1e4        bne.n 0x864a
    8680:   f8dc 2024   ldr.w r2, [ip, #36]   ; 0x24
    8684:   4572        cmp r2, lr
    8686:   d901        bls.n 0x868c
    8688:   f8a0 1084   strh.w r1, [r0, #132]   ; 0x84
    868c:   f8dc 0024   ldr.w r0, [ip, #36]   ; 0x24
    8690:   42a0        cmp r0, r4
    8692:   d9da        bls.n 0x864a
    8694:   2001        movs r0, #1
    8696:   f8cc 0024   str.w r0, [ip, #36]   ; 0x24
    869a:   e7d6        b.n 0x864a
    869c:   f8a0 1084   strh.w r1, [r0, #132]   ; 0x84
    86a0:   e7d3        b.n 0x864a
    86a2:   f8dc 4024   ldr.w r4, [ip, #36]   ; 0x24
    86a6:   f024 447f   bic.w r4, r4, #4278190080   ; 0xff000000
    86aa:   f5b4 7fc8   cmp.w r4, #400   ; 0x190
    86ae:   d204        bcs.n 0x86ba
    86b0:   f8a0 1084   strh.w r1, [r0, #132]   ; 0x84
    86b4:   f8a3 1084   strh.w r1, [r3, #132]   ; 0x84
    86b8:   e7c7        b.n 0x864a
    86ba:   f8a0 2084   strh.w r2, [r0, #132]   ; 0x84
    86be:   f8a3 2084   strh.w r2, [r3, #132]   ; 0x84
    86c2:   f8dc 0024   ldr.w r0, [ip, #36]   ; 0x24
    86c6:   f020 407f   bic.w r0, r0, #4278190080   ; 0xff000000
    86ca:   f5b0 7f48   cmp.w r0, #800   ; 0x320
    86ce:   d9bc        bls.n 0x864a
    86d0:   f8dc 0024   ldr.w r0, [ip, #36]   ; 0x24
    86d4:   f000 4070   and.w r0, r0, #4026531840   ; 0xf0000000
    86d8:   f8cc 0024   str.w r0, [ip, #36]   ; 0x24
    86dc:   f8dc 0024   ldr.w r0, [ip, #36]   ; 0x24
    86e0:   f100 5080   add.w r0, r0, #268435456   ; 0x10000000
    86e4:   1c40        adds r0, r0, #1
    86e6:   f8cc 0024   str.w r0, [ip, #36]   ; 0x24
    86ea:   f8dc 0024   ldr.w r0, [ip, #36]   ; 0x24
    86ee:   f000 4070   and.w r0, r0, #4026531840   ; 0xf0000000
    86f2:   f1b0 4f80   cmp.w r0, #1073741824   ; 0x40000000
    86f6:   d9a8        bls.n 0x864a
    86f8:   f8cc 2024   str.w r2, [ip, #36]   ; 0x24
    86fc:   f886 2025   strb.w r2, [r6, #37]   ; 0x25
    8700:   e7a3        b.n 0x864a

    8702:   0000
  0x8704:   0x20000058  ; variable_sram_e_1
  0x8708:   0x20002e2c
  0x870c:   0x20002ebc
  0x8710:   0x20002cc4
  0x8714:   0x20002d54

function_e_12:
    ; r0 =
    ; r1 =
    ; r2 =
  0x8718:   b510        push {r4, lr}
    871a:   eb02 02c1   add.w r2, r2, r1, lsl #3    ; r2 = r2 + (r1 << 3)
    871e:   4b19        ldr r3, [pc, #100]          ; r3 = 0x20000058
    8720:   2a10        cmp r2, #16                 ; if(r2 == 0x100) branch to 0x873e
    8722:   d00c        beq.n 0x873e
    8724:   f893 102c   ldrb.w r1, [r3, #44]   ; 0x2c
    8728:   2901        cmp r1, #1
    872a:   d107        bne.n 0x873c                ; if(*(char *)(0x20000058 + 0x2c) == 1) return 1
    872c:   4b16        ldr r3, [pc, #88]           ; r3 = 0x8b70 = data_4
    872e:   2100        movs r1, #0
loop:
    8730:   5c5c        ldrb r4, [r3, r1]           ; if(r2 == *(char *)(data_4 + r1)) branch 0x8778
    8732:   42a2        cmp r2, r4
    8734:   d120        bne.n 0x8778

    8736:   4814        ldr r0, [pc, #80]   ; (0x8788)
    8738:   1d00        adds r0, r0, #4
    873a:   5c40        ldrb r0, [r0, r1]
    873c:   bd10        pop {r4, pc}            ; return *(0x8b74 + r1);

    873e:   f893 1021   ldrb.w r1, [r3, #33]    ; r1 = *(char *)(0x20000058 + 0x21)
    8742:   2901        cmp r1, #1
    8744:   d00b        beq.n 0x875e            ; if(r1 == 1), store a 0 and return 232;
    8746:   f893 1024   ldrb.w r1, [r3, #36]   ; 0x24
    874a:   29ff        cmp r1, #255   ; 0xff
    874c:   d00c        beq.n 0x8768
    874e:   7e1a        ldrb r2, [r3, #24]
    8750:   b152        cbz r2, 0x8768          ; if(r2 == 0) branch 0x8768

    8752:   2912        cmp r1, #18
    8754:   d0f2        beq.n 0x873c
    8756:   2913        cmp r1, #19
    8758:   d0f0        beq.n 0x873c            ; if(r1 == 18 || r1 == 19) branch 0x873c;
    875a:   2000        movs r0, #0
    875c:   bd10        pop {r4, pc}            ; return 0;

    875e:   2000        movs r0, #0
    8760:   f883 0021   strb.w r0, [r3, #33]   ; *(char *)(0x20000058 + 0x21) = 0;
    8764:   20e8        movs r0, #232   ; 0xe8
    8766:   bd10        pop {r4, pc}            ; return 238

    8768:   f893 0026   ldrb.w r0, [r3, #38]   ; 0x26
    876c:   2802        cmp r0, #2
    876e:   d001        beq.n 0x8774            ; if(r0 != 2) return 57;
    8770:   2039        movs r0, #57   ; 0x39
    8772:   bd10        pop {r4, pc}

    8774:   202a        movs r0, #42   ; 0x2a
    8776:   bd10        pop {r4, pc}            ; return 42;

    8778:   1c49        adds r1, r1, #1         ; r1++
    877a:   b2c9        uxtb r1, r1             ; r1 &= 0xff
    877c:   2904        cmp r1, #4
    877e:   d3d7        bcc.n 0x8730            ; if(r1 >= 4) branch to 0x8730
    8780:   bd10        pop {r4, pc}            ; return what was passed in in r0.

  0x8782:   0000
  0x8784:   0x20000058  ; variable_sram_e_1
  0x8788:   0x8b70      ; data_4

function_e_13:
    ; this function is very similar to the one above (0x8718)
  0x878c:   b510        push {r4, lr}
    878e:   eb02 02c1   add.w r2, r2, r1, lsl #3
    8792:   4b18        ldr r3, [pc, #96]   ; (0x87f4)
    8794:   2a10        cmp r2, #16
    8796:   d00c        beq.n 0x87b2
    8798:   f893 102c   ldrb.w r1, [r3, #44]   ; 0x2c
    879c:   2901        cmp r1, #1
    879e:   d107        bne.n 0x87b0
    87a0:   4b15        ldr r3, [pc, #84]   ; (0x87f8)
    87a2:   2100        movs r1, #0
    87a4:   5c5c        ldrb r4, [r3, r1]
    87a6:   42a2        cmp r2, r4
    87a8:   d11f        bne.n 0x87ea
    87aa:   4813        ldr r0, [pc, #76]   ; (0x87f8)
    87ac:   1d00        adds r0, r0, #4
    87ae:   5c40        ldrb r0, [r0, r1]
    87b0:   bd10        pop {r4, pc}
    87b2:   7fd9        ldrb r1, [r3, #31]
    87b4:   2901        cmp r1, #1
    87b6:   d00b        beq.n 0x87d0
    87b8:   f893 1024   ldrb.w r1, [r3, #36]   ; 0x24
    87bc:   29ff        cmp r1, #255   ; 0xff
    87be:   d00c        beq.n 0x87da
    87c0:   7e1a        ldrb r2, [r3, #24]
    87c2:   b152        cbz r2, 0x87da
    87c4:   2912        cmp r1, #18
    87c6:   d0f3        beq.n 0x87b0
    87c8:   2913        cmp r1, #19
    87ca:   d0f1        beq.n 0x87b0
    87cc:   2000        movs r0, #0
    87ce:   bd10        pop {r4, pc}
    87d0:   2001        movs r0, #1
    87d2:   f883 0021   strb.w r0, [r3, #33]   ; 0x21
    87d6:   20e8        movs r0, #232   ; 0xe8
    87d8:   bd10        pop {r4, pc}
    87da:   f893 0026   ldrb.w r0, [r3, #38]   ; 0x26
    87de:   2802        cmp r0, #2
    87e0:   d001        beq.n 0x87e6
    87e2:   2039        movs r0, #57   ; 0x39
    87e4:   bd10        pop {r4, pc}
    87e6:   202a        movs r0, #42   ; 0x2a
    87e8:   bd10        pop {r4, pc}
    87ea:   1c49        adds r1, r1, #1
    87ec:   b2c9        uxtb r1, r1
    87ee:   2904        cmp r1, #4
    87f0:   d3d8        bcc.n 0x87a4
    87f2:   bd10        pop {r4, pc}

  0x87f4:   0x20000058  ; variable_sram_e_1
  0x87f8:   0x8b70      ; data_4

function_e_15:
  0x87fc:   e92d 41f0   stmdb sp!, {r4, r5, r6, r7, r8, lr}
    8800:   4d21        ldr r5, [pc, #132]   ; (0x8888)
    8802:   2001        movs r0, #1
    8804:   4e21        ldr r6, [pc, #132]   ; (0x888c)
    8806:   f895 1030   ldrb.w r1, [r5, #48]   ; 0x30
    880a:   4f21        ldr r7, [pc, #132]   ; (0x8890)
    880c:   1e89        subs r1, r1, #2
    880e:   f44f 747a   mov.w r4, #1000   ; 0x3e8
    8812:   f64f 78ff   movw r8, #65535   ; 0xffff
    8816:   2905        cmp r1, #5
    8818:   d224        bcs.n 0x8864
    881a:   e8df f001   tbb [pc, r1]
    881e:   0503        lsls r3, r0, #20
    8820:   250b        movs r5, #11
    8822:   002b        movs r3, r5
    8824:   2164        movs r1, #100   ; 0x64
    8826:   e001        b.n 0x882c
    8828:   f44f 71fa   mov.w r1, #500   ; 0x1f4
    882c:   f105 0538   add.w r5, r5, #56   ; 0x38
    8830:   8229        strh r1, [r5, #16]
    8832:   e002        b.n 0x883a
    8834:   f105 0538   add.w r5, r5, #56   ; 0x38
    8838:   822c        strh r4, [r5, #16]
    883a:   7068        strb r0, [r5, #1]
    883c:   f04f 0001   mov.w r0, #1
    8840:   f7fb fba6   bl 0x3f90                   ; call function_e_18
    8844:   8a28        ldrh r0, [r5, #16]
    8846:   f44f 71e1   mov.w r1, #450   ; 0x1c2
    884a:   ebc0 4000   rsb r0, r0, r0, lsl #16
    884e:   fbb0 f0f4   udiv r0, r0, r4
    8852:   4348        muls r0, r1
    8854:   fbb0 f0f8   udiv r0, r0, r8
    8858:   f826 0f72   strh.w r0, [r6, #114]!
    885c:   f827 0f72   strh.w r0, [r7, #114]!
    8860:   8270        strh r0, [r6, #18]
    8862:   8278        strh r0, [r7, #18]
    8864:   e8bd 81f0   ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
    8868:   f105 0538   add.w r5, r5, #56   ; 0x38
    886c:   f04f 0005   mov.w r0, #5
    8870:   822c        strh r4, [r5, #16]
    8872:   e004        b.n 0x887e
    8874:   f105 0538   add.w r5, r5, #56   ; 0x38
    8878:   f04f 0006   mov.w r0, #6
    887c:   822c        strh r4, [r5, #16]
    887e:   7068        strb r0, [r5, #1]
    8880:   e8bd 41f0   ldmia.w sp!, {r4, r5, r6, r7, r8, lr}

    ; ????
    8884:   f7fb bb84   b.w 0x3f90                  ; call function_e_18

  0x8888:   0x20000058  ; variable_sram_e_1
  0x888c:   0x20002e2c
  0x8890:   0x20002ebc

function_e_16:
  0x8894:   b500        push {lr}
    8896:   4908        ldr r1, [pc, #32]   ; (0x88b8)
    8898:   2000        movs r0, #0
    889a:   180a        adds r2, r1, r0
    889c:   7d12        ldrb r2, [r2, #20]
    889e:   2aff        cmp r2, #255   ; 0xff
    88a0:   d001        beq.n 0x88a6
    88a2:   2000        movs r0, #0
    88a4:   bd00        pop {pc}
    88a6:   1c40        adds r0, r0, #1
    88a8:   b2c0        uxtb r0, r0
    88aa:   2809        cmp r0, #9
    88ac:   d3f5        bcc.n 0x889a
    88ae:   f7fe ff67   bl 0x7780               ; call function_e_83
    88b2:   2001        movs r0, #1
    88b4:   bd00        pop {pc}
    88b6:   0000

  0x88b8:   0x20002de4  ; pointer_34

function_80:
  0x88bc:   4a0a        ldr r2, [pc, #40]   ; (0x88e8)
    88be:   2000        movs r0, #0
    88c0:   21b8        movs r1, #184   ; 0xb8
    88c2:   7a93        ldrb r3, [r2, #10]
    88c4:   4399        bics r1, r3
    88c6:   e001        b.n 0x88cc
    88c8:   2808        cmp r0, #8
    88ca:   d005        beq.n 0x88d8
    88cc:   1813        adds r3, r2, r0
    88ce:   789b        ldrb r3, [r3, #2]
    88d0:   2bff        cmp r3, #255   ; 0xff
    88d2:   d003        beq.n 0x88dc
    88d4:   2000        movs r0, #0
    88d6:   4770        bx lr
    88d8:   2900        cmp r1, #0
    88da:   d1fb        bne.n 0x88d4
  0x88dc:   1c40        adds r0, r0, #1
    88de:   b2c0        uxtb r0, r0
    88e0:   2809        cmp r0, #9
    88e2:   d3f1        bcc.n 0x88c8
    88e4:   2001        movs r0, #1
    88e6:   4770        bx lr

  0x88e8:   0x20002de4  ; pointer_34

function_26:
  0x88ec:   4910        ldr r1, [pc, #64]   ; (0x8930)
    88ee:   b510        push {r4, lr}
    88f0:   f891 203e   ldrb.w r2, [r1, #62]   ; 0x3e
    88f4:   2000        movs r0, #0
    88f6:   4c0d        ldr r4, [pc, #52]   ; (0x892c)
    88f8:   2301        movs r3, #1
    88fa:   f002 0107   and.w r1, r2, #7
    88fe:   408b        lsls r3, r1
    8900:   1821        adds r1, r4, r0
    8902:   2808        cmp r0, #8
    8904:   7889        ldrb r1, [r1, #2]
    8906:   d101        bne.n 0x890c
    8908:   f041 0147   orr.w r1, r1, #71   ; 0x47
    890c:   ebb0 0fd2   cmp.w r0, r2, lsr #3
    8910:   d101        bne.n 0x8916
    8912:   4319        orrs r1, r3
    8914:   b2c9        uxtb r1, r1
    8916:   29ff        cmp r1, #255   ; 0xff
    8918:   d001        beq.n 0x891e
    891a:   2000        movs r0, #0
    891c:   bd10        pop {r4, pc}
    891e:   1c40        adds r0, r0, #1
    8920:   b2c0        uxtb r0, r0
    8922:   2809        cmp r0, #9
    8924:   d3ec        bcc.n 0x8900
    8926:   2001        movs r0, #1
    8928:   bd10        pop {r4, pc}
    892a:   0000

  0x892c:   0x20002de4  ; pointer_34
  0x8930:   0x20000058  ; variable_sram_e_1

function_e_97:
  0x8934:   e92d 47f0   stmdb sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8938:   1a0c        subs r4, r1, r0
    893a:   4607        mov r7, r0
    893c:   4616        mov r6, r2
    893e:   1c64        adds r4, r4, #1
    8940:   f7fe fc00   bl 0x7144               ; call watchdog_reload_timer
    8944:   f3c7 050b   ubfx r5, r7, #0, #12
    8948:   1b78        subs r0, r7, r5
    894a:   4680        mov r8, r0
    894c:   f44f 5980   mov.w r9, #4096         ; r9 = 0x1000
    8950:   4601        mov r1, r0
    8952:   464a        mov r2, r9
    8954:   480f        ldr r0, [pc, #60]       ; r0 = (0x8994)
    8956:   f7fc fb37   bl 0x4fc8               ; call spi_flash_read_data
    895a:   f7fe fbf3   bl 0x7144               ; call watchdog_reload_timer
    895e:   4640        mov r0, r8
    8960:   f7fc fb9e   bl 0x50a0               ; call function_e_40
    8964:   f7fe fbee   bl 0x7144               ; call watchdog_reload_timer
    8968:   490a        ldr r1, [pc, #40]       ; r1 = (0x8994)
    896a:   2000        movs r0, #0
    896c:   f501 5280   add.w r2, r1, #4096     ; 0x1000
    8970:   e004        b.n 0x897c
  0x8972:   1983        adds r3, r0, r6
    8974:   182f        adds r7, r5, r0
    8976:   5cd3        ldrb r3, [r2, r3]
    8978:   55cb        strb r3, [r1, r7]
    897a:   1c40        adds r0, r0, #1
    897c:   42a0        cmp r0, r4
    897e:   d3f8        bcc.n 0x8972
    8980:   464a        mov r2, r9
    8982:   4641        mov r1, r8
    8984:   4803        ldr r0, [pc, #12]       ; r0 = (0x8994)
    8986:   f7fc fbb3   bl 0x50f0               ; call function_27
    898a:   e8bd 47f0   ldmia.w sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    898e:   f7fe bbd9   b.w 0x7144              ; call watchdog_reload_timer
    8992:   0000

  0x8994:   0x20000cba

.data:

usb_report0_desc:
    ; UBS hid report descriptor for interface 0
  0x8998:
    ; 0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    ; 0x09, 0x06,        // Usage (Keyboard)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
    ; 0x19, 0xE0,        //   Usage Minimum (0xE0)
    ; 0x29, 0xE7,        //   Usage Maximum (0xE7)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x25, 0x01,        //   Logical Maximum (1)
    ; 0x75, 0x01,        //   Report Size (1)
    ; 0x95, 0x08,        //   Report Count (8)
    ; 0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0x01,        //   Report Count (1)
    ; 0x75, 0x08,        //   Report Size (8)
    ; 0x81, 0x03,        //   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0x03,        //   Report Count (3)
    ; 0x75, 0x01,        //   Report Size (1)
    ; 0x05, 0x08,        //   Usage Page (LEDs)
    ; 0x19, 0x01,        //   Usage Minimum (Num Lock)
    ; 0x29, 0x03,        //   Usage Maximum (Scroll Lock)
    ; 0x91, 0x02,        //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    ; 0x95, 0x01,        //   Report Count (1)
    ; 0x75, 0x05,        //   Report Size (5)
    ; 0x91, 0x03,        //   Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    ; 0x95, 0x06,        //   Report Count (6)
    ; 0x75, 0x08,        //   Report Size (8)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x26, 0xA4, 0x00,  //   Logical Maximum (164)
    ; 0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
    ; 0x19, 0x00,        //   Usage Minimum (0x00)
    ; 0x29, 0xA4,        //   Usage Maximum (0xA4)
    ; 0x81, 0x00,        //   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0xC0,              // End Collection

usb_report1_desc:
    ; USB hid report descriptor for interface 1
  0x89d8:
    ; 0x06, 0x00, 0xFF,  // Usage Page (Vendor Defined 0xFF00)
    ; 0x09, 0x01,        // Usage (0x01)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x09, 0x02,        //   Usage (0x02)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x26, 0xFF, 0x00,  //   Logical Maximum (255)
    ; 0x75, 0x08,        //   Report Size (8)
    ; 0x95, 0x40,        //   Report Count (64)
    ; 0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x09, 0x03,        //   Usage (0x03)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x26, 0xFF, 0x00,  //   Logical Maximum (255)
    ; 0x75, 0x08,        //   Report Size (8)
    ; 0x95, 0x40,        //   Report Count (64)
    ; 0x91, 0x02,        //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    ; 0xC0,              // End Collection

    89fa:   00 00

usb_report2_desc:
    ; USB hid report descriptor for interface 2
  0x89fc:
    ; 0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    ; 0x09, 0x80,        // Usage (Sys Control)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x85, 0x01,        //   Report ID (1)
    ; 0x19, 0x81,        //   Usage Minimum (Sys Power Down)
    ; 0x29, 0x83,        //   Usage Maximum (Sys Wake Up)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x25, 0x01,        //   Logical Maximum (1)
    ; 0x95, 0x03,        //   Report Count (3)
    ; 0x75, 0x01,        //   Report Size (1)
    ; 0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0x01,        //   Report Count (1)
    ; 0x75, 0x05,        //   Report Size (5)
    ; 0x81, 0x01,        //   Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0xC0,              // End Collection
    ; 0x05, 0x0C,        // Usage Page (Consumer)
    ; 0x09, 0x01,        // Usage (Consumer Control)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x85, 0x02,        //   Report ID (2)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x25, 0x01,        //   Logical Maximum (1)
    ; 0x95, 0x12,        //   Report Count (18)
    ; 0x75, 0x01,        //   Report Size (1)
    ; 0x0A, 0x83, 0x01,  //   Usage (AL Consumer Control Configuration)
    ; 0x0A, 0x8A, 0x01,  //   Usage (AL Email Reader)
    ; 0x0A, 0x92, 0x01,  //   Usage (AL Calculator)
    ; 0x0A, 0x94, 0x01,  //   Usage (AL Local Machine Browser)
    ; 0x09, 0xCD,        //   Usage (Play/Pause)
    ; 0x09, 0xB7,        //   Usage (Stop)
    ; 0x09, 0xB6,        //   Usage (Scan Previous Track)
    ; 0x09, 0xB5,        //   Usage (Scan Next Track)
    ; 0x09, 0xE2,        //   Usage (Mute)
    ; 0x09, 0xEA,        //   Usage (Volume Decrement)
    ; 0x09, 0xE9,        //   Usage (Volume Increment)
    ; 0x0A, 0x21, 0x02,  //   Usage (AC Search)
    ; 0x0A, 0x23, 0x02,  //   Usage (AC Home)
    ; 0x0A, 0x24, 0x02,  //   Usage (AC Back)
    ; 0x0A, 0x25, 0x02,  //   Usage (AC Forward)
    ; 0x0A, 0x26, 0x02,  //   Usage (AC Stop)
    ; 0x0A, 0x27, 0x02,  //   Usage (AC Refresh)
    ; 0x0A, 0x2A, 0x02,  //   Usage (AC Bookmarks)
    ; 0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0x01,        //   Report Count (1)
    ; 0x75, 0x0E,        //   Report Size (14)
    ; 0x81, 0x01,        //   Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0xC0,              // End Collection
    ; 0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    ; 0x09, 0x02,        // Usage (Mouse)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x09, 0x01,        //   Usage (Pointer)
    ; 0xA1, 0x00,        //   Collection (Physical)
    ; 0x85, 0x03,        //     Report ID (3)
    ; 0x05, 0x09,        //     Usage Page (Button)
    ; 0x19, 0x01,        //     Usage Minimum (0x01)
    ; 0x29, 0x03,        //     Usage Maximum (0x03)
    ; 0x15, 0x00,        //     Logical Minimum (0)
    ; 0x25, 0x01,        //     Logical Maximum (1)
    ; 0x75, 0x01,        //     Report Size (1)
    ; 0x95, 0x03,        //     Report Count (3)
    ; 0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0x01,        //     Report Count (1)
    ; 0x75, 0x05,        //     Report Size (5)
    ; 0x81, 0x01,        //     Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
    ; 0x09, 0x30,        //     Usage (X)
    ; 0x09, 0x31,        //     Usage (Y)
    ; 0x15, 0x81,        //     Logical Minimum (129)
    ; 0x25, 0x7F,        //     Logical Maximum (127)
    ; 0x75, 0x08,        //     Report Size (8)
    ; 0x95, 0x02,        //     Report Count (2)
    ; 0x81, 0x06,        //     Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x09, 0x38,        //     Usage (Wheel)
    ; 0x15, 0x81,        //     Logical Minimum (129)
    ; 0x25, 0x7F,        //     Logical Maximum (127)
    ; 0x75, 0x08,        //     Report Size (8)
    ; 0x95, 0x01,        //     Report Count (1)
    ; 0x81, 0x06,        //     Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
    ; 0xC0,              //   End Collection
    ; 0xC0,              // End Collection
    ; 0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    ; 0x09, 0x06,        // Usage (Keyboard)
    ; 0xA1, 0x01,        // Collection (Application)
    ; 0x85, 0x04,        //   Report ID (4)
    ; 0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
    ; 0x95, 0x01,        //   Report Count (1)
    ; 0x75, 0x08,        //   Report Size (8)
    ; 0x81, 0x03,        //   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0x95, 0xE8,        //   Report Count (232)
    ; 0x75, 0x01,        //   Report Size (1)
    ; 0x15, 0x00,        //   Logical Minimum (0)
    ; 0x25, 0x01,        //   Logical Maximum (1)
    ; 0x05, 0x07,        //   Usage Page (Kbrd/Keypad)
    ; 0x19, 0x00,        //   Usage Minimum (0x00)
    ; 0x29, 0xE7,        //   Usage Maximum (0xE7)
    ; 0x81, 0x00,        //   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
    ; 0xC0,              // End Collection

    8ac2:   00 00

usb_device_desc:
    ; USB device descriptor
  0x8ac4:
    ; 0x12,        // bLength
    ; 0x01,        // bDescriptorType (Device)
    ; 0x10, 0x01,  // bcdUSB 1.10
    ; 0x00,        // bDeviceClass (Use class information in the Interface Descriptors)
    ; 0x00,        // bDeviceSubClass
    ; 0x00,        // bDeviceProtocol
    ; 0x40,        // bMaxPacketSize0 64
    ; 0xD9, 0x04,  // idVendor 0x04D9
    ; 0x41, 0x01,  // idProduct 0x0141
    ; 0x17, 0x01,  // bcdDevice 2.17
    ; 0x00,        // iManufacturer (String Index)
    ; 0x02,        // iProduct (String Index)
    ; 0x00,        // iSerialNumber (String Index)
    ; 0x01,        // bNumConfigurations 1

    8ad6:   00 00

usb_config_desc:
    ; USB configuration 1 descriptor
  0x8ad8:
    ; 0x09,        //   bLength
    ; 0x02,        //   bDescriptorType (Configuration)
    ; 0x5B, 0x00,  //   wTotalLength 91
    ; 0x03,        //   bNumInterfaces 3
    ; 0x01,        //   bConfigurationValue
    ; 0x00,        //   iConfiguration (String Index)
    ; 0xA0,        //   bmAttributes Remote Wakeup
    ; 0x32,        //   bMaxPower 100mA

usb_interface0_desc:
    ; USB interface 0 descriptor
  0x8ae1:
    ; 0x09,        //   bLength
    ; 0x04,        //   bDescriptorType (Interface)
    ; 0x00,        //   bInterfaceNumber 0
    ; 0x00,        //   bAlternateSetting
    ; 0x01,        //   bNumEndpoints 1
    ; 0x03,        //   bInterfaceClass
    ; 0x01,        //   bInterfaceSubClass
    ; 0x01,        //   bInterfaceProtocol
    ; 0x00,        //   iInterface (String Index)

usb_hid0_desc:
    ; USB hid descriptor for interface 0
  0x8aea:
    ; 0x09,        // bLength
    ; 0x21,        // bDescriptorType (HID)
    ; 0x11, 0x01,  // bcdHID 1.11
    ; 0x00,        // bCountryCode
    ; 0x01,        // bNumDescriptors
    ; 0x22,        // bDescriptorType[0] (HID)
    ; 0x40, 0x00,  // wDescriptorLength[0] 64

usb_endpoint1_desc:
    ; USB endpoint 1 (in) descriptor for interface 0
  0x8af3:
    ; 0x07,        // bLength
    ; 0x05,        // bDescriptorType (Endpoint)
    ; 0x81,        // bEndpointAddress (IN/D2H)
    ; 0x03,        // bmAttributes (Interrupt)
    ; 0x08, 0x00,  // wMaxPacketSize 8
    ; 0x01,        // bInterval 1 (unit depends on device speed)

usb_interface1_desc:
    ; USB interface 1 descriptor
  0x8afa:
    ; 0x09,        // bLength
    ; 0x04,        // bDescriptorType (Interface)
    ; 0x01,        // bInterfaceNumber 1
    ; 0x00,        // bAlternateSetting
    ; 0x02,        // bNumEndpoints 2
    ; 0x03,        // bInterfaceClass
    ; 0x00,        // bInterfaceSubClass
    ; 0x00,        // bInterfaceProtocol
    ; 0x00,        // iInterface (String Index)

usb_hid1_desc:
    ; USB hid descriptor for interface 1
  0x8b03:
    ; 0x09,        // bLength
    ; 0x21,        // bDescriptorType (HID)
    ; 0x11, 0x01,  // bcdHID 1.11
    ; 0x00,        // bCountryCode
    ; 0x01,        // bNumDescriptors
    ; 0x22,        // bDescriptorType[0] (HID)
    ; 0x22, 0x00,  // wDescriptorLength[0] 34

usb_endpoint3_desc:
    ; USB endpoint 3 (in) descriptor for interface 1
  0x8b0c:
    ; 0x07,        // bLength
    ; 0x05,        // bDescriptorType (Endpoint)
    ; 0x83,        // bEndpointAddress (IN/D2H)
    ; 0x03,        // bmAttributes (Interrupt)
    ; 0x40, 0x00,  // wMaxPacketSize 64
    ; 0x01,        // bInterval 1 (unit depends on device speed)

usb_endpoint4_desc:
    ; USB endpoint 4 (out) descriptor for interface 1
  0x8b13:
    ; 0x07,        // bLength
    ; 0x05,        // bDescriptorType (Endpoint)
    ; 0x04,        // bEndpointAddress (OUT/H2D)
    ; 0x03,        // bmAttributes (Interrupt)
    ; 0x40, 0x00,  // wMaxPacketSize 64
    ; 0x01,        // bInterval 1 (unit depends on device speed)

usb_interface2_desc:
    ; USB interface 2 descriptor
  0x8b1a:
    ; 0x09,        // bLength
    ; 0x04,        // bDescriptorType (Interface)
    ; 0x02,        // bInterfaceNumber 2
    ; 0x00,        // bAlternateSetting
    ; 0x01,        // bNumEndpoints 1
    ; 0x03,        // bInterfaceClass
    ; 0x00,        // bInterfaceSubClass
    ; 0x00,        // bInterfaceProtocol
    ; 0x00,        // iInterface (String Index)

usb hid2_desc:
    ; USB hid descriptor for interface 2
  0x8b23:
    ; 0x09,        // bLength
    ; 0x21,        // bDescriptorType (HID)
    ; 0x11, 0x01,  // bcdHID 1.11
    ; 0x00,        // bCountryCode
    ; 0x01,        // bNumDescriptors
    ; 0x22,        // bDescriptorType[0] (HID)
    ; 0xC6, 0x00,  // wDescriptorLength[0] 198

usb_endpoint2_desc:
    ; USB endpoint in descriptor for interface 2
  0x8b2c:
    ; 0x07,        // bLength
    ; 0x05,        // bDescriptorType (Endpoint)
    ; 0x82,        // bEndpointAddress (IN/D2H)
    ; 0x03,        // bmAttributes (Interrupt)
    ; 0x40, 0x00,  // wMaxPacketSize 64
    ; 0x01,        // bInterval 1 (unit depends on device speed)

    8b33:   00

usb_str0_desc:
    ; USB string descriptor 0 (LANGID 0x0409 - English US)
  0x8b34:
    ; 0x04,        // bLength
    ; 0x03,        // bDescriptorType (String)
    ; 0x09, 0x04,

usb_str1_desc:
    ; USB string descriptor 1 "USB Keyboard"
  0x8b38:
    ; 0x1A,        // bLength
    ; 0x03,        // bDescriptorType (String)
    ; 0x55, 0x00, 0x53, 0x00, 0x42, 0x00, 0x20, 0x00,
    ; 0x4B, 0x00, 0x65, 0x00, 0x79, 0x00, 0x62, 0x00,
    ; 0x6F, 0x00, 0x61, 0x00, 0x72, 0x00, 0x64, 0x00,

update_handlers:
  0x8b54:   79 71 00 00     0x7179  (flash_erase_cmd)
    8b58:   b9 71 00 00     0x71b9  (flash_read_write_cmd)
    8b5c:   59 71 00 00     0x7159  (flash_crc_cmd)
    8b60:   9d 72 00 00     0x729d  (update_start_cmd)
    8b64:   69 30 00 00     0x3069  (reset_cmd)
    8b68:   55 71 00 00     0x7155  (disconnect_cmd)
    8b6c:   71 59 00 00     0x5971  (debug_cmd)

data_4:
  0x8b70:   3e 47 45 44
    8b74:   52 4f 51 50
    8b78:   00 00 00 00
    8b7c:   00 00 00 01
    8b80:   02 03 04 05
    8b84:   06 07 07 00
    8b88:   00 00 00 00
    8b8c:   00 00 04 04
    8b90:   04 04 05 04
    8b94:   01 05 05 05
    8b98:   05 06 02 06
    8b9c:   06 06 06 03
    8ba0:   03 07 07 07
    8ba4:   02 00 01 03
    8ba8:   08 02 02 02
    8bac:   01 01 01 03
    8bb0:   03 03

data_8:
  0x8bb2    07 01
    8bb4:   02 03 04 05
    8bb8:   06 07 03 04
    8bbc:   05 06 02 07
    8bc0:   07 03 04 05
    8bc4:   06 02 07 03
    8bc8:   04 05 06 01
    8bcc:   06 03 04 05
    8bd0:   06 00 06 07
    8bd4:   07 02 03 04
    8bd8:   01 02 03 02
    8bdc:   03 04 29 3a
    8be0:   3b 3c 3d 3e
    8be4:   3f 40 41 42
    8be8:   43 44 45 4c
    8bec:   4b 52 4e 46
    8bf0:   47 48 50 51
    8bf4:   4f 49 4c 65
    8bf8:   4d c1 c2 c3
    8bfc:   4a 35 ee c0
    8c00:   e4 f5 f6 f4
    8c04:   f2 f0 f3 c5
    8c08:   c6 c4 29 3a
    8c0c:   3b 3c 3d 3e
    8c10:   3f 40 41 42
    8c14:   43 44 45 4c
    8c18:   4b 52 4e 46
    8c1c:   47 48 50 51
    8c20:   4f 49 4c 65
    8c24:   4d 00 00 00
    8c28:   4a 35 ee 00
    8c2c:   00 f5 f6 f4
    8c30:   f2 f0 f3 00
    8c34:   00 00

data_13:
  0x8c36:   07 00
    8c38:   00 00 00 00
    8c3c:   00 00 04 04
    8c40:   04 04 05 04
    8c44:   01 05 05 05
    8c48:   05 06 02 06
    8c4c:   06 06 06 03
    8c50:   03 02 00 01
    8c54:   01 02 03 02
    8c58:   02 02 01 01
    8c5c:   01 03 03 03
    8c60:   07 01 02 03
    8c64:   04 05 06 07
    8c68:   03 04 05 06
    8c6c:   02 07 07 03
    8c70:   04 05 06 02
    8c74:   07 03 04 05
    8c78:   06 01 06 06
    8c7c:   00 06 05 05
    8c80:   05 02 03 04
    8c84:   01 02 03 02
    8c88:   03 04 29 3a
    8c8c:   3b 3c 3d 3e
    8c90:   3f 40 41 42
    8c94:   43 44 45 4c
    8c98:   4b 52 4e 46
    8c9c:   47 48 50 51
    8ca0:   4f 49 4c 65
    8ca4:   4d 4a 35 ee
    8ca8:   17 0a 05 f5
    8cac:   f6 f4 f2 f0
    8cb0:   f3 c5 c6 c4
    8cb4:   29 3a 3b 3c
    8cb8:   3d 3e 3f 40
    8cbc:   41 42 43 44
    8cc0:   45 4c 4b 52
    8cc4:   4e 46 47 48
    8cc8:   50 51 4f 49
    8ccc:   4c 65 4d 4a
    8cd0:   35 ee 00 00
    8cd4:   00 f5 f6 f4
    8cd8:   f2 f0 f3 00
    8cdc:   00 00 01 00
    8ce0:   00 00 00 00
    8ce4:   00 00 00 01
    8ce8:   00 00 00 00
    8cec:   00 00 01 00
    8cf0:   00 00 00 00
    8cf4:   00 00 00 00
    8cf8:   00 00 00 00
    8cfc:   00 01 00 00
    8d00:   00 00 00 00
    8d04:   00 01 00 00
    8d08:   00 00 00 00
    8d0c:   00 00 00 00
    8d10:   00 00 00 00
    8d14:   00 00 00 00
    8d18:   00 00 00 00
    8d1c:   00 00 00 00
    8d20:   00 00 00 00
    8d24:   00 00 07 01
    8d28:   02 03 04 05
    8d2c:   06 07 03 04
    8d30:   05 06 02 07

data_15:
  0x8d34:   07 00 00 00
    8d38:   00 00 00 00
    8d3c:   04 04 04 04
    8d40:   05 04 00 00

data_3:
  0x8d44:   00 00 00 00
    8d48:   00 20 02 00
    8d4c:   00 40 04 00

data_16:
  0x8d50:   00 10 00 00
    8d54:   00 18 00 00
    8d58:   00 20 00 00
    8d5c:   00 70 00 00
    8d60:   00 c0 00 00
    8d64:   00 c8 00 00
    8d68:   00 d0 00 00
    8d6c:   00 20 01 00
    8d70:   00 70 01 00
    8d74:   00 78 01 00
    8d78:   00 80 01 00
    8d7c:   00 d0 01 00
    8d80:   00 30 02 00
    8d84:   00 38 02 00
    8d88:   00 40 02 00
    8d8c:   00 90 02 00
    8d90:   00 e0 02 00
    8d94:   00 e8 02 00
    8d98:   00 f0 02 00
    8d9c:   00 40 03 00
    8da0:   00 90 03 00
    8da4:   00 98 03 00
    8da8:   00 a0 03 00
    8dac:   00 f0 03 00
    8db0:   00 50 04 00
    8db4:   00 58 04 00
    8db8:   00 60 04 00
    8dbc:   00 b0 04 00
    8dc0:   00 00 05 00
    8dc4:   00 08 05 00
    8dc8:   00 10 05 00
    8dcc:   00 60 05 00
    8dd0:   00 b0 05 00
    8dd4:   00 b8 05 00
    8dd8:   00 c0 05 00
    8ddc:   00 10 06 00

data_12:
  0x8de0:   00 00 00 00
    8de4:   00 04 00 00
    8de8:   00 08 00 00
    8dec:   00 0c 00 00
    8df0:   01 01 01 01
    8df4:   01 01 01 01
    8df8:   00 01 01 01
    8dfc:   01 00 01 01
    8e00:   00 01 01 01
    8e04:   01 00 00 01
    8e08:   00 00 00 00
    8e0c:   00 00 00 01
    8e10:   00 00 01 01
    8e14:   01 01 01 01
    8e18:   00 00 01 01
    8e1c:   01 01 01 01
    8e20:   00 00 01 01
    8e24:   01 01 01 00
    8e28:   00 00 00 01
    8e2c:   01 01 00 00
    8e30:   00 00 01 01
    8e34:   00 00 00 00
    8e38:   00 00 00 00
    8e3c:   00 00 00 00
    8e40:   00 00 00 00
    8e44:   00 00 00 00
    8e48:   00 00 00 00
    8e4c:   00 01 01 00
    8e50:   00 01 01 01
    8e54:   01 01 01 00
    8e58:   00 00 00 00
    8e5c:   00 00 00 00
    8e60:   00 01 00 00
    8e64:   00 00 00 00
    8e68:   00 00 00 00
    8e6c:   00 00 00 00
    8e70:   00 00 00 00
    8e74:   00 00 00 00
    8e78:   00 00 00 00
    8e7c:   00 00 00 00

data_10:
  0x8e80:   01 02 03 04
    8e84:   05 06 07 08
    8e88:   1c 1b 1a 19
    8e8c:   18 17 16 15
    8e90:   1d 1e 1f 20
    8e94:   21 22 23 24
    8e98:   35 34 33 32
    8e9c:   31 30 2f 2e
    8ea0:   36 37 38 09
    8ea4:   0a 0b 0c 0e
    8ea8:   00 00 0d 14
    8eac:   13 12 11 0f
    8eb0:   00 00 10 25
    8eb4:   26 27 28 29
    8eb8:   00 39 3b 2d
    8ebc:   2c 2b 2a 00
    8ec0:   00 00 3c 3e
    8ec4:   3f 40 00 41

data_7:
  0x8ec8:   29 1e 1f 20
    8ecc:   21 22 23 24
    8ed0:   2b 14 1a 08
    8ed4:   15 17 1c 18
    8ed8:   39 04 16 07
    8edc:   09 0a 0b 0d
    8ee0:   e1 1d 1b 06
    8ee4:   19 05 11 10
    8ee8:   e0 e3 e2 25
    8eec:   26 27 2d 2a
    8ef0:   64 00 2e 0c
    8ef4:   12 13 2f 31
    8ef8:   00 00 30 0e
    8efc:   0f 33 34 28
    8f00:   00 00 2c 36
    8f04:   37 38 e5 35
    8f08:   ce cd cc e6
    8f0c:   e7 65 cb e4

data_5:
  0x8f10:   29 1e 1f 20
    8f14:   21 22 23 24
    8f18:   2b 34 36 37
    8f1c:   13 1c 09 0a
    8f20:   39 04 12 08
    8f24:   18 0c 07 0b
    8f28:   e1 33 14 0d
    8f2c:   0e 1b 05 10
    8f30:   e0 e3 e2 25
    8f34:   26 27 2f 2a
    8f38:   64 00 30 06
    8f3c:   15 0f 38 31
    8f40:   00 00 2e 17
    8f44:   11 16 2d 28
    8f48:   00 00 2c 1a
    8f4c:   19 1d e5 35
    8f50:   ce cd cc e6
    8f54:   e7 65 cb e4

data_6:
  0x8f58:   29 1e 1f 20
    8f5c:   21 22 23 24
    8f60:   2b 14 1a 09
    8f64:   13 0a 0d 0f
    8f68:   2a 04 15 16
    8f6c:   17 07 0b 11
    8f70:   e1 1d 1b 06
    8f74:   19 05 0e 10
    8f78:   e0 e3 e2 25
    8f7c:   26 27 2d 2a
    8f80:   64 00 2e 18
    8f84:   1c 33 2f 31
    8f88:   00 00 30 08
    8f8c:   0c 12 34 28
    8f90:   00 00 2c 36
    8f94:   37 38 e5 35
    8f98:   ce cd cc e6
    8f9c:   e7 65 cb e4

data_14:
  0x8fa0:   20 10 40 80
    8fa4:   01 02 04 08

data_9:
  0x8fa8:   00 60 0b 40     0x400b6000  ; GPIO D
    8fac:   01 00 00 00     0x1
    8fb0:   00 00 0b 40     0x400b0000  ; GPIO A
    8fb4:   00 08 00 00     0x800
    8fb8:   00 00 0b 40     0x400b0000  ; GPIO A
    8fbc:   00 80 00 00     0x8000
    8fc0:   00 20 0b 40     0x400b2000  ; GPIO B
    8fc4:   02 00 00 00     0x2
    8fc8:   00 40 0b 40     0x400b4000  ; GPIO C
    8fcc:   20 00 00 00     0x20
    8fd0:   00 20 0b 40     0x400b2000  ; GPIO B
    8fd4:   08 00 00 00     0x8
    8fd8:   00 20 0b 40     0x400b2000  ; GPIO B
    8fdc:   10 00 00 00     0x10
    8fe0:   00 20 0b 40     0x400b2000  ; GPIO B
    8fe4:   20 00 00 00     0x20
    8fe8:   00 40 0b 40     0x400b4000  ; GPIO C
    8fec:   00 01 00 00     0x100

task_1:
  0x8ff0:   0x9010
  0x8ff4:   0x20000000
  0x8ff8:   0x234
  0x8ffc:   0x2e00 (sram_decode_static)

task_2:
  0x9000:   0x90d4
  0x9004:   0x20000234 (pointer_3)
  0x9008:   0x352c
  0x900c:   0x74c0 (sram_stack_zero)

sram_init_data:
  0x9010:   41 02 17 01
    9014:   29 18 69 04
    9018:   01 1c 63 34
    901c:   8b 5a 38 08
    9020:   a1 1a 02 03
    9024:   62 63 59 07
    9028:   01 27 03 15
    902c:   2a 4c 04 5f
    9030:   39 e8 e0 2c
    9034:   08 04 08 01
    9038:   11 28 0e 01
    903c:   02 03 05 05
    9040:   07 e0 e3 e2
    9044:   e6 e7 65 e4
    9048:   12 19 18 17
    904c:   07 05 03 02
    9050:   01 05 38 0a
    9054:   e4 e7 e6 e2
    9058:   e3 65 e0 06
    905c:   04 0e 51 02
    9060:   19 01 12 47
    9064:   12 8e 12 d5
    9068:   48 18 1c 01
    906c:   63 01 aa 01
    9070:   f1 01 38 02
    9074:   7f 02 c6 02
    9078:   0d 03 54 03
    907c:   9b 03 e8 03
    9080:   ff 01 83 bf
    9084:   7f 5a 01 01
    9088:   5a 02 01 5a
    908c:   03 01 e9 20
    9090:   4c 0a 0a 04
    9094:   20 3b 04 04
    9098:   20 5a 04 01
    909c:   f1 18 0a 90
    90a0:   d0 02 40 90
    90a4:   f0 06 40 94
    90a8:   04 1a 98 04
    90ac:   1e 9c e0 06
    90b0:   40 90 04 1a
    90b4:   94 04 1a 98
    90b8:   04 1e 9c c0
    90bc:   02 40 98 04
    90c0:   2a 9c 24 29
    90c4:   2c 19 0c 2a
    90c8:   94 14 19 0c
    90cc:   1a 9c 04 81
    90d0:   cb a0 0f e6
