LibChaos ideas / todo:

Todo:
=====================================================================================
ZAddress
    - is a mess of system calls and memcpys
    - move the data and conversions to / from sockaddrs into an internal Data class
ZSocket
    - make ZSocket more of a raw base class
    - less internal validation logic
    - make type const
    - make it work with tcp
ZDatagramSocket : private ZSocket
    - for sending / receiving messages using ZSocket
ZStreamSocket : private ZSocket
    - for accepting / connecting and reading / writing steams using ZSocket
ZStreamConnection : private ZStreamSocket
    - copyable representation of a stream connection

ZAutoBuffer
    - write it

// Archon stuff
-------------------------------------------------------------------------------------
ZHTTPConnection : public ZStreamConnection { // class to parse HTTP requests / format HTTP responses
    bool parse();
    void close();
}

RequestHandler : public ZHTTPConnection { // implement page generation logic here
    bool handleRequest();
    void replyInternalError();
}

// use ZStreamSocket to accept a connection, push a ZHTTPConnection into a queue, set condition variable to wake up a thread from the pool

ZHTTPConnection *conn = getConn...(...);

RequestHandler *req = new RequestHandler(conn);
queue.push(req);

while(run){
    // wait for queue to have jobs if necessary

    RequestHandler *req = queue.pop();
    if(req->parse()){
        try {
            if(!req->handleRequest()){
                throw ZError("Generically failed to handle request");
            }
        } catch(ZError e){
            req->replyInternalError();
        }
    } else {
        ELOG("Failed to parse request");
    }
    req.close();
    delete req;
}

Ideas:
=====================================================================================
ZReturn
    - small class
    - can be used as a return type to indicate success or error
    - can have a stack trace attached with ZError

ZDelta
    - binary delta algorithm
    - simple version control implementation in utils

ZUID
    - custom generation
    - generation options
        - sequence
        - content hash

ZDatabase
    - redundancy to protect from corruption
    - lightweight database
    - see ideas for ZParcel
    - fixed row sizes
    - fixed size types are inline
    - variable size types are stored as a 'pointer'
        - data is stored in a ZParcel
    - columns are stored as offsets
    - column index resolves names to offsets

ZParcel
    - redundancy
    - allocate extra space for index at top
    - write backup index at end of file when contents changed
    ? index could be rebuilt as last resort by reading through file, would be difficult to identify blocks with special labels
    - have a 'freed' list at the end of the file (before second index) that contains the locations and sizes of unused blocks in the file
    ? align blocks to 128/256/512 bytes

    - when entry added
        - add to index
        - check freed list for large enough block
        - else write to end of data section
    - when entry removed
        - remove from index
        - if at end of file
            - just truncate
        - otherwise
            - add location of entry to 'freed' list
            - reshuffle freed list, merge adjacent blocks
    - when entry changed
        - if same size or smaller
            - change in-place
            - modify index
            - add extra space to freed list
        - if larger
            - first check if succeeding block is free
            - check freed list for large enough block
                - move to that block
            - if no free block, move to end of file
            - add previous block to freed list
            - modify index

    - option to optimize parcel
        - rebuild parcel by copying all entries to buffer file
        - should empty freed list, no free block
        - take long time
    - hints for each block for parcel sorting
        - temporary : place at end of file, will be removed shortly
        - change often : hint to give block some succeeding buffer space to change size
        - sensitive : zero block on removal
    - hints for entire parcel
        - storage : attempt to reorganize parcel frequently
        - performance : optimize space less, operate as fast as possible
        - sensitive : always zero blocks

    ? compression


ZIterator 1
    class ZIterable<T, type>
    class ZIterator<T>
    class ZIterator<ZList<T>> : ZIterable<T, DUPLEX>
    ZIterator<ZList<T>> ZList<T>::begin()

ZIterator 2
    class ZIterator<T, type>
    class ZList<T>::ZListIterator : ZIterator<T, DUPLEX>
    ZList<T>::ZListIterator ZList<T>::begin()

ZIterator 3
    class ZIterable<T, type>
    class ZIterator<T, type> : ZIterable<T, type>
    ZIterator<T>(ZIterable<T> *it)
    class ZListIterable<T> : ZIterable<T, DUPLEX>
    ZIterator<T> ZList<T>::begin() return ZIterator<T>(new ZListIterable<T>(head))


ZReader 1
    class ZReadable<T>
        zu64 read(zbyte *dest, zu64 size) const
    class ZBinary : ZReadable<unsigned char>
    class ZReader<T>
    ZReader<T>(const ZReadable<T> *rdr)
    ZReader<T>(const ZReader<T> &other)

ZReader 2
    class ZReader<T>
        zu64 read(zbyte *dest, zu64 size)
    class ZBinary : ZReader<unsigned char>

